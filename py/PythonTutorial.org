#+TITLE: Python チュートリアル
#+STARTUP: overview
#+PROPERTY: header-args :session *Python:tutorial* :results output
* 概要
本書はPythonを包括的に説明するものではない．
よく使われる機能すら網羅はしていない．
* 食欲をそそってみようか
Pythonは，高速なプロトタイプ作成から，大規模ソフトウェアまで，なんでもこなせる．
小さく読みやすく書ける
遊びながら学んでみよう
* Python インタープリタの使い方
#+BEGIN_SRC python
  the_world_is_flat = True
  if the_world_is_flat:
      print("Be careful, don't slip out!")
#+END_SRC

#+RESULTS:
: Be careful, don't slip out!

* 気楽な入門編
** 数値
#+BEGIN_SRC python
  2 + 2
#+END_SRC

#+RESULTS:
: 4

*** 除算
#+BEGIN_SRC python
17/3

#+END_SRC

#+RESULTS:
: 5.666666666666667

*** 切り捨て除算
#+BEGIN_SRC python
17//3
#+END_SRC

#+RESULTS:
: 5

*** 剰余 %

*** 累乗 **

*** アンダースコアの機能
対話モードでは最後に表示した式が代入されている

*** 虚数 j
#+BEGIN_SRC python
3 + 5j
#+END_SRC

#+RESULTS:
: (3+5j)

** 文字列

*** RAW文字例 r

**** \n が改行と認識されて困る例
#+BEGIN_SRC python
print('C:\some\name')
#+END_SRC

#+RESULTS:
: C:\some
: ame

**** RAW文字列を使おう!!
#+BEGIN_SRC python
print(r'C:\some\name')
#+END_SRC

#+RESULTS:
: C:\some\name

**** なんと文字列を演算子とともに使える
#+BEGIN_SRC python
3 * 'a' + 'B'
#+END_SRC

#+RESULTS:
: 'aaaB'

**** 列挙すると自動的につながる 
#+BEGIN_SRC python
'apple' ' is delicious'
#+END_SRC

#+RESULTS:
: 'apple is delicious'

**** ただし列挙連結は変数ではできない
リテラルだけ．
#+BEGIN_SRC python
prefix = 'Py'
#+END_SRC

#+BEGIN_SRC python :output table
prefix 'thon'
#+END_SRC

#+RESULTS:
: ^
: SyntaxError: invalid syntax

**** 演算子と一緒ならOK

#+RESULTS:

#+BEGIN_SRC python
3 * prefix
#+END_SRC

#+RESULTS:
: 'PyPyPy'

#+BEGIN_SRC python
prefix + 'thon'
#+END_SRC

#+RESULTS:
: 'Python'

**** インデックスは0から
#+BEGIN_SRC python
prefix[0]
#+END_SRC

#+RESULTS:
: 'P'

**** 負のインデックスは右から
#+BEGIN_SRC python
lang = 'Python'
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python
lang[-1]
#+END_SRC

#+RESULTS:
: 'n'

**** スライシング
#+BEGIN_SRC python
lang[0:3]
#+END_SRC

#+RESULTS:
: 'Pyt'

#+BEGIN_SRC python
lang[:2]
#+END_SRC

#+RESULTS:
: 'Py'
#+BEGIN_SRC python
lang[2:]
#+END_SRC

#+RESULTS:
: 'thon'

#+BEGIN_SRC python
lang[:2] + lang[2:]
#+END_SRC

#+RESULTS:
: 'Python'

**** 文字列は改変できない
#+BEGIN_SRC python
lang[0] = 'J'
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: TypeError: 'str' object does not support item assignment

**** リテラル長
#+BEGIN_SRC python
len(lang)
#+END_SRC

#+RESULTS:
: 6

** リスト
* 制御構造ツール
* データ構造
* モジュール
手打ちでなく，スクリプトで書こう．

関数を書いたら，いちいちコピーしたくない．
だから，モジュールを使おう．
モジュールをimportすれば，他のモジュールやmainモジュールで使うことができる．

* 入出力
* エラーと例外
構文エラーと例外がある．
* クラス
他の言語に比べ，最小限の構文とセマンティクスで実現されている．

* 標準ライブラリめぐり
* 標準ライブラリめぐり--PartII
* 仮想環境とパッケージ
* 次はなに？
* 対話環境での入力行編集とヒストリ置換
* 不動小数点（float）の演算: その問題と限界
* 補遺
* 用語
* Python のドキュメント群について
* 歴史とライセンス
* コピーライト
* Python初心者だった頃--みんながひっかかるPythonのヘンなとこ
* Python 2 を読んだり書いたりせざるを得ない人へ
