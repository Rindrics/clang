#+TITLE: Land of Lisp
#+TAGS: cannot beyond important
#+STARTUP: overview
* はじめに
* LISP は力なり
** さあLisp を始めてみよう
*** Lisp の方言
何百もの方言がある．
つい自分の方言を作りたくなるので，地球上のハードディスクには何千もの途中で投げ出された方言が眠っているだろう！

代表的な2つの方言
- ANSI Common Lisp: 本書で扱うのはこちら
- Scheme
**** 二つの Lisp の方言
ANSI Common Lisp と Scheme は哲学が違う．
***** オオカミ型: ANSI Common Lisp
古の Lisp 方言たちの直系の子孫．
- 現実と折り合いをつけるためのたくさんの妥協のせいで少々醜い
- 手っ取り早くコードが書ける
- 古めかしい関数名
***** ヒツジ型: Scheme
いわば羊．
- 明快でエレガント
- プログラミングのより原理的な問題に近い
- やや冗長だが数学的に純粋
***** ヒツジの皮を被ったオオカミ型
パワーと美しさを備えた方言．
今はまだないが，将来現れるかも．

現時点では Haskell が近いかも（Lisp の候補は [[*%E6%96%B0%E3%81%97%E3%81%84 Lisp %E3%81%9F%E3%81%A1][新しい Lisp たち]] に記載）．
Haskell は Lisp 方言ではないが，パラダイムを共有している
- 統一的な構文
- リストのサポート
- 高階関数を使いまくる
- 厳密な数学的裏付け
**** 新しい Lisp たち
ヒツジの皮を被ったオオカミの候補
エピローグでまた触れる．
- Clojure
- Arc
**** スクリプティングに使われる Lisp 方言
- Emacs Lisp: 言わずもがな
- guile Scheme: いくつものOSSで
- Script-Fu Scheme: GIMP
**** ANSI Common Lisp
たくさんの方言を統一しようとして生まれた．
シェア率No.1
*** CLISP を始めよう
**** CLISP のインストール
**** CLISP を起動する
*** この章で学んだこと
- 二つの主流言語
- Common Lisp はマルチパラダイム言語
- CLISP は Common Lisp の実装の一つ．初心者におすすめ
- CLISP の REPL に直接 Lisp コマンドをタイプできる
** はじめてのLisp プログラム
*** 数当てゲーム
*** Lisp でグローバル変数を定義する
**** defparameter は値を上書きする
#+BEGIN_SRC lisp
(defparameter *foo* 5)
(defparameter *foo* 200)
*foo*
#+END_SRC

#+RESULTS:
: 200

[[/Users/ahayashi/Documents/GitHub/study/Programing/land_of_lisp/code/guess.lisp][コード]]



***** TODO 文字列を変数として定義する方法を調べる
***** TODO 耳あて**つきの変数を定義する方法を調べる
**** defvar は値を上書きしない
#+BEGIN_SRC lisp
  (defvar *bar* 5)
  (defvar *bar* 200)
   *bar*
#+END_SRC

#+RESULTS:
: 5
*** 基本的な Lisp のエチケット
括弧が必須．
実は空白やインデントは全然関係ない．
しかしスタイルの慣習は存在する．
本書では，スタイルについてはとやかく言わない．
*** グローバル関数を定義する
**** guess-my-number 関数の定義
探索範囲の下限と上限をそれぞれ*small* と *big*とした関数を作る．
#+BEGIN_SRC lisp
  (defparameter *small* 1)
  (defparameter *big* 100)
  (defun guess-my-number ()               ;引数なし
       (ash (+ *small* *big*) -1))
#+END_SRC

#+RESULTS:
: GUESS-MY-NUMBER
***** ash 関数とは？
ビット演算によく使われる関数．

- 1を足す: 左に1つ動かす，つまり 2倍
- 1を引く: 右に1つ動かす，つまり 1/2 倍
***** ここでは ash で何をしている？
数当てするためにバイナリサーチをやっている！！！
***** 関数を使ってみる
#+BEGIN_SRC lisp
(guess-my-number)
#+END_SRC

#+RESULTS:
: 50
下限1，上限100の中間，50 が返っている．
表示までしてしまうのは lisp の仕様．
**** smaller と bigger 関数の定義
#+BEGIN_SRC lisp
(defun smaller ()
     (setf *big* (1- (guess-my-number)))
     (guess-my-number))

(defun bigger ()
     (setf *small* (1+ (guess-my-number)))
     (guess-my-number))
#+END_SRC

#+RESULTS:
: BIGGER
どちらも，最後に(guess-my-number)を呼び，新しい条件で答えを再推定している．
***** 使ってみる
#+BEGIN_SRC lisp
(guess-my-number)
#+END_SRC

#+RESULTS:
: 100
値が増えたまま，戻らなくなってしまった
**** start-over 関数の定義
#+BEGIN_SRC lisp
(defun start-over ()
   (defparameter *small* 1)
   (defparameter *big* 100)
   (guess-my-number))
#+END_SRC

#+RESULTS:
: START-OVER
初期の値にリセットしている
*** ローカル変数を定義する let
ここまでは，グローバル変数とグローバル関数を定義した．
でも，定義を一つの関数や，一つのコードブロック内だけで有効にしたいということはよくある．
#+BEGIN_SRC lisp
  (let ((a 5)
        (b 6))
    (+ a b))
#+END_SRC

#+RESULTS:
: 11

*** ローカル関数の定義 flet

**** やってみる
#+BEGIN_SRC lisp
  (flet ((f (n)
           (+ n 10)))
    (f 5))
#+END_SRC

#+RESULTS:
: 15

**** 一気に2つ定義してみる
#+BEGIN_SRC lisp
  (flet ((f (n)
           (+ n 10))
         (g (n)
           (- n 3)))
    (g (f 5)))
#+END_SRC

#+RESULTS:
: 12

**** ローカル関数の中で，作ったばかりのローカル関数を使う labels
#+BEGIN_SRC lisp
  (labels ((a (n)
             (+ n 5))
           (b (n)
             (+ (a n) 6)))
    (b 10))                               ; 関数a は 関数b に含まれているので，最後は関数b だけが呼ばれている
#+END_SRC

#+RESULTS:
: 21
labels を使えば，定義の中で自分自身を呼ぶこともできる（再帰）．
*** 本章で学んだこと
- グローバル変数を定義するには defparameter
- グローバル関数を定義するには defun
- ローカル変数とローカル関数を定義するには，それぞれ let と flet
- labels は flet と似ているが，ローカル関数が自分自身を呼ぶとき（再帰）に使う．
** Lisp の構文の世界を探検する
* LISP は対称なり
** 条件と判断
** テキストゲームのエンジンを作る
** 世界とのインターフェース: Lisp でのデータの読み書き
** Lambda: とても大事な関数なので特別に章を分けて説明しよう
*** lambdaがすること
名前をつけずに関数を作れる．
その場限りの処理を他の関数に渡したい時にぴったり．
**** 普通に作ると名前が必要
#+BEGIN_SRC elisp
  (defun half (n)
    (/ n 2))

  (half 6)
#+END_SRC

#+RESULTS:
: 3
**** lambdaを使うと名前もdefunもいらない
#+BEGIN_SRC elisp
  ((lambda (n) (/ n 2)) 10)
#+END_SRC

#+RESULTS:
: 4
**** mapcarに渡して使う
#+BEGIN_SRC elisp
  (mapcar (lambda (n) (/ n 2)) '(2 4 6))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |
*** lambdaがそんなに大事なわけ
Lispのアイデアそのものが生まれた中心にある概念だから．
Lispの他の関数も，lambdaの概念を元に導かれている．
*** 本章で学んだこと
- lambdaを使って，名前を与えることなしに関数を作れる．
- Lispの多くの関数は，関数を引数として受け取れる．これらの関数を使うことを，「高階プログラミング」と呼ぶ．
** 単純なリストの先へ
** 親父のワンプスとは一味違う
** より進んだデータ型とジェネリックプログラミング
* LISP はハックなり
*** loop と format: Lisp の怪しげな下町
** loop コマンドによるループ
** format 関数でテキストを表示する
** ストリーム
** Webサーバを作ろう！！
Webベースのゲームを作るためにここがある．
さっと読んで終わり．必要なら，またあとから戻ってこよう．
[2018-11-22 Thu]
*** Common Lispでのエラー処理
*** ゼロからWebサーバを書く
文字のデコード方法
日本語のデコードはやはり特殊（訳注）
安全のためにはreadでなくinternを使え

**** 本章のコード
#+BEGIN_SRC lisp
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; version 2 of the License.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; Partial Author: Conrad Barski, M.D.
; Parts Adapted with permission from http.lisp by Ron Garret

(defun decode-param (s)
   (labels ((f (lst)
               (when lst
                 (case (car lst)
                     (#\% (cons (code-char (parse-integer (coerce (list (cadr lst) (caddr lst)) 'string) :radix 16 :junk-allowed t))
                                (f (cdddr lst))))
                     (#\+ (cons #\space (f (cdr lst))))
                     (otherwise (cons (car lst) (f (cdr lst))))))))
       (coerce (f (coerce s 'list)) 'string)))

(defun parse-params (s)
   (let* ((i1 (position #\= s))
          (i2 (position #\& s)))
      (cond (i1 (cons (cons (intern (string-upcase (subseq s 0 i1)))
                            (decode-param (subseq s (1+ i1) i2)))
                      (and i2 (parse-params (subseq s (1+ i2))))))
            ((equal s "") nil)
            (t s))))

(defun parse-url (s)
  (let* ((url (subseq s
                      (+ 2 (position #\space s))
                      (position #\space s :from-end t)))
         (x (position #\? url)))
     (if x
         (cons (subseq url 0 x) (parse-params (subseq url (1+ x))))
         (cons url '()))))

(defun get-header (stream)
  (let* ((s (read-line stream))
         (h (let ((i (position #\: s)))
               (when i
                     (cons (intern (string-upcase (subseq s 0 i)))
                           (subseq s (+ i 2)))))))
     (when h
        (cons h (get-header stream)))))

(defun get-content-params (stream header)
  (let ((content (assoc 'content-length header)))
    (when content
      (parse-params (read-sequence (make-string (read content)) stream)))))

(defun serve (request-handler)
  (let ((socket (socket-server 8080)))
    (unwind-protect
       (loop (with-open-stream (stream (socket-accept socket))
                 (let* ((url    (parse-url (read-line stream)))
                        (path   (car url))
                        (header (get-header stream))
                        (params (append (cdr url)
                                        (get-content-params stream header)))
                        (*standard-output* stream))
                   (funcall request-handler path header params))))
       (socket-server-close socket))))

(defun hello-request-handler (path header params)
  (if (equal path "greeting")
      (let ((name (assoc 'name params)))
        (if (not name)
            (princ "<form>What is your name?<input name='name' /></form>")
            (format t "Nice to meet you, ~a!" (cdr name))))
      (princ "Sorry... I don't know that page.")))
#+END_SRC

#+RESULTS:
: HELLO-REQUEST-HANDLER
**** 使ってみる
***** 不正なページへリクエストを出してみる
#+BEGIN_SRC lisp
(hello-request-handler "lolcats" '() '())
#+END_SRC

#+RESULTS:
: Sorry... I don't know that page.
***** 正しいページへリクエストを出してみる
#+BEGIN_SRC lisp :results output
(hello-request-handler "greeting" '() '())
#+END_SRC

#+RESULTS:
: <form>What is your name?<input name='name' /></form>
素晴らしい．
***** 名前を渡してもう一度
#+BEGIN_SRC lisp :results output
(hello-request-handler "greeting" '() '((name . "Bob")))
#+END_SRC

#+RESULTS:
: Nice to meet you, Bob!
**** Web サイトの立ち上げ
#+BEGIN_SRC lisp
  (serve #'hello-request-handler)
#+END_SRC
流石にEmacsからはむり．iTermからならいけそう．
** 美しき哉 関数型プログラミング
* LISP は科学なり
** 関数型プログラミングで Lisp をレベルアップ
** ダイス・オブ・ドゥーム: 関数型スタイルでゲームを書こう
Webベースのゲームを作るためにここがある．
*** ダイス・オブ・ドゥームのルール
*** ダイス・オブ・ドゥームのゲーム例
*** ダイス・オブ・ドゥームの実装，バージョン1
**** いくつかのグローバル変数
プレーヤーの数，ボードのサイズなど
**** ゲーム盤の表現
関数型（関数スタイルの条件に当てはまる書き方）で書かれた部分と，
そうでない（汚れ仕事を引き受ける）部分の違いを明確にして，説明されている．
乱数を使用していたり，画面に表示するものは，汚れ仕事に分類されるようだ．
**** ダイス・オブ・ドゥームのルールをゲームの他の部分から分離する
このゲームは，
- 人間の指し手を処理する部分
- AIプレーヤ
- ルールエンジン
の3つの部分に分けて設計するのが合理的．
関数プログラミングを使えは，この設計ができる．
一方，命令型でプログラミングしてしまうと，どうしてもルールに関する部分に重複が生じる．
**** ゲームツリーの生成
defun game-tree
**** 相手に手番を渡す
defun add-passing-move
**** 攻撃の手を計算する
defun attacking-moves
cur-playerってなんだろう？
難しい！！
**** 隣接するマスを見つける
defun neighbors
**** 攻撃
defun board-attack
ルールに従って実装する．
今の所，わかりやすさを重視して，効率の悪い実装になっている．
今後，バージョンを重ねるにつれて，この欠点を改善していく．
**** 補給
defun add-new-dice
ともすれば関数型の掟を破ることになりそうな動作だが，
ローカルに再帰関数を定義することによって，関数型で書く．
**** game-tree関数を試す．
ここまででこのゲームの完全なゲーム木をつくるコードが揃った．
ただし，サイズが莫大になるのて，実行には注意すること．
**** 人間対人間でダイス・オブ・ドゥームをプレイする
***** メインループ
defun play-vs-human
再起呼び出し
***** ゲームの状態を表示する
defun print-info
***** 人間のプレーヤからの入力を処理する
defun handle-human
***** 勝者を決定する
defun winners
***** 人間対人間のダイス・オブ・オブ・ドゥームを遊んでみよう
*** コンピュータによる対戦相手を作る
ゲーム木の生成を独立させたので，AIプレーやのコードを追加するだけでいい．
アルゴリズムは，
- 可能な手それぞれについて，
- その手を指すことで生じる盤面の状態に点数をつけ，
- 最も高い点数の手を選ぶ．
しかし，次の1手で勝敗が決まることはまれなので，どうやって点数をつければいいのだろう．
この手を打てば相手はこう打って...と，再帰の袋小路に入ってしまう．
**** ミニマックスアルゴリズム
<<ミニマックスアルゴリズム>>: 相手にとって一番いい手とは，自分にとって最も悪い手である．
**** ミニマックスをコードにする
defun rate-position
**** AIプレーヤを使うゲームループ
defun handle-computer
**** 人間対コンピュータで対戦してみよう
defun play-vs-computer
handle-humanとhandle-computerを交互に呼ぶ．
*** ダイス・オブ・ドゥームを高速化する
関数型スタイルで書くと，初心者のうちはどうしても遅いコードになりがち．
高速化に，以下のテクニックが役立つ
**** クロージャ
Lispプログラミングで重要な概念．
<<クロージャ>>: lambdaで関数が作られる時に，外側の情報を補足したもの．

第2章で，letを使って変数を作られる変数は，必ずしもローカルではないといった．
例えば，let式で作られた変数が外側で参照されているとき，値は残る．
Lispがガベージコレクタを備えているので，これが起こる．
これを使えば，関数の呼び出し「間」でも，明示的な代入なしに値を保持しておくことが可能（p.329参照）．
**** メモ化
関数が受け取った引数と，その結果を記録しておけば，同じ引数でまた呼ばれたときに，再計算の必要がない．
***** neighbors関数をメモ化する
neighbors関数をカスタムする．
もとのneighbors関数うold-neighborsというレキシカル変数に保存．
その後で，メモ化機能をつけた新しいneighborsを定義する．
この関数の動作は
- その計算が初めてではなかったときには，再計算せず，単にハッシュテーブルの値を表示する．
- その計算が初めてだったら，もとのneighbors関数を呼んで，計算する．
というもの．
***** ゲーム木をメモ化する
ここでも，もとのgame-tree関数をold-game-treeとしてレキシカル変数に保存し，カスタムしている．
コードはneigbors関数のカスタムとほとんど同じだが，eqlではなくequalpを使っていることろだけ違う．
これは，この関数が引数として配列をとるものだから．
equalpは配列の完全一致を調べる．
***** rate-position関数をメモ化する
ここでもold-rate-positionを作ってメモ化．
ただし，tree引数はゲーム木なので，巨大なデータである可能性がある．
そこで，treeとplayerを別々に記録し，treeの方はgame-treeのメモ化を
**** 末尾呼び出し最適化
いくらコンピュータでも，あとで1を足せ，という処理を10000回分も覚えておくことは辛い（クラッシュするかも）．
BASICのGOTOやCのlongjmpみたいなもの．
***** Common Lispでの末尾呼び出しのサポート
末尾呼び出しがサポートされていないこともある．
CLISPでは，コンパイルすることによって有効になる．
***** ダイス・オブ・ドゥームでの末尾呼び出し最適化
add-new-dice関数([[*%E8%A3%9C%E7%B5%A6][「補給]]」参照)を，末尾呼び出しを使って書き直す．
例として，リストの長さを求める簡単な関数を作ってみる．
****** my-length
******* 関数を書く
#+BEGIN_SRC elisp
  (defun my-length (lst)
    (if lst
        (1+ (my-length (cdr lst)))
      0))
#+END_SRC

#+RESULTS:
: my-length
******* 関数を使ってみる
長さが3のリストを渡すと，ちゃんと3と返ってきた．

#+BEGIN_SRC elisp
  (my-length '(fie foh fum))
#+END_SRC
#+RESULTS:
: 3

******* しかし，大きいデータを渡してしまうと...?
上のアルゴリズムでは，リストを全て調べ終わるまで1を足しておくことをメモリを使って覚えておく必要がある．
大きいリストを渡すと，オーバーフローしてしまう．
なぜか?
上のmy-lengthの定義では，自身の再帰呼出しが3行目に来ている．
これを，最後に持っていくとメモリに優しい．
******* そこで，末尾呼び出しで書く！
ローカル関数fが必要になるが，再帰呼出しを一番最後に移動させることができた．
#+BEGIN_SRC elisp
  (defun my-length (lst)
    (labels ((f (lst acc)
                (if lst
                    (f (cdr lst) (1+ acc))
                  acc)))
      (f lst 0)))
#+END_SRC

#+RESULTS:
: my-length
******* 末尾呼び出しバージョンを使ってみる
この環境じゃ違いがわからないけど...
#+BEGIN_SRC elisp
  (my-length '(fie foh fum))
#+END_SRC

#+RESULTS:
: 3

**** 3×3のゲーム盤でのプレイ例
コンピュータはかなり強い．
*** 本章で学んだこと
- 関数型プログラミングを使うことで，ルールエンジンを独立させて開発できた．
- AIプレーヤは，[[ミニマックスアルゴリズム]]を使ってプログラムするのが効率的．
- レキシカル変数（これまで，ローカル変数と呼んでいた）は，lambda式の中で参照されていると，式の外側でも生き続けることができる．このように変数を作ることを，[[「クロージャ]]を作る」という．
- 関数型プログラムの高速化には，以下のテクニックが有効．
  - メモ化
  - 末尾呼び出し最適化
** マクロの魔法
*** 簡単なLispマクロ
このコードを書くのは，何度目だろう...となったら，マクロ化のチャンスかも（ホントは関数化を先に考える）．
括弧を減らすことができるかも．
**** マクロの展開
マクロは普通の関数と違い，コンパイルされるときに走る．このタイミングを「マクロ展開時」という．
普通の関数が走るタイミングは，普通に「実行時」と呼ぶ．
**** マクロはどんなふうに変換されるか
(defmacro macroname (var val &body body))
&bodyは，「自分よりも右に出てくる式は全部リストにしてbodyとして渡してくれ」という意味．
**** 簡単なマクロを使ってみる
マクロのデバッグ方法は
(macroexpand '(macro ...))
みたいな感じ．
*** もっと複雑なマクロ
冗長だった[[*my-length][my-length]]関数を，マクロを使って書き直す
my-lengthを再掲し，冗長なポイントにコメントをつけてみた．
#+BEGIN_SRC elisp
  (defun my-length (lst)
    (labels ((f (lst acc)                 ;ローカル関数を定義する
                (if lst                   ;リストが空かどうか調べる
                    (f (cdr lst) (1+ acc)) ;cdrでリストの残りを調べる
                  acc)))
      (f lst 0)))

  (my-length '(foo bar ping pong))
#+END_SRC

#+RESULTS:
: 4
マクロを使って，my-lengthを引き締めよう．
**** リストを分割するマクロ
***** まずsplit関数を作る
#+BEGIN_SRC elisp
;;バグ有り注意
  (defmacro split (val yes no)
    `(if ,val
         (let ((head (car ,val))
               (tail (cdr ,val)))
           ,yes)
       ,no))

  (split '(2 3)
         (format "Split to ~a and ~a." head tail)
         (format "Cannot be split."))
#+END_SRC
,
#+RESULTS:
: Split to ~a and ~a.
split関数は，headとtailという変数を作り出し，これらは関数の外からも参照できる．
このように，自動的に変数を作り出すマクロは，<<アナフォリックマクロ>>と呼ばれる．

**** マクロ中で式が繰り返し実行されるのを防ぐ
***** 意図しない繰り返し
以下のコードは，"Lisp rocks!"が3回出てくる．
これは，progn式がval引数にまるごとわたってくるため．
#+BEGIN_SRC elisp
  (split (progn (princ "Lisp rocks!")
                '(2 3))
         (format "OK" head tail)
         (format "NG"))
#+END_SRC
***** ローカル変数を定義して多重呼び出しを回避
splitの定義を以下のようにすれば，一応princは1回しかよばれなくなる． |
#+BEGIN_SRC elisp
  ;;; しかしまだバグがある
  (defmacro split (val yes no)
    `(let1 x ,val
           (if x
               (let ((head (car x))
                     (tail (cdr x)))
                 ,yes)
             ,no)))
#+END_SRC
ここで残っているバグは，なんだろうか？
**** 変数補足を避ける
(gensym)を使うんだ．
**** 再帰呼び出しマクロ
再帰呼び出しを含むrecurseマクロを定義して完成．
まずpairs関数を作り，それを使ってrecurseマクロを書く．
*** マクロの危険と代替案
確かに強力だが，アドホックすぎる．
それに，他人（そして未来の自分も？）がコードを読みにくい．
初心者がマクロを書きたいと思うとき，たいていは関数型プログラミングで実現できることが多い．
ただし，どうしても関数型プログラミングでは無理な状況も確かにある．
マクロは，そんなときの最後の手段．
*** 本章で学んだこと
- マクロを使うと，コードを書くコードを書ける．マクロによって，自分独自の言語を作り，それをLispコンパイラが見る直前に標準のLispへと変換することができる．
- マクロを使えば，コードを書く時のデジャヴを避けることができる．
- マクロを書く時は，１つのコードが意図せず複数回実行されないよう，気をつけよ．
- マクロを書く時には，意図しない変数補足を起こさないよう，気をつけよ．gensymで名前を作れば，それを避けられる．
- マクロ内で作る変数を，仕様として敢えてマクロ使用者からも見えるようにしている時，そのマクロはアナフォリックマクロと呼ばれる．
  - マクロプログラミングは強力だが，最後の手段と心得よ．可能な限り関数型プログラミングで実装せよ．
** ドメイン特化言語
*** ドメインとは何か
人が考えを及ぼす領域．
これから，
- ベクター画像を作る
- ゲームのコマンドを作る
という，全く異なるドメインにおいて，それぞれDSLを作成し，どのように役立つかを見ていく．
*** SVGファイルを書き出す
htmlみたいなタグ言語．
Web開発者ではホットな形式．
**** タグマクロを使ってXMLとHTMLを生成する
タグを自動生成するマクロがあったら便利．
LaTeXの表作成にも使えるのではないか．
***** マクロの補助関数を書く
***** tagマクロを作る
以下の要件を満たすには，どうしてもマクロが必要．
- ネストしたタグを完璧に作りたい
- タグ名と属性名は常にデータモードでいい

入れ子のタグも生成することができた．
***** tagマクロを使ってHTMLを生成する
HTMLも楽勝．
**** SVG特有のマクロと関数を作る
SVGには2つの特別な属性が必要．
- xmlns属性．ビューワで正しく表示するための属性．
- xmlns:xlink属性．画像の中にハイパーリンクを置くための属性．
マクロが必要な部分と，関数で十分な部分がある．
**** もっと複雑なSVG画像を描く
ランダムウォークのグラフを書いてみた．
マクロの中で生のLispコードでループさせることもできる．
*** 魔法使いのアドベンチャーゲームに新たなコマンドを追加する
コードは
http://landoflisp.com から wizard_game.lisp をダウンロード．
**** ゲームコマンドを直接定義する
***** 溶接のコマンド weld
*chain-welded*という動的変数を定義して実装．
ただし条件がある
- 屋根裏にいる必要がある
- 鎖とバケツを持っている必要がある
- 鎖とバケツはまだ溶接されていない状態でないとだめ
溶接したあとは，*chain-welded*がtになる．
***** 「投げ入れる」コマンド dunk
溶接と同様，いくつか条件がある
- 井戸の前にいる
- 鎖が溶接されたバケツを持っている
- ...
***** さて，一歩引いて見ると
weldとdunkに共通点がある．
これを考慮してgame-actionマクロを書いて，今後新しいコマンドを追加するのを楽にしよう．
game-actionの引数は，
- コマンドの名前
- 必要なアイテム
- 場所
- 任意のコード

ゲームのエンディングの分岐も実装できる．
**** 完成した魔法使いのアドベンチャーゲームをプレーしよう
*** 本章で学んだこと
LispでDSLをどう作るかを学んだ．
- 特定の領域で，その領域に特別なやり方でプログラムを書く場合，マクロは非常に良い道具となる．マクロを使えば，自分のDSLが作れる．
- マクロの前に補助関数（print-tagのような）をまず書いて，次にマクロでないとできない機能を盛り込んだマクロ（tagのような）を書く，というのがいい方法．補助関数に対する改善としてのマクロは，より美しく，安全な構文をプログラマが使えるようにしてくれる．
- DSLと生のLispコードを混ぜて使うことができる．これによってプログラマは多くの力を得る．
- DSLは，Webページを生成するコード，画像を描画するコード，ゲームコマンドを定義するコード，など，何かの目的に特化したコードを書く時に便利だ．
** 遅延プログラミング
引数のみに依存して関数の値を計算しようとすると，しばしば引数に膨大な情報を流さなければならなくなる．
ゲームの最初から全ての可能性を見なくても済むようにする方法を，遅延評価という．
*** Lispに遅延評価を足す
ゲームの枝は，ゲーム開始時から一応宣言される．
ただ，見えないように隠しておく．
実際に参照される分だけが計算される．

HaskellやClojureにはもともと遅延評価機能が入っているが，ANSI Common Lispにはない．
でも，マクロで自分で実装できる．
**** lazyコマンドとforceコマンドの作成
***** lazy
- 計算済みかどうか
- 値
を記憶している．
- 計算済みでなければ: 計算し，値を保存し，計算済みフラグを立てる．
- 計算済みなら: 値を返す
***** force
lazyを呼ぶだけ．
**** 遅延リストライブラリを作る
cons, car, cdrの遅延評価バージョンを作る
- lazy-cons
- lazy-car
- lazy-cdr
- lazy-nil
- lazy-null
**** 通常のリストと遅延リストとの変換
- make-lazy: リストを順に見てゆき，それぞれのコンスをlazyマクロで包む
- take: 遅延リストのうち，n個の要素を通常のリストに変換する
- take-all: 遅延リストを全て通常のリストに変換する．当然，無限の長さの遅延リストには使えない．
**** 遅延リストに対するマッピングと検索
- lazy-mapcar
- lazy-mapcan
- lazy-find-if
- lazy-nth
例えば，無限の正の整数リストにsqrtをマップすれば，全ての正の整数の遅延リストが得られる．
*** ダイス・オブ・ドゥーム，バージョン2
*** 大きなゲーム盤でAIを動かす
計算量が増えるので，正確性を落とさないといけない．
**** ゲーム木の刈り込み
- 盤面の評価
- 何手先まで読むか
は直交した課題なので，別の関数で実装する．
***** ゲーム木を刈り込む関数を作る
引数は
- ゲーム木
- 何手先まで読むか
返り値は
- 刈り込まれたゲーム木
すごい．

AIが手を読む直前にこれを使えばいい．
**** ヒューリスティクスを適用する
正確性と引き換えに柔軟性を手に入れた．
これを，ヒューリスティクスの世界に足を踏み入れた，という．
**** 大きく勝つか小さく勝つか
今まではバカみたいに最善を尽くすアルゴリズムだった．
今度は，相手との差を考慮して，手を読む深さを決定する．

***** 点数づけなんてこともやってみる
マスに重み付けをすることによって，各回におけるプレーヤの点数をしてみる．
点数の計算アルゴリズムは，かなりざっくり．根拠など無い．
ここにもヒューリスティックさがある．
**** アルファ・ベータ法
ダイス・オブ・ドゥーム，バージョン2 の AI プレーヤに最後の改良を加える．
方法としては，ミニマックスアルゴリズムのよく知られた最適化法である，
アルファ・ベータ法
を使う．
***** 2つの注意点
****** 1つめの注意点
本当は，「アルファとベータそれぞれが上限と下限のどちらを意味するか」を，
適宜入れ替えて使えばコードは短くなるけど，
本書ではわかりやすさを重視して upper-limit と lower-limit という変数を定義して使っていく
（短さよりも，明快さを重視しろ，というしね）．
****** もう１つの注意点
[[*%E3%82%B2%E3%83%BC%E3%83%A0%E6%9C%A8%E3%81%AE%E5%88%88%E3%82%8A%E8%BE%BC%E3%81%BF][ゲーム木の刈り込み]] では，
- 盤面の評価
- 何手先まで手を読むか
を独立に関数化した（直交したしょりなので）けど，
ここではミニマックスアルゴリズムとアルファベータ法を分けず，1つの関数として書いてしまう．

なぜか？簡単にいうと，直交していないから．
アルファベータ法はミニマックスの中間計算結果を参照しなければならない
（ほんとは，もっと進んだAIなら，それでも分離しておいたほうがいいらしい．なぜだろう．）
***** 実装する
前に定義した get-ratings を2つの新しい関数，
- ab-get-ratings-max
- ab-get-ratings-min
で置き換える（2つになってしまったのは[[*1%E3%81%A4%E3%82%81%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9][アルファとベータという名前を使わなかったから]]）．
****** MAX ノード（AI にとって自分の手番）
****** MIN ノード（相手の手番）
****** 盤面の状態を評価する関数 ab-rate-position
まず自分の手番か相手の手番かをチェックする．
- 自分の手番なら: ab-get-ratings-max に処理させる
- 相手の手番なら: ab-get-ratings-min に処理させる
ほかは以前の rate-position と同じ．
****** ミニマックスアルゴリズムを利用している他の関数も変更する
handle-computer が新しい関数を呼ぶようにする
upper-limit と lower-limit の初期値は，理想的には正の無限大と負の無限大を渡すべきだが，
ANSI Common Lisp で無限大がサポートされていないので，
- most-positive-fixnum
- most-negative-fixnum
を使う．
***** さてお次は？
AIの性能をけっこう上げたので，もっとゲーム盤を大きくする．

うまくいくが，今度は表示されるテキストが多いので見るほうが辛くなってきた．
次は，インターフェースを改善する．
*** 本章で学んだこと
本章は，遅延リストの使用と，計算の絶対数を減らすことによって，AI エンジンを洗練させた．
以下を学んだ．
- 遅延プログラミングを使うと，巨大な，あるいは無限の大きさを持つデータ構造を非常に効率良く扱える．
- lazy マクロとfore 関数さえ書けば，それを元知様々な高機能な遅延計算を実装することができる．遅延リストライブラリもその一つ．
- ヒューリスティクスとは，完璧さを少し犠牲にして，コードの性能を上げるアルゴリズム．
- 遅延ゲーム木を使ってダイス・オブ・ドゥームを書き直したことで，AI が先読みする手数の制限をエレガントに書くことができた．
- アルファベータ法を使うと，手の評価に影響を与えない枝を刈ることで，AI が考慮すべき状態数を大きく減らし，さらに性能を向上させることができる．
まるで，棋士の脳みたい．
** ダイス・オブ・ドゥームにグラフィカルな Web インターフェースをつける
- 見やすく
- 手の指示を出しやすく
*** ゲーム盤を SVG フォーマットで描画する
[[*Web%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86%EF%BC%81%EF%BC%81][Web サーバはもう作った]]し，[[*%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E7%89%B9%E5%8C%96%E8%A8%80%E8%AA%9E][DSL で SVG グラフィクスも書いた]]．
***** 必要なファイルをロードする
#+BEGIN_SRC lisp
  (load "dice_of_doom_v2.lisp")
  (load "webserver.lisp")
  (load "svg.lisp")
#+END_SRC

#+RESULTS:
: T
***** ゲーム盤の各部の大きさを決める定数を定義する
#+BEGIN_SRC lisp
  (defparameter *board-width* 900)
  (defparameter *board-height* 500)
  (defparameter *board-scale* 64)
  (defparameter *top-offset* 3)
  (defparameter *dice-scale* 40)
  (defparameter *dot-size* 0.05)
#+END_SRC

#+RESULTS:
: *DOT-SIZE*
**** サイコロを描く draw-die-svg
***** 関数を定義する
draw-die-svg(x座標，y座標，色)
#+BEGIN_SRC lisp
  (defun draw-die-svg (x y col)
    (labels ((calc-pt (pt)
               (cons (+ x (* *dice-scale* (car pt)))
                     (+ y (* *dice-scale* (cdr pt)))))
             (f (pol col)
               (polygon (mapcar #'calc-pt pol) col)))
    (f '((0 . -1) (-0.6 . -0.75) (0 . -0.5) (0.6 . -0.75))
       (brightness col 40))
    (f '((0 . -0.5) (-0.6 . -0.75) (-0.6 . 0) (0 . 0.25))
       col)
    (f '((0 . -0.5) (0.6 . -0.75) (0.6 . 0) (0 . 0.25))
       (brightness col -40))
    (mapc (lambda (x y)
            (polygon (mapcar (lambda (xx yy)
                               (calc-pt (cons (+ x (* xx *dot-size*))
                                              (+ y (* yy *dot-size*)))))
                             '(-1 -1 1 1)
                             '(-1 1 1 -1))
                     '(255 255 255)))
          '(-0.05 0.125 0.3 -0.3 -0.125 0.05 0.2 0.2 0.45 0.45 -0.45 -0.2)
          '(-0.875 -0.80 -0.725 -0.775 -0.70 -0.625
            -0.35 -0.05 -0.45 -0.15 -0.45 -0.05))))
#+END_SRC

#+RESULTS:
: DRAW-DIE-SVG
***** 描いてみる
#+BEGIN_SRC lisp
  (svg 100 100 (draw-die-svg 50 50 '(255 0 0)))
#+END_SRC

#+RESULTS:
: #\>
**** マスを描く draw-tile-svg
***** 関数を定義する
#+BEGIN_SRC lisp
  (defun draw-tile-svg (x y pos hex xx yy col chosen-tile)
    (loop for z below 2
          do (polygon (mapcar (lambda (pt)
                                (cons (+ xx (* *board-scale* (car pt)))
                                      (+ yy (* *board-scale*
                                               (+ (cdr pt) (* (- 1 z) 0.1))))))
                              '((-1 . -0.2) (0 . -0.5) (1 . -0.2)
                                (1 . 0.2) (0 . 0.5) (-1 . 0.2)))
                      (if (eql pos chosen-tile)
                          (brightness col 100)
                          col)))
    (loop for z below (second hex)
          do (draw-die-svg (+ xx
                              (* *dice-scale*
                                 0.3
                                 (if (oddp (+ x y z))
                                     -0.3
                                     0.3)))
                           (- yy (* *dice-scale* z 0.8)) col)))
#+END_SRC

#+RESULTS:
: DRAW-TILE-SVG
***** 描いてみる
#+BEGIN_SRC lisp
  (svg 300 300 (draw-tile-svg 0 0 0 '(0 3) 100 150 '(255 0 0) nil))
#+END_SRC

#+RESULTS:
: #\>
**** ゲーム盤を描く draw-board-svg
***** 関数を定義する
#+BEGIN_SRC lisp
  (defparameter *die-colors* '((255 63 63) (63 63 255)))

  (defun draw-board-svg (board chosen-tile legal-tiles)
    (loop for y below *board-size*
          do (loop for x below *board-size*
                   for pos = (+ x (* *board-size* y))
                   for hex = (aref board pos)
                   for xx = (* *board-scale* (+ (* 2 x) (- *board-size* y)))
                   for yy = (* *board-scale* (+ (* y 0.7) *top-offset*))
                   for col = (brightness (nth (first hex) *die-colors*)
                                         (* -15 (- *board-size* y)))
                   do (if (or (member pos legal-tiles) (eql pos chosen-tile))
                          (tag g ()
                            (tag a ("xlink:href" (make-game-link pos))
                              (draw-tile-svg x y pos hex xx yy col shosen-tile)))
                          (draw-tile-svg x y pos hex xx yy col chosen-tile)))))
  (defun make-game-link (pos)
    (format nil "=game.html?chosen=~a" pos))
#+END_SRC

#+RESULTS:
: MAKE-GAME-LINK

***** 描いてみる
#+BEGIN_SRC lisp
  (svg *board-width* *board-height* (draw-board-svg (gen-board) nil nil))
#+END_SRC
*** Web サーバインターフェースを作る
**** リクエストハンドラの作成 dod-request-handler
#+BEGIN_SRC lisp
  (defparameter *cur-game-tree* nil)
  (defparameter *from-tile* nil)

  (defun dod-request-handler (path header params)
    (if (equal path "game.html")
        (progn (princ "<!doctype html>")
               (tag center ()
                    (princ "Welcome to DICE OF DOOM!")
                    (tag br ())
                    (let ((chosen (assoc 'chosen params)))
                      (when (or (not *cur-game-tree*) (not chosen)) ;ニューゲーム（ゲーム木が空||マスが選択されていない）なら
                        (setf chosen nil)
                        (web-initialize))
                      (cond ((lazy-null (caddr *cur-game-tree*)) ;ゲームが終了してるよね？（可能な手はないよね？）
                             (web-announce-winner (cadr *cur-game-tree*))) ;勝者をアナウンス
                            ((zerop (car *cur-game-tree*)) ; プレーヤ番号は0（人間）だよね？
                             (web-handle-human
                              (when chosen
                                (read-from-string (cdr chosen))))) ; ここに脆弱性あり
                            (t (web-handle-computer)))) 　;　コンピュータの手番
                    (tag br ())
                    (draw-dod-page *cur-game-tree* *from-tile*)))
        (princ "Sorry... I don't know that page.")))
#+END_SRC

#+RESULTS:
: DOD-REQUEST-HANDLER

**** このゲーム Web サーバの制限
- 誰からWebリクエストが来たかを一切チェックしていないので，複数人からアクセスがきたら，大混乱になる．
- URL情報を読むのにread-from-stringを使っており，悪意あるコードを実行させられてしまう可能性がある

***** 読者への宿題
このゲームをマルチプレーヤに対応させよ．
実装のヒントは p.409
**** ゲームを初期化する web-initialize
ランダムなゲーム盤からゲーム木をつくり，*cur-game-tree*に格納する
#+BEGIN_SRC lisp
  (defun web-initialize ()
    (setf *from-tile* nil)
    (setf *cur-game-tree* (game-tree (gen-board) 0 0 t)))
#+END_SRC

#+RESULTS:
: WEB-INITIALIZE

**** 勝者を表示する web-announce-winner
以前作ったannounce-winnerとの違いは，最後に新しいゲームを始めるリンクを埋め込んでいるだけ．
#+BEGIN_SRC lisp
  (defun web-announce-winner (board)
    (fresh-line)
    (let ((w (winnern board)))
      (if (> (length w) 1)
          (format t "The game is a tie between ~a" (mapcar #'player-letter w))
          (format t "The winner is ~a" (player-letter (car w)))))
    (tag a (href "game.html")
         (princ " play again")))
#+END_SRC

#+RESULTS:
: WEB-ANNOUNCE-WINNER

**** 人間のプレーヤの処理 web-handle-human
#+BEGIN_SRC lisp
  (defun web-handle-human (pos)
    (cond ((not pos) (princ "Please choose a hex to move from:"))
          ((eq pos 'pass) (setf *cur-game-tree*
                                (cadr (lazy-car (caddr *cur-game-treeC))))
           (princ "Your reinforcements have been placed.")
           (tag a (href (make-game-link nil))
                (princ "continue")))
          ((not *from-tile*) (setf *from-tile* pos)
           (princ "Now choose a destination:"))
          ((eq pos *from-tile*) (setf *from-tile* nil) ; 同じタイルがクリックされたら選択を解除
           (princ "Move cancelled."))
          (t (setf *cur-game-tree*
                   (cadr (lazy-find-if (lambda (move)
                                         (equal (car move)
                                                (list *from-tile* pos)))
                                       (caddr *cur-game-tree*))))
             (setf *from-tile* nil)
             (princ "You may now ")
             (tag a (href (make-game-link 'pass))
                  (princ "pass"))
             (princ " or make another move:"))))
#+END_SRC

#+RESULTS:
: WEB-HANDLE-HUMAN

**** コンピュータプレーヤを処理する web-handle-computer
#+BEGIN_SRC lisp
  (defun web-handle-computer ()
    (setf *cur-game-tree* (handle-computer *curgame-tree*))
    (princ "The computer has moved. ")
    (tag script ()
         (princ
          "window.setTimeout('window.location=\"game.html?chosen=NIL\',5000)"))) ;AIプレーヤが指している時，原始的なアニメーションを見せる
#+END_SRC

#+RESULTS:
: WEB-HANDLE-COMPUTER

**** HTML の中に SVG ゲーム盤を描く drow-dod-page
#+BEGIN_SRC lisp
  (defun draw-dod-page (tree selected-tile)
    (svg *board-width*
         ,*board-height*
         (draw-doard-svg (cadr tree)
                         selected-tile
                         (take-all (if selected-tile
                                       (lazy-mapcar
                                        (lambda (move)
                                          (when (eql (caar move)
                                                     selected-tile)
                                            (cadar move)))
                                        (caddr tree))
                                       (lazy-mapcar #'caar (caddr tree)))))))
#+END_SRC

#+RESULTS:
: DRAW-DOD-PAGE

*** ダイス・オブ・ドゥーム，バージョン 3 をプレーする
#+BEGIN_SRC lisp
  (serve #'dod-request-handler)
#+END_SRC
*** 本章で学んだこと
- ゲーム盤をSVGフォーマットで描画することによって，ダイス・オブ・ドゥームのグラフィックバージョンを作った
- HTML5ではインラインSVG画像がサポートされているので，Webを使ったインタラクティブゲームを作ることができる
- この章のバージョンでは複数のプレーヤがプレイすることはできないが，そうできるように拡張することはできる
** ダイス・オブ・ドゥームをさらに面白く
* エピローグ
* 索引で調べた関数
** let p.16, 133, 340
ローカル変数
** 1-
引数から1を引いた数を返す
