#+TITLE: 詳説正規表現
#+PROPERTY: header-args :results scalar
* はじめに
最初の6章，「効率のよい正規表現の作り方」までを，読み物として読むこと．
* 正規表現入門/ egrepを例に
校正現場で現実に処理しないといけない注文，一見かなり困難．
- たくさんのファイル
- プレビュー形式
- case-insensitive
- 空白の個数を無視
- タグを無視
正規表現ならなんとかできる．
強力なテキスト処理能力で有名な言語も，単に正規表現をサポートしているだけだったりする．
ほんとうに強力なのは正規表現の方．
手始めに，egrepの正規表現を見ていく．
** 現実の問題を解く
大きい問題も小さい問題にも
*** 大文字小文字の区別に代表される様々な表記ゆれ，正規表現が解決する．
36000行のテキストのチェック場面でも，コマンドのタイプに15秒，実行に2分．素晴らしい．
*** inboxにあるメールのリストを誰かに送りたいとき
FromやSubjectを検索する
さらに sed との連携
1時間かけてこれをやるのと，どっちがいいか？

*** 正規表現を学べば
便利すぎて手放せなくなるだろう．
本書はその指針．モチベーションも得てもらえれば何より．
** 言語としての正規表現
呪文でもなんでもない．
ひとたび学べば，ちんぷんかんぷんを脱却できる．
*** ファイル名との類似点
ワイルドカードはファイル検索によく使う（file glob）．
一方，一般テキスト（散文，韻文，プログラム，報告書，HTML，コード表，ワードリストetc.）はもっと規模が大きく，問題も大きい．
一般的なパターン言語が発達してきた．
このパターン言語とパターン自体を正規表現と呼ぶ．
*** 言語との類似点
メタ文字，それ以外はリテラル．
正規表現はもはや言語．
ワイルドカードとの違いは，豊かな表現力．
見たこともない人にはとっつきにくいかもしれないが，すぐにわかるようになる．
*** 本書のゴール
要求に応じた正規表現を書けるようになること．
正規表現をどのように *考えたらいいか* を身につけること．

** 正規表現という思考の枠組み
https://learning.oreilly.com/library/view/mastering-regular-expressions/0596528124/ch01.html

*** ある程度正規表現のことを知っているなら
知っていても，目を通すこと．
新しい発見があるはず．
*** ファイルからのテキストの検索: egrep
クォートはシェルによって異なる．
catを検索しても，vacationもヒットする．
egrepはファイルの中のバイトと行を認識することはできるが，単語，文，段落などの高水準な概念を理解することはできない．
** egrepのメタ文字
*** 行頭と行末
本質的な意味を理解せよ．
^cat を，「行頭がcatになっている行にマッチ」と理解してはいけない．
正しくは， *行頭がある場合，その次がc，その次がa，その次がt担っている行にマッチする* と理解せよ．
そうすれば，^$ や ^ の挙動も理解できるだろう．
- ^$: 行頭があり，その次に行末が続けばマッチする -> スペースもない，空行がマッチ
- ^: 行頭だけがあればマッチする． -> 全ての行が行頭を持つので，全ての行がマッチする．
*** 文字クラス []
これ自体，1つの言語と考えると良い．
**** 複数の文字のどれか一つとマッチさせる []
grey と gray を検索するには
#+BEGIN_SRC sh
echo 'I wear grey T-shirt,
yellow pants,
green shoes,
and gray cap.' | egrep 'gr[ae]y'
#+END_SRC

#+RESULTS:
: I wear grey T-shirt,
: and gray cap.
***** gr[ae]y という正規表現の解釈のしかた
[]の中は「または」という意味．ok
この[]の外の，普通にタイプした正規表現は，「かつ次に」という意味である．（なるほど！！！）
***** 使ってみる
Smith と smith -> '[Ss]mith'
blacksmith もマッチすることには注意．

H[123456] -> HTML タグの検索など

***** 範囲指定
H[123456] を短縮するには H[1-6]

範囲は複数指定できる！！！
[0123456789abcdefABCDEF] は，[a-f0-9A-F] と書くことができる！！
ちなみにこれは16進数を扱うときに役立つ．
***** 文字クラスの中での振る舞い
[0-9A-Z_!.?] とすると数字，大文字，アンダースコア，感嘆符， *ピリオド* ，疑問符にマッチする．
文字クラスの中ではピリオドはメタ文字ではない．

一方，ダッシュは，範囲を表すメタ文字になる．
ところが文字クラス内の先頭や末尾に置いた場合は範囲を示せないので，ダッシュ文字そのものとして認識される．
#+BEGIN_SRC sh
echo 'ピリオド'
echo 'I like high-lows' | egrep 'high[.]lows'
echo '範囲指定ダッシュ'
echo 'I like high-lows' | egrep 'high[0-9]lows'
echo '頭のダッシュ'
echo 'I like high-lows' | egrep 'high[-9]lows'
echo '末尾のダッシュ'
echo 'I like high-lows' | egrep 'high[9-]lows'
echo '1つのダッシュ'
echo 'I like high-lows' | egrep 'high[-]lows'

#+END_SRC

#+RESULTS:
: ピリオド
: 範囲指定ダッシュ
: 頭のダッシュ
: I like high-lows
: 末尾のダッシュ
: I like high-lows
: 1つのダッシュ
: I like high-lows

**** 否定文字クラス [^]
リストに含まれて *いない* 任意の文字にマッチする．
#+BEGIN_SRC sh
echo 1
echo 'abcdef' | egrep '[^a]bcdef'
echo 2
echo 'abcdef' | egrep '[^xyz]bcdef'
#+END_SRC

#+RESULTS:
: 1
: 2
: abcdef

***** 振る舞い
文字クラス内の先頭に置かれた時に，メタ文字として機能する．
普段はご存知の通り，行頭アンカー．

#+BEGIN_SRC sh
echo 否定メタ文字として機能．エスケープも必要．
echo ab^cdef | egrep [^a]b\\^cdef
echo ただのキャレットとして機能
echo ab^cdef | egrep [z^]

#+END_SRC

#+RESULTS:
: 否定メタ文字として機能．エスケープも必要．
: ただのキャレットとして機能
: ab^cdef

***** qの次に「u以外」の文字が続く，珍しい英単語を検索する
egrep 'q[^u]' word.list
とすると，珍しい単語がマッチしたが，
わりと有名なQantas と Iraq はマッチしなかった．なぜか？
- Qantas: Qが大文字だから．マッチさせるには，[Qq][^u] とする
- Iraq: qの次が改行文字（ワードリストの場合）だが，egrep は改行文字を取り除いてから検索を開始するから．

Iraqをマッチさせる
#+BEGIN_SRC sh
echo 'apple
Iraq
orange' | egrep 'q[^u]?'
#+END_SRC

#+RESULTS:
: Iraq

**** 任意の文字にマッチするドット
**** 選択
**** 大文字と小文字の違いを無視する
**** 単語の境界
**** これまでのまとめ
*** 任意の文字にマッチするドット
*** 選択
*** 大文字と小文字の違いを無視する
*** 単語の境界
*** これまでのまとめ
*** 量指定子: オプション
*** その他の量指定子: 繰り返し
*** 括弧と後方参照
*** 大脱走--偉大なるエスケープ
** 基礎を発展させる
** 章の終わりに一言
* 初心者向けのサンプル/ PearlとJavaにおける方言
PerlとJavaの方言における豊富なメタ文字を紹介する．
* 正規表現の機能と方言/ オプション装備とインターフェース
正規表現を使うべきときに考えるべきポイント
- メタ文字の意味: 車でいえばオプション装備．枝葉の部分
- インターフェース: 車でいえば給油口の位置のように些細なことから，ミッションの種類のように重要なものまでを含む
- 正規表現エンジンの動作原理: 車のエンジンに当たるくらい重要
本章では，メタ文字の意味とインターフェースについて紹介する．
* 正規表現処理のメカニズム/ エンジン
正規表現をどのように組み立てるかによって，パフォーマンスが大きく変わったりする．
* 正規表現の実践的なテクニック
全ての正規表現は，マッチさせること，マッチさせないことのバランスが難しい．
この章では，HTMLに対する熟練者の思考の過程をたどる．
* 効率のよい正規表現の作り方
正しさと効率の間でのチューニングを学ぶ．
コードを書く速度を最大化できるだけでなく，自信も手に入れられる．
* Pearl
* Java
* .NET
* PHP
