#+TITLE: 詳説正規表現
#+PROPERTY: header-arguments :results scalar
* はじめに
最初の6章，「効率のよい正規表現の作り方」までを，読み物として読むこと．
* 正規表現入門/ egrepを例に
校正現場で現実に処理しないといけない注文，一見かなり困難．
- たくさんのファイル
- プレビュー形式
- case-insensitive
- 空白の個数を無視
- タグを無視
正規表現ならなんとかできる．
強力なテキスト処理能力で有名な言語も，単に正規表現をサポートしているだけだったりする．
ほんとうに強力なのは正規表現の方．
手始めに，egrepの正規表現を見ていく．
** 現実の問題を解く
大きい問題も小さい問題にも
*** 大文字小文字の区別に代表される様々な表記ゆれ，正規表現が解決する．
36000行のテキストのチェック場面でも，コマンドのタイプに15秒，実行に2分．素晴らしい．
*** inboxにあるメールのリストを誰かに送りたいとき
FromやSubjectを検索する
さらに sed との連携
1時間かけてこれをやるのと，どっちがいいか？

*** 正規表現を学べば
便利すぎて手放せなくなるだろう．
本書はその指針．モチベーションも得てもらえれば何より．
** 言語としての正規表現
呪文でもなんでもない．
ひとたび学べば，ちんぷんかんぷんを脱却できる．
*** ファイル名との類似点
ワイルドカードはファイル検索によく使う（file glob）．
一方，一般テキスト（散文，韻文，プログラム，報告書，HTML，コード表，ワードリストetc.）はもっと規模が大きく，問題も大きい．
一般的なパターン言語が発達してきた．
このパターン言語とパターン自体を正規表現と呼ぶ．
*** 言語との類似点
メタ文字，それ以外はリテラル．
正規表現はもはや言語．
ワイルドカードとの違いは，豊かな表現力．
見たこともない人にはとっつきにくいかもしれないが，すぐにわかるようになる．
*** 本書のゴール
要求に応じた正規表現を書けるようになること．
正規表現をどのように *考えたらいいか* を身につけること．

** 正規表現という思考の枠組み
https://learning.oreilly.com/library/view/mastering-regular-expressions/0596528124/ch01.html

*** ある程度正規表現のことを知っているなら
知っていても，目を通すこと．
新しい発見があるはず．
*** ファイルからのテキストの検索: egrep
クォートはシェルによって異なる．
catを検索しても，vacationもヒットする．
egrepはファイルの中のバイトと行を認識することはできるが，単語，文，段落などの高水準な概念を理解することはできない．
** egrepのメタ文字
*** 行頭と行末
本質的な意味を理解せよ．
^cat を，「行頭がcatになっている行にマッチ」と理解してはいけない．
正しくは， *行頭がある場合，その次がc，その次がa，その次がt担っている行にマッチする* と理解せよ．
そうすれば，^$ や ^ の挙動も理解できるだろう．
- ^$: 行頭があり，その次に行末が続けばマッチする -> スペースもない，空行がマッチ
- ^: 行頭だけがあればマッチする． -> 全ての行が行頭を持つので，全ての行がマッチする．
*** 文字クラス
*** 任意の文字にマッチするドット
*** 選択
*** 大文字と小文字の違いを無視する
*** 単語の境界
*** これまでのまとめ
*** 量指定子: オプション
*** その他の量指定子: 繰り返し
*** 括弧と後方参照
*** 大脱走--偉大なるエスケープ
** 基礎を発展させる
** 章の終わりに一言
* 初心者向けのサンプル/ PearlとJavaにおける方言
PerlとJavaの方言における豊富なメタ文字を紹介する．
* 正規表現の機能と方言/ オプション装備とインターフェース
正規表現を使うべきときに考えるべきポイント
- メタ文字の意味: 車でいえばオプション装備．枝葉の部分
- インターフェース: 車でいえば給油口の位置のように些細なことから，ミッションの種類のように重要なものまでを含む
- 正規表現エンジンの動作原理: 車のエンジンに当たるくらい重要
本章では，メタ文字の意味とインターフェースについて紹介する．
* 正規表現処理のメカニズム/ エンジン
正規表現をどのように組み立てるかによって，パフォーマンスが大きく変わったりする．
* 正規表現の実践的なテクニック
全ての正規表現は，マッチさせること，マッチさせないことのバランスが難しい．
この章では，HTMLに対する熟練者の思考の過程をたどる．
* 効率のよい正規表現の作り方
正しさと効率の間でのチューニングを学ぶ．
コードを書く速度を最大化できるだけでなく，自信も手に入れられる．
* Pearl
* Java
* .NET
* PHP
