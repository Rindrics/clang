#+TITLE: 継続的インテグレーション入門
#+STARTUP: overview
* CIの背景--原則とプラクティス
** 始めよう
*** 変更を起点としてビルドを実行する
ビルドとは？
- コンパイル
- テスト
- インスペクション
- デプロイ
CIシステムが図1-1に図解されている．
このシステムの構成要因について，詳しくみていく．
**** 開発者
プライベートビルド（antを使う）に成功してから，変更をコミットする．
**** バージョン管理リポジトリ
OK．
ソフトウェアの構成管理について学ぶには，
「パターンによるソフトウェア構成管理」（スティーブ・P・バーチャックほか）を参照するといい．
**** CIサーバー
変更があるごとにインテグレーションビルドを行う．
**** ビルドスクリプト
CIは人手を介さないのが基本．
**** フィードバック手段
メールなど．
第9章で述べる．
**** インテグレーションビルドマシン
ソフトウェアのインテグレーションのみを行う，独立した1台のマシン．
*** CIの機能
CIが必要とする機能は4つ．
- バージョン管理リポジトリへの接続
- ビルドスクリプト
- フィードバック手段
- ソースコードの変更を統合するプロセス

そして，以下はソースコードの変更を統合するプロセス？
**** ソースコードのコンパイル
**** データベースインテグレーション
**** テスト
**** インスペクション
**** デプロイ
**** ドキュメント生成とフィードバック
*** まとめ
ここまでがCIの概略．
*** 質問
読者のシステムに必要なものを洗い出すための7つの質問
** 継続的インテグレーションの紹介
憶測は失敗の母である--ウェザンの決定保留の法則
思い込みの危険性！
** CIによるリスクの軽減
高い品質とは，だれも見ていないときでも，きちんとやることだ．--ヘンリー・フォード
CI導入によって避けられるようになるリスクを紹介する
- 欠陥検出の遅れ
- プロジェクトの「見える化」不足
- 低品質なソフトウェア
- デプロイできないソフトウェア
スケジュールが迫ると，いろんなチェックがおろそかになる．
リスクに「気づく」ことはできても，そのリスクを軽減できているとは限らない．
*** リスク: デプロイできないソフトウェア
ビルド成功が納期ギリギリになる地獄

なぜこうなるか？
ビルドを自動化していなかったため，ビルドのオーバーヘッドが毎回大きく，だんだん面倒になっていった．
毎回初期化される専用環境上でビルドしていなかったため，ソフトウェアが正しくビルドされていると確信できなかった．

**** シナリオ: 自分のマシンでは動いている
CruiseControlなどのCIサーバを使い，バージョン管理リポジトリの変更を監視すべき．
変更があったら，ただちにビルドスクリプトが実行される．
**** シナリオ: データベースとの同期
データベースと開発チームが別れていることがある．
2つのチームが統合されていないのに，チーム間の共同作業が成功するはずがない
- データベースに関する成果物は，全てバージョン管理リポジトリで管理する
- ビルドスクリプトでデータベースやデータを再構築する
- データベースのテストを行う
**** シナリオ: クリックし忘れ
Antのビルドスクリプトを使ってデプロイ作業を自動化すべき
CruiseControlが変更を検知したとき，いつもこのスクリプトが実行される．
*** リスク: 欠陥検出の遅れ
**** シナリオ: 回帰テスト
ビルドスクリプトからテストを実行する
**** シナリオ: テスト網羅率
コード網羅率計測ツールを使う．
*** リスク: プロジェクトの「見える化」不足
**** シナリオ: メモを受け取った？
メールを受信できないときにはショートメッセージなど．
**** シナリオ: ソフトウェアを「見える化」できない
CIシステムにDoxygenという自動コード文書化ツールを導入すべき．
Doxygen: ソースコードを文書化し，UML図も生成する．
*** リスク: 低品質なソフトウェア
**** シナリオ: コーディング標準の遵守
解決事例
- コーディング標準の全てを含む1ページ文の注釈をつけたクラスを作った
- 自動化されたインスペクションツールを使い，コーディング標準に準拠していないコードの行を全てHTML形式で報告するようにした
**** シナリオ: アーキテクチャの遵守
UMLモデリングツールが吐き出したコードでコーディングを始めても，徐々にずれていってしまう．
アーキテクチャも変更されたりする．

自動化されたインスペクションツールを使う．
JDepend や NDependなどの依存関係解析ツールを使っても良い．
**** シナリオ: 複製されたコード
コピペされたコードは，バグを撒き散らす可能性もある．
以下のようなツールを使うと，インスペクションを自動化できる
自動化によって検出される度に，リファクタリングするべき．
- PMDのCPD
- Simianの静的解析ツール
もちろん，CIシステムに組み込んで継続的にコード重複の検査をせよ
*** まとめ
*** 質問
- プロジェクトで欠陥が最も多く検出されるのは，ライフサイクルの前半と後半，どちらか？
- プロジェクトではどのように品質を測定しているか？また，品質を測定できているか？
- プロジェクトでは，どのプロセスを手動でやっている？自動化できるプロセスはある？
- データベースやデータを再作成するためのスクリプト全てをバージョン管理リポジトリに格納しているか？
- ソフトウェアに変更があった時には，いつでも回帰テストをできるか？
- 対応するテストが存在しないソースコードを見つけることができるか？網羅率計測ツールを使っているか？
- ソフトウェア中に超速コードが何%存在するか？
- 最新のソースコードが，ソフトウェアのアーキテクチャに従っていることをどのように検証しているか？
- ビルドやデプロイが完了しており，いつでもテスト可能であることを，どうやって周知しているか？プロジェクトの情報伝達のうち，自動化できるものはあるか？
- ソフトウェアの現状を表すビジュアルな図表はあるか？
** 変更を起点としたビルドの実行
すべてを1度バラバラに分解する．そして1から組み立て直すのだ．--ヘンリー・ミラー
日次ビルドをしないチームなど，T型フォードを手作業で組み立てている水準と同じといっていい．
* CIシステムの構築
** 継続的データベースインテグレーション
略してCDBI．
データベースインテグレーションもCIの重要なパーツの一つ．
データベースコードも本質的にはシステムを構成する他のコードと変わらない．
** 継続的テスト
習うより慣れろ．
線形システムの信頼性は，各構成要素の信頼性の積である．和ではない．
信頼性90%の構成要素3つからなるシステムの信頼説は73%．
** 継続的インスペクション
感情を持った人間がコードレビューをすることには，デメリットもある．
感情と客観性の問題．

- 機械によるレビュー
- 人によるレビュー
これらは，どちらか1つに絞るべきものではない．むしろ，相補的に使うべき．
まず機械がやって，次に人間．
** 継続的デプロイ
何かをうまくこなしたいのなら，自分でやることだ．
「リリースの悪夢」
徹夜したのに，納品できない．
利用可能な状態のソフトウェアをいつでも，どこで，そして最小限の労力でリリースし続けること．
** 継続的フィードバック
人生において最も成功するのは，最良の情報を持つ者である．--ベンジャミン・ディズレーリ
失敗したときにすぐに通知が来る．
適切な情報を，適切な人に適切なタイミングで提供することが重要．
具体的にどうすればいいかを解説する．
* 付録
