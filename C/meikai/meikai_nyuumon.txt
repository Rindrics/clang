#+TITLE: 新・明解C言語 入門編 の勉強ノート
#+STARTUP: overview
#+TODO: 不安がある 理解不能 | OK 解答を見て理解できた
* 解説
http://meikaicansewer.blogspot.com
* まずは慣れよう
* 演算と型
* プログラムの流れの分岐
** if文
*** if文・その1
*** 奇数の判定
* プログラムの流れの繰り返し
* 配列
** 配列
*** 配列による成績処理
**** List5-9
*** オブジェクト形式マクロ
#define a b
とすると，「この指令以降のaは全てbに置換せよ」という意味．
定義が複数個所に分散しなくて済むので，定義を変更する必要が生じても一括して変えられる．
**** List5-10
#+BEGIN_SRC C
/*
        学生の点数を読み込んで合計点と平均点を表示（人数をマクロで定義）
*/

#include <stdio.h>

#define NUMBER	5		/* 学生の人数 */

int main(void)
{
        int i;
        int tensu[NUMBER];	/* NUMBER人の学生の点数 */
        int sum = 0;		/* 合計点 */

        printf("%d人の点数を入力してください。\n", NUMBER);
        for (i = 0; i < NUMBER; i++) {
                printf("%2d番：", i + 1);
                scanf("%d", &tensu[i]);
                sum += tensu[i];
        }

        printf("合計点：%5d\n", sum);
        printf("平均点：%5.1f\n", (double)sum / NUMBER);

        return 0;
}

#+END_SRC
** 配列のコピー
配列に対して単純代入演算子（=）で代入することはできない．
for文などで，1要素ずつ代入する必要がある．
* 関数
** 記憶域期間
*** 自動記憶域期間
*** 静的記憶域期間
*** List6-18
#+BEGIN_SRC C :results scalar
/*
	自動記憶域期間と静的記憶域期間
*/

#include <stdio.h>

int fx = 0;				/* 静的記憶域期間＋ファイル有効範囲．本プログラムを通じて生き続ける． */

void func(void)
{
	static int sx = 0;	/* 静的記憶域期間＋ブロック有効範囲．関数の外でも生き続ける． */
	int        ax = 0;	/* 自動記憶域期間＋ブロック有効範囲．関数の外では0で初期化される． */

	printf("%3d%3d%3d\n", ax++, sx++, fx++);
}

int main(void)
{
	int i;

	puts(" ax sx fx");
	puts("----------");
	for (i = 0; i < 10; i++)
		func();
	puts("----------");

	return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
ax sx fx
----------
  0  0  0
  0  1  1
  0  2  2
  0  3  3
  0  4  4
  0  5  5
  0  6  6
  0  7  7
  0  8  8
  0  9  9
----------
#+end_example
** 関数の設計
*** 配列の受渡し
**** List6-11
#+BEGIN_SRC C
/*
	英語の点数と数学の点数の最高点を求める
*/

#include <stdio.h>

#define NUMBER	5		/* 学生の人数 */

/*--- 要素数nの配列vの最大値を返す ---*/
int max_of(int v[], int n)
{
	int i;
	int max = v[0];

	for (i = 1; i < n; i++)
		if (v[i] > max)
			max = v[i];
	return max;
}

int main(void)
{
	int i;
	int eng[NUMBER];		/* 英語の点数 */
	int mat[NUMBER];		/* 数学の点数 */
	int max_e, max_m;		/* 最高点 */

	printf("%d人の点数を入力してください。\n", NUMBER);
	for (i = 0; i < NUMBER; i++) {
		printf("[%d] 英語：", i + 1);  scanf("%d", &eng[i]);
		printf( "    数学：");         scanf("%d", &mat[i]);
	}
	max_e = max_of(eng, NUMBER);	/* 英語の最高点 */
	max_m = max_of(mat, NUMBER);	/* 数学の最高点 */

	printf("英語の最高点＝%d\n", max_e);
	printf("数学の最高点＝%d\n", max_m);

	return 0;
}

#+END_SRC
* 基本形
** 算術型と基本型
*** 算術型
**** 汎整数型
***** 文字型（charで表せるので基本型）
***** 整数型（intで表せるので基本型）
***** 列挙型
**** 不動小数点型（doubleで表せるので基本型）
* いろいろなプログラムを作ってみよう
* 文字列の基本
** 文字例の配列
配列の作り方．
名前[行][列]として宣言する．
下の例では，行数は自動的に3になっている．
列数は，最も文字数の多い"Turbo"に合わせ，6となっている（5 + ヌル文字1 = 6）．
*** 文字列の配列
**** List9-6
#+BEGIN_SRC C
  #include <stdio.h>
  int main(void)
  {
    int i;
    char cs[][6] = {"Turbo", "NA", "DOHC"};

    for (i = 0; i < 3; i++) {
      printf("cs[%d] = \"%s\"\n", i, cs[i]);
    }
    return 0;
  }
#+END_SRC

*** 文字列の配列への文字列の読み込み
**** List9-7
今度は，scanfでキーボードから読み込んで配列を作る．
#+BEGIN_SRC C
  /*
          文字列の配列を読み込んで表示
  ,*/

  #include <stdio.h>

  int main(void)
  {
          int  i;
          char s[3][128];		/* 3は読み込む要素数．128は，何文字入力されるかわからないので，多めに用意している */
                                  /* 実際にはヌル文字が最後にあるので，127文字しか読み込めない */
          for (i = 0; i < 3; i++) {
                  printf("s[%d] : ", i);
                  scanf("%s", s[i]); /* scanfだけど，配列の要素なので&演算子をつけてはだめ． */
          }

          for (i = 0; i < 3; i++)
                  printf("s[%d] = \"%s\"\n", i, s[i]);

          return 0;
  }
#+END_SRC

#+RESULTS:
*** 演習9-3
演習9-7を改変
- 文字列の個数を3ではなく大きな数にし，それを[[*%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%BD%A2%E5%BC%8F%E3%83%9E%E3%82%AF%E3%83%AD][オブジェクト形式マクロ]]で定義
- 最初のfor文で，"$$$$"を読みこんだら，その時点で読み込みを中断，終了する
- 2番目のfor文では，"$$$$"より前に入力された前文字例を表示する．
#+BEGIN_SRC C
  #include <stdio.h>

  #define NUMBER 128            /* ここにはセミコロンをつけてはいけない！！！！ */

  int main(void)
  {
    int  i, j;
    char s[NUMBER][128];

    for (i = 0; i < NUMBER; i++) {
      printf("s[%d] : ", i);
      scanf("%s", s[i]); /* scanfだけど，配列の要素なので&演算子をつけてはだめ． */

      for (j = 0; s[i][j] != '\0'; j++) {
        if (s[i][j] != '$') break;
      }
      if (j == 5) break;
    }

    for (j = 0; j < i; j++) { /* 1つめのループで止まったiまで，jのループを回すのがポイント */
      printf("s[%d] = \"%s\"\n", j, s[j]);
    }

    return 0;
  }
#+END_SRC

#+RESULTS:
** 文字例の操作
*** 文字列の長さ
**** List9-8
#+BEGIN_SRC C
  /*
          文字列の長さを調べる
  */

  #include <stdio.h>
  /*--- 文字列strの長さを返す ---*/
  /* まず文字列の長さを取得する関数str_lengthを定義 */
  int str_length(const char s[])	/* const は，定数．値を受け取るだけで，変更はしないことを宣言． */
  {
          int len = 0;

          while (s[len])		/* s[len] が非ゼロである間繰り返す．ヌル文字はゼロなので，ループは文字列末尾で止まる．*/
                  len++;
          return len;
  }

  int main(void)
  {
          char str[128];	/* ナル文字を含めて128文字まで格納できる */

          printf("文字列を入力してください：");
          scanf("%s", str);

          printf("文字列\"%s\"の長さは%dです。\n", str, str_length(str));

          return 0;
  }
#+END_SRC

#+RESULTS:
**** 演習9-4
文字列sを空文字列にする関数を作成せよ．
#+BEGIN_SRC C
  /*
          文字列を空文字列にする
  ,*/

  #include <stdio.h>
  void null_string(char s[])	/* void型の関数なので，returnはできない． */
                                  /* 上手くいっているかを確認する手立てがないので気持ち悪い． */
  {
          int len = 0;

          while (s[len]) {
            len++;
            s[len] = '\0';
          }
  }

  int main(void)
  {
          char str[128];	/* ナル文字を含めて128文字まで格納できる */

          printf("文字列を入力してください：");
          scanf("%s", str);

          printf("文字列\"%s\"を空文字列にしました。\n", str);

          return 0;
  }
#+END_SRC
**** 演習9-5
文字列の中に文字cが含まれていれば，その添字を返し，
含まれていなければ-1を返す関数を作成せよ
#+BEGIN_SRC C
  #include <stdio.h>

  int str_char(const char s[], int c) /* cをintとして扱うことに注意 */
  {
    for (int i = 0; s[i] != '\0'; i++) {
      if (s[i] == c) return i;	/* 整数として扱うのでstr_compしなくていい */
    }
    return -1;
  }

  int main(void)
  {
    char str[128];
    int index;

    printf("文字列を入力してください: ");  scanf("%s", str);

    index = str_char(str, 'c');	/* 文字を整数として扱うときは単引用付！ */

    if (index == -1) {
      printf("文字cは含まれていません\n");
    } else {
      printf("文字cは配列の%d番目にあります", index);
    }

    return 0;
  }
#+END_SRC
**** 演習9-6
文字列sの中に，文字cが含まれている個数（含まれていなければ0とする）を返す関数をら作成せよ
#+BEGIN_SRC C
  #include<stdio.h>

  int str_chnum(const char s[], int c) /* const とcharの間にはコンマを入れてはいけない！ */
  {
    int cnum = 0;
    for (int i = 0; s[i] != '\0'; i++) {
      if (s[i] == c) cnum = cnum + 1;
    }
    return cnum;
  }

  int main(void)
  {
    char str[128];		/*要素数の指定を忘れないこと!*/
    int cnum;

    printf("文字列を入力してください: ");
    scanf("%s", str);

    cnum = str_chnum(str, 'c');
    printf("文字列\"%s\"の中に含まれる\"c\"の数は%d個です．\n", str, cnum);

    return 0;
  }
#+END_SRC
*** 文字列の表示
**** List9-9
#+BEGIN_SRC C
  /*
          文字列を走査して表示する
  ,*/

  #include <stdio.h>

  /*--- 文字列sを表示（改行はしない）---*/
  void put_string(const char s[])
  {
    int i = 0;
    while (s[i])
            putchar(s[i++]); /* こんな短縮表記もできるのか...あまりよくないと思うけど．*/
                             /*そしてputcharは値を返すわけではないので void型でもいいんだな．*/
  }

  int main(void)
  {
    char str[128];

    printf("文字列を入力してください：");
    scanf("%s", str);

    printf("あなたは");
    put_string(str);
    printf("と入力しました。\n");

    return 0;
  }
#+END_SRC
**** OK 演習9-7
文字列sをn回だけ連続して表示する関数を作成せよ
#+BEGIN_SRC C
  #include <stdio.h>

  void put_stringn(const char s[], int n)
  {
    int j;
    for (j = 0; j < n; j++) {
      int i = 0;
      while (s[i] != '\0') {
        putchar(s[i]);
        i = i + 1;
      }
    }
  }
  int main(void)
  {
    char str[128];
    int n;

    printf("文字列を入力してください:");
    scanf("%s", str);
    printf("\n繰り返したい数を入力してください:");
    scanf("%d", &n);

    printf("文字列\"%s\"を%d回繰り返すと", str, n);
    put_stringn(str, n);
    printf("となります．\n");

    return 0;
  }
#+END_SRC

#+END_SRC
**** OK 演習9-8
文字列を後ろから逆に表示する関数を作成せよ
#+BEGIN_SRC C
  #include <stdio.h>

  void put_stringn(const char s[])
  {
    int i = 0;
    int j;
    while(s[i] != '\0') {
      i++;
    }
    for (j = i -1; j >= 0; j--) {
      putchar(s[j]);
    }

  }

  int main(void)
  {
    char str[128];

    printf("文字列を入力してください: ");
    scanf("%s", str);

    printf("あなたが入力した文字列を逆順に表示すると");
    put_stringn(str);
    printf("です．\n");

    return 0;
  }
#+END_SRC
*** 数字文字の出現回数
[2018-11-30 Fri]
**** OK List9-10
#+BEGIN_SRC C

  /*
      文字列内の数字文字をカウントする
  ,*/

  #include <stdio.h>

  /*--- 文字列s内に含まれる数字文字の出現回数を配列cntに格納 ---*/
  void str_dcount(const char s[], int cnt[])
  {
      int i = 0;
      while (s[i]) {
          if (s[i] >= '0' && s[i] <= '9')
              cnt[s[i] - '0']++;
          i++;
      }
  }

  int main(void)
  {
      int  i;
      int  dcnt[10] = {0};	/* {}で囲った数字は初期化子．本文p.114 */
      char str[128];			/* 文字列 */

      printf("文字列を入力してください：");
      scanf("%s", str);

      str_dcount(str, dcnt);

      puts("数字文字の出現回数");
      for (i = 0; i < 10; i++)
          printf("'%d'：%d\n", i, dcnt[i]);

      return 0;
  }

#+END_SRC
**** OK 演習9-9
文字列sの文字の並びを反転する関数を作成せよ．
演習9-8では逆順で「表示するだけ」だったが，今度は書き換える．
入力したものを書き換えるので危険性が高く，プログラムとしてはあまりよくない．
#+BEGIN_SRC C
  #include<stdio.h>

  void rev_string(char s[])
  {
      int i, length = 0;
      char tmp[128];
      for (i = 0; s[i] != '\0'; i++) {
          tmp[i] = s[i];
          length++;
      }

      for (i = 0; i < length; i++) {
          s[i] = tmp[length - i - 1];
      }
  }

  int main (void)
  {
      char str[128];
      int i = 0;
      printf("文字列を入力してください:");
      scanf("%s", str);
      /* str = rev_string(str)  こうではなく*/
      rev_string(str);             /* こう書く．*/

      printf("あなたが入力した文字列を反転しました．\n");
      printf("その結果は");
      /* while (str[i]) { */
      /*     printf("%s", str[i]); */
      /*     i++; */
      /* } わざわざループを使う必要はない．*/
      printf("%s", str);          /* strを書き換えたのだから，そのまま表示すればいい． */
      printf("です．\n");

      return 0;
  }
#+END_SRC
*** 大文字・小文字の変換
**** OK List9-11
[2018-12-02 Sun]
#+BEGIN_SRC C
  /*
      文字列内の英字を大文字／小文字に変換
  ,*/

  #include <ctype.h>              /* 初めて出てきたライブラリ */
  #include <stdio.h>

  /*--- 文字列内の英字を大文字に変換 ---*/
  void str_toupper(char s[])
  {
      int i = 0;
      while (s[i]) {
          s[i] = toupper(s[i]);
          i++;
      }
  }

  /*--- 文字列内の英字を小文字に変換 ---*/
  void str_tolower(char s[])
  {
      int i = 0;
      while (s[i]) {
          s[i] = tolower(s[i]);
          i++;
      }
  }

  int main(void)
  {
      char str[128];

      printf("文字列を入力してください：");
      scanf("%s", str);

      str_toupper(str);
      printf("大文字：%s\n", str);

      str_tolower(str);
      printf("小文字：%s\n", str);

      return 0;
  }
#+END_SRC
入力された文字列を変更してしまっている点では，恐ろしいプログラムといえる．
しかも2回も．
**** 解答を見て理解できた 演習9-10
文字列s内の全ての数字文字を削除する関数を作成せよ．
例えば，"AB1C9"を受け取ったら，"ABC"に変換する．
ネットの解答例を見てしまった．
結構難しい．
#+BEGIN_SRC C
  #include<ctype.h>
  #include<stdio.h>

  void del_digit(char s[])
  {
      int i, j;

      for(i = 0; s[i] != '\0'; i++){
          if('0' <= s[i] && s[i] <= '9'){
              for(j = i; s[j] != '\0'; j++){
                  s[j] = s[j + 1];
              }
              i--;
          }
      }
  }

  int main(void)
  {
      char str[128];
      printf("文字列を入力してください:");
      scanf("%s", str);
      printf("数字を取り除くと");
      del_digit(str);
      printf("%s", str);
      printf("となります\n");

      return 0;
  }
#+END_SRC
*** 文字列の配列の受け渡し
**** OK List9-12
このプログラムは文字「列」を3つ，表示している．
iだけを使った1次元ループ．
#+BEGIN_SRC C
  /*
      文字列の配列を表示（関数版）
  ,*/

  #include <stdio.h>

  /*--- 文字列の配列を表示 ---*/
  void put_strary(const char s[][6], int n) /* ここの[6]が，このプログラムの汎用性を損なっている */
  {
      int i;
      for (i = 0; i < n; i++)
          printf("s[%d] = \"%s\"\n", i, s[i]); /* ここは文字列をまるごと，1行ずつ表示している */
  }

  int main(void)
  {
      char cs[][6] = {"Turbo", "NA", "DOHC"};

      put_strary(cs, 3);

      return 0;
  }

#+END_SRC
**** OK List9-13
こちらのプログラムは，「文字」を1つずつ表示している．
iとjの2次元ループ．
#+BEGIN_SRC C
  /*
      文字列の配列を表示（関数版：１文字ずつ走査）
  ,*/

  #include <stdio.h>

  /*--- 文字列の配列を表示（１文字ずつ表示）---*/
  void put_strary2(const char s[][6], int n)
  {
      int i;
      for (i = 0; i < n; i++) {
          int j = 0;
          printf("s[%d] = \"", i);

          while (s[i][j])
              putchar(s[i][j++]); /* 文字「列」ではなく，文字を1つずつ表示している */

          puts("\"");
      }
  }

  int main(void)
  {
      char cs[][6] = {"Turbo", "NA", "DOHC"};

      put_strary2(cs, 3);

      return 0;
  }

#+END_SRC
**** 解答を見て理解できた 演習9-11
List9-12を以下のように書き換えたプログラムを作成せよ．
文字列の個数を3ではなく大きな数にし，その値をオブジェクト形式マクロとして定義する．
文字列の文字数を6ではなく128とする．その値もオブジェクト形式マクロとして定義する．
文字列の配列を読み込む関数を作成する．[[*%E6%BC%94%E7%BF%929-3][演習9-3]]と同様に，ドル記号を5つ読み込んだ時点で読み込みを中断・終了する．
ドル記号5つより前に入力された全文字列を表示する．

#+BEGIN_SRC C
  #include <stdio.h>

  #define DIM 100
  #define NUMCHAR 128

  int main(void)
  {
      char str[DIM][NUMCHAR];
      int i, j, cnt;
      printf("文字列を入力してください\n");
      for (i = 0; i < DIM; i++) {
          cnt = 0;
          printf("%d個目:", i+1);
          scanf("%s", str[i]);
          puts("\n");
          for (j = 0; j < NUMCHAR; j++) {
              if (str[i][j] != '$') break;
          }
          if (j == 5) break;
      }
      for (j = 0; j < i; j++) {
          printf("%s\n", str[j]);
      }
      return 0;
  }
#+END_SRC
**** 解答を見て理解できた 演習9-12
受け取った文字列の配列に格納されているn個の文字列の並びを反転する関数を作成せよ．
たとえば，sに{"SEC", "ABC"}を受け取ったら，その配列を{"CES", "CBA"}に更新せよ．
***** 林の答案
#+BEGIN_SRC C
  #include <stdio.h>

  void rev_string(char s[][128], int n)
  {
      char tmp[n][128];
      int i, j, length;
      for (i = 0; i < n; i++) {
          length = 0;
          for (j = 0; s[i][j] != '\0'; j++) {
              tmp[i][j] = s[i][j];
              length++;
          }
          for (j = 0; j < length; j++) {
            s[i][length - j - 1] = tmp[i][j];
          }
      }
  }

  int main(void) {
      int i, n;
      char str[n][128];
      printf("文字列をいくつ入力しますか？");
      scanf("%d", &n);
      for (i = 0; i < n; i++) {
          printf("%d個目の文字列を入力してください:", i+1);
          scanf("%s", str[n]);
          puts("\n");
      }

      rev_string(str, n);

      printf("その文字列をそれぞれ反転すると");
      for (i = 0; i < n; i++) printf("%s\n", str[i]);
      printf("となります．\n");

      return 0;
  }
#+END_SRC
***** Web模範解答
#+BEGIN_SRC C
#include <stdio.h>
#define row 128

void rev_string(char s[][128], int n){
    int i, j, length;
    char tmp[128]; /*そうか，tmpは1次元でいいことに気づかなかった*/

    for(j = 0; j < n; j++){

        length = 0;
        for(i = 0; s[j][i] != '\0'; i++){
            tmp[i] = s[j][i];
            length++;
        }

        for(i = 0; i < length; i++){
            s[j][i] = tmp[length - 1 - i];      
        }

        printf("s[%d] = \"%s\"\n", j, s[j]);　/*printまでこの関数でやってしまう*/
    }
}

int main(){

    int i, j;
    char cs[row][128];

    for(i = 0; i < row; i++){
        printf("文字列を入力してください：");    scanf("%s", cs[i]);

        for(j = 0; cs[i][j] != '\0'; j++){
            if(cs[i][j] != '$') break;
        }
        if(j == 5) break;
    }

    rev_string(cs, i); /*値の更新，表示をすべてここで*/

    return 0;
}
#+END_SRC
***** 改訂版の答案
#+BEGIN_SRC C
  #include <stdio.h>

  void rev_string(char s[][128], int n)
  {
      char tmp[128];
      int i, j, length;
      for (i = 0; i < n; i++) {
          length = 0;
          for (j = 0; s[i][j] != '\0'; j++) {
              tmp[j] = s[i][j];
              length++;
          }
          for (j = 0; j < length; j++) {
            s[i][j] = tmp[length - j - 1];
          }
          printf("%d個目の文字列: %s\n", i+1, s[i]);
      }
  }

  int main(void) {
      int i, n;
      char str[n][128];
      printf("文字列をいくつ入力しますか？");
      scanf("%d", &n);
      for (i = 0; i < n; i++) {
          printf("%d個目の文字列を入力してください:", i+1);
          scanf("%s", str[i]);
          puts("\n");
      }

      printf("その文字列をそれぞれ反転すると\n");
      rev_string(str, n);
      printf("となります．\n");

      return 0;
  }
#+END_SRC
** まとめ
- <<<ナル文字>>>: 値が0の文字である．8進拡張表記で表記すると'\0'で，整数定数で表記すると0である．
- 文字列リテラルの末尾にはがナル文字が付加されるので，"ABC"はメモリ上に4バイトを占有し，""でさえも1バイトを消費する．
- 文字列リテラルのバイト数はsizeof()で求める．
- 文字列リテラルには静的記憶域期間が与えられるため，プログラムの開始から終了まで，記憶域を占有する．
- 同じ綴りの文字列リテラルが複数あったときの挙動，つまり1個とみなすのか，別個とみなすかは，処理系によって異なる．
- 文字列の格納先として最適なのはcharの配列である．文字列の末尾は，最初に出現するナル文字．
- 文字列を格納する文字配列の初期化は，char str[] = {'A', 'B', 'C', '\0'};とするか，char str[] = "ABC";とするかである．
- 文字が1個もない，ナル文字だけの文字列を空文字列という．
- 文字列中の全文字の走査は，先頭文字から始めて，ナル文字に出会うまで順になぞればいい．
- 文字列を走査したとき，ナル文字の前までの文字数が，目に見える文字列の長さ．
- 文字列を画面に表示する時，printfに与える変換指定は%s．
- キーボードから文字列を読み込む時，scanfに与える変換指定も%s．格納先として与える実引数の配列には，&はつけてはいけない．
- 関数が受け取る文字列は，呼び出した側が与えた配列そのもの．文字列の末尾にちゃんとナル文字があるので，要素数を別の引数として与えなくて大丈夫．
- 文字列を集めた配列は，配列の配列，つまり2次元配列で表せる．たとえば，ナル文字を含めて最大12文字まで格納できる文字列を5個集めた配列は，char ss[5][12];と定義する．ssは2次元配列なので，要素へのアクセスはss[i][j]のように行う．
- アルファベットの大文字小文字変換はtoupper()とtolower()で行う．どっちも<ctype.h>ライブラリに入っている．これらの関数は，アルファベット以外を勝手にいじることはないので安心して使っていい．
* ポインタ
** ポインタ
*** 関数の引数
**** List10-1
和と差を計算するプログラムを作りたい場合を考える．
List6-5で学んだ，値渡しの一方通行の法則を忘れていると，下のList10-1のように間違ってしまう．
仮引数は実引数のコピーでしか無い．
さらに，関数は1つの値しか返せない．
この問題の解決に，ポインタの概念が必要．
#+NAME list1001
#+BEGIN_SRC C
/*
	二つの整数の和と差を求める（間違い）
*/

#include <stdio.h>

/*--- n1とn2の和と差をsumとdiffに格納（間違い）---*/
void sum_diff(int n1, int n2, int sum, int diff)
{ 
	sum  = n1 + n2;							/* 和 */
	diff = (n1 > n2) ? n1 - n2 : n2 - n1;	/* 差 */
}

int main(void)
{
	int na, nb;
	int wa = 0, sa = 0;

	puts("二つの整数を入力してください。");
	printf("整数Ａ：");   scanf("%d", &na);
	printf("整数Ｂ：");   scanf("%d", &nb);

	sum_diff(na, nb, wa, sa);

	printf("和は%dで差は%dです。\n", wa, sa);

	return 0;
}

#+END_SRC
*** オブジェクトとアドレス
オブジェクトはバラバラに保存されるのではなく，1つに連なったメモリ上に存在している．
メモリには，オブジェクトのいろいろな性質も保存されている．
その性質とは，
- 大きさ
- 型
- 記憶域期間（第6章, p.162）
- 識別子
など．

オブジェクトは広いメモリ上に雑居しているので，その場所を特定するために<<アドレス>>が用いられる．
*** アドレス演算子
<<アドレス演算子>>:&のこと．これまでもscanfでよく使っていた．
アドレスを画面上に表示する時には，%pを使う．このpはポインタのp．
#+BEGIN_SRC C
/*
	オブジェクトのアドレスを表示する
*/

#include <stdio.h>

int main(void)
{
	int    n;
	double x;
	int    a[3];

	printf("n   のアドレス：%p\n", &n);
	printf("x   のアドレス：%p\n", &x);
	printf("a[0]のアドレス：%p\n", &a[0]);
	printf("a[1]のアドレス：%p\n", &a[1]);
	printf("a[2]のアドレス：%p\n", &a[2]);

	return 0;
}

#+END_SRC
*** ポインタ
しかし，アドレスを画面上に表示しても，人間にはあまり有用ではない．
そこで，もっと現実的なプログラムを，ポインタを使って書く．
<<ポインタ>>とは，あるオブジェクトのアドレスを指すもの．
#+BEGIN_SRC C
  /*
      ポインタによって身長を間接的に操作する
  ,*/

  #include <stdio.h>

  int main(void)
  {
      int sato   = 178;	/* 佐藤宏史君の身長 */
      int sanaka = 175;	/* 佐中俊哉君の身長 */
      int masaki = 179;	/* 真崎宏孝君の身長 */

      int *isako, *hiroko;        /* この*を使った宣言方法が，ポインタ型の特徴 */

      isako  = &sato;			/* isako はsato　を指す（佐藤君が好き）*/
      hiroko = &masaki;		/* hirokoはmasakiを指す（真崎君が好き）*/

      printf("いさ子さんの好きな人の身長：%d\n", *isako);
      printf("ひろ子さんの好きな人の身長：%d\n", *hiroko);

      isako = &sanaka;		/* isako はsanakaを指す（気が変わった）*/

      ,*hiroko = 180;			/* hirokoの指すオブジェクトに180を代入 */
                              /* ひろ子さんの好きな人の身長を書きかえる */

      putchar('\n');
      printf("佐藤君の身長：%d\n", sato);
      printf("佐中君の身長：%d\n", sanaka);
      printf("真崎君の身長：%d\n", masaki);
      printf("いさ子さんの好きな人の身長：%d\n", *isako);
      printf("ひろ子さんの好きな人の身長：%d\n", *hiroko);

      return 0;
  }

#+END_SRC
ポインタpの値がxのアドレスである時，「pはxを指す」という．
*** 間接演算子
<<間接演算子>>: *のこと．
ポインタpがxを指すとき，*pはxのエイリアスとなる．
** ポインタと関数
*** 関数の引数としてのポインタ
**** List10-4
一時的なコピーである関数の仮引数をいくら変更しても，元の実引数には影響しないことは既に見た．
そこで，ポインタによって，実引数を間接的に変更してみる．
#+BEGIN_SRC C
  /*
      ポインタによって身長を間接的に操作する
  */

  #include <stdio.h>

  /*--- ひろ子さん（180cm未満の身長を180cmに伸ばす）---*/
  void hiroko(int *height)        /* この関数hirokoの引数は，ポインタ型となっている */
  {
      if (*height < 180)
          ,*height = 180;
  }

  int main(void)
  {
      int sato   = 178;		/* 佐藤宏史君の身長 */
      int sanaka = 175;		/* 佐中俊哉君の身長 */
      int masaki = 179;		/* 真崎宏孝君の身長 */

      hiroko(&masaki);

      printf("佐藤君の身長：%d\n", sato);
      printf("佐中君の身長：%d\n", sanaka);
      printf("真崎君の身長：%d\n", masaki);

      return 0;
  }



#+END_SRC


#+RESULTS:
| 佐藤君の身長：178 |
| 佐中君の身長：175 |
| 真崎君の身長：180 |

*** 和と差を求める関数
List10-1は，正しくはポインタを使って，下のList10-5のように書くべきだった．
**** List10-5
#+BEGIN_SRC C :var na=3, nb=5
  /*
      二つの整数の和と差を求める
  ,*/

  #include <stdio.h>

  /*--- n1とn2の和と差を*sumと*diffに格納 ---*/
  void sum_diff(int n1, int n2, int *sum, int *diff) /* ポインタを使って書く */
  { 
      ,*sum  = n1 + n2;
      ,*diff = (n1 > n2) ? n1 - n2 : n2 - n1;
  }

  int main(void)
  {
      int na, nb;
      int wa = 0, sa = 0;

      puts("二つの整数を入力してください。");
      printf("整数Ａ：\n");   scanf("%d", &na);
      printf("整数Ｂ：\n");   scanf("%d", &nb);

      sum_diff(na, nb, &wa, &sa);

      printf("和は%dで差は%dです。\n", wa, sa);

      return 0;
  }

#+END_SRC

#+RESULTS:
| 二つの整数を入力してください。     |
| 整数Ａ：                           |
| 整数Ｂ：                           |
| 和は217407540で差は217342008です。 |

*** 2つの値の交換
2つのオブジェクトへポインタをうけとれば，値の交換も可能．
中間で値を保存するtemp
**** List10-6
#+BEGIN_SRC C
/*
	二つの整数値を交換する
*/

#include <stdio.h>

/*--- pxとpyが指すオブジェクトの値を交換 ---*/
void swap(int *px, int *py)
{
	int temp = *px;
	*px = *py;
	*py = temp;
}

int main(void)
{
	int na, nb;

	puts("二つの整数を入力してください。");
	printf("整数Ａ：");   scanf("%d", &na);
	printf("整数Ｂ：");   scanf("%d", &nb);

	swap(&na, &nb);

	puts("これらの値を交換しました。");
	printf("整数Ａは%dです。\n", na);
	printf("整数Ｂは%dです。\n", nb);

	return 0;
}

#+END_SRC
**** OK 演習10-1
nの指す値が0より小さければ0に更新し，100より大きければ100に更新する（値が0〜100であれば更新しない）
関数adjust_pointを作成せよ．
#+BEGIN_SRC C
  #include <stdio.h>

  void adjust_point(int *n) {
      if (*n < 0){
          ,*n = 0;
           printf("値を%dに更新しました\n", *n);
      } else if (*n > 100) {
          ,*n = 100;
          printf("値を%dに更新しました\n", *n);
      } else {
          printf("値は%dのままです\n", *n);
      }
  }

  int main(void) {
      int n;

      printf("整数を入力してください:");
      scanf("%d", &n);

      adjust_point(&n);

      return 0;
  }
#+END_SRC

**** OK 演習10-2
西暦*y年*m月*d日の日付を，"前の日"あるいは"次の日”の日付に更新する関数を作成せよ
閏年を考慮して計算を行うこと．
#+BEGIN_SRC C
  #include <stdio.h>

  void decrement_date(int *y, int *m, int *d) {
      if (*d == 1) {
          switch (*m) {
          case 2:
          case 4:
          case 6:
          case 9:
          case 11: *d = 31; *m = *m -1; break;
          case 1: *d = 31; *m = 12; *y = *y - 1; break;
          case 3: if ((*y % 4) == 0) {
                  ,*d = 29;
              } else {
                  if (*d == 29) {
                      printf("有効な年月日を入力してください\n");
                      break;
                  } else {
                      ,*d = 28;
                  }
              }
              ,*m = *m - 1; break;
          case 5:
          case 7:
          case 8:
          case 10: *m = *m -1; *d = 29; break;
          }
      } else {
          ,*d = *d - 1;
      }
      printf("その日の1日前の日付は%d年%d月%d日です\n", *y, *m, *d);

  }
  void increment_date(int *y, int *m, int *d) {
      switch (*m) {
      case 2: if ((*y % 4) == 0) {
              if (*d == 29) {
                  ,*d = 1;
                  ,*m = *m + 1;
              } else {
                  ,*d = *d + 1;
              }
          } else {
              if (*d == 28) {
                  ,*d = 1;
                  ,*m = *m + 1;
              } else if (*d == 29) {
                  printf("有効な年月日を入力してください\n");
                  break;
              } else {
                  ,*d = *d + 1;
              }
          }
          break;
      case 4:
      case 6:
      case 9:
      case 11: if (*d == 30) {
              ,*d = 1;
              ,*m = *m + 1;
          } else {
              ,* d = *d + 1;
          }
          break;
      case 1:
      case 3:
      case 5:
      case 7:
      case 8:
      case 10: if (*d == 31) {
              ,*d = 1;
              ,*m = *m + 1;
          } else {
              ,*d = *d + 1;
          }
          break;
      case 12: if (*d == 31) {
              ,*d = 1;
              ,*y = *y + 1;
              ,*m = 1;
          } else {
              ,*d = *d + 1;
          }
          break;
      }
      printf("その日の1日後の日付は%d年%d月%d日です\n", *y, *m, *d);
  }

  int main(void) {
      int y, m, d;
      int y2, m2, d2;

      printf("年月日を入力してください\n");
      printf("年:"); scanf("%d", &y);
      printf("月:"); scanf("%d", &m);
      printf("日:"); scanf("%d", &d);

      y2 = y;
      m2 = m;
      d2 = d;

      decrement_date(&y, &m, &d);
      increment_date(&y2, &m2, &d2);
    
      return 0;
  }
#+END_SRC

*** 2値のソート
先のswap関数を応用すると，ソートプログラムが作れる．
**** List10-7
#+BEGIN_SRC C
  /*
      二つの整数を昇順に並べる
  ,*/

  #include <stdio.h>

  /*--- pxとpyが指すオブジェクトの値を交換 ---*/
  void swap(int *px, int *py)
  {
      int temp = *px;
      ,*px = *py;
      ,*py = temp;
  }

  /*--- *n1≦*n2となるように並べる ---*/
  void sort2(int *n1, int *n2)
  {
      if (*n1 > *n2)
          swap(n1, n2);           /* ここには&をつけてはいけない．型が合わない．入門編の域を超えるので説明は割愛． */
  }

  int main(void)
  {
      int na, nb;

      puts("二つの整数を入力してください。");
      printf("整数Ａ：");   scanf("%d", &na);
      printf("整数Ｂ：");   scanf("%d", &nb);

      sort2(&na, &nb);

      puts("昇順にソートしました。");
      printf("整数Ａは%dです。\n", na);
      printf("整数Ｂは%dです。\n", nb);

      return 0;
  }
#+END_SRC
**** OK 演習10-3
ポインタn1, n2, n3が指す3つのint型整数を昇順にソートする関数を作成せよ．
#+BEGIN_SRC C
  #include <stdio.h>
  void swap(int *px, int *py) {
      int temp = *px;
      ,*px = *py;
      ,*py = temp;
  }
  void sort3(int *n1, int *n2, int *n3) {
      if (*n1 > *n2) {
          swap(n1, n2);
      }
      if (*n1 > *n3) {
          swap(n1, n3);
      }

      if (*n2 > *n3) {
          swap(n2, n3);
      }
  }

  int main(void) {
      int n1, n2, n3;
      printf("整数を3つ入力してください\n");
      printf("1つ目:"); scanf("%d", &n1);
      printf("2つ目:"); scanf("%d", &n2);
      printf("3つ目:"); scanf("%d", &n3);

      sort3(&n1, &n2, &n3);

      printf("昇順にソートすると%d, %d, %dとなります\n", n1, n2, n3);

      return 0;
  }
#+END_SRC
*** scanf関数とポインタ
*** ポインタの型
ポインタは，オブジェクトと同じ型でないといけない．
**** List10-8
#+BEGIN_SRC C
/*
	二つの実数値を交換する（誤り）
*/

#include <stdio.h>

/*--- pxとpyが指すオブジェクトの値を交換 ---*/
void swap(int *px, int *py)
{
	int temp = *px;
	*px = *py;
	*py = temp;
}

int main(void)
{
	double da, db;

	puts("二つの実数を入力してください。");
	printf("実数Ａ：");  scanf("%lf", &da);
	printf("実数Ｂ：");  scanf("%lf", &db);

	swap(&da, &db);

	puts("これらの値を交換しました。");
	printf("実数Ａは%fです。\n", da);
	printf("実数Ｂは%fです。\n", db);

	return 0;
}

#+END_SRC

*** 空ポインタ
#define NULL 0
として使う．
空ポインタを実際に利用するプログラムは後の章．
ほんとは<stddef.h>で定義されているが，
- <stdio.h>
- <stdlib.h>
- <string.h>
- <time.h>
いずれをインクルードしても取り込めるようになっている．
*** スカラ型
ポインタは番地を表すので，一種の数量である．
ポインタ型と[[*%E7%AE%97%E8%A1%93%E5%9E%8B][算術型]]とをあわせて，スカラ型という．
- スカラ型
  - ポインタ型
  - 算術型
    - 汎整数型
      - 文字型
      - 整数型
      - 列挙型
    - 不動小数点型
** ポインタと配列
ポインタが配列を指している時，デフォルトでは配列の1番目の要素を指す．
配列全体ではない．
p + 3とすれば，a[0]の3つ後ろのa[3]を指す．
*** 例外
- sizeof演算子のオペランドとして現れた時，配列全体を指す．
- アドレス演算子&のオペランドとして現れた時も，配列全体を指す．
*** List10-9
#+BEGIN_SRC C :results scalar
/*
	配列の要素のアドレス（要素へのポインタ）を表示
*/

#include <stdio.h>

int main(void)
{
	int i;
	int a[5] = {1, 2, 3, 4, 5};
	int *p = a;				/* pはa[0]を指す */

	for (i = 0; i < 5; i++)
		printf("&a[%d] = %p   p+%d = %p\n", i, &a[i], i, p + i);

	return 0;
}

#+END_SRC

#+RESULTS:
: &a[0] = 0x7ffee96c3940   p+0 = 0x7ffee96c3940
: &a[1] = 0x7ffee96c3944   p+1 = 0x7ffee96c3944
: &a[2] = 0x7ffee96c3948   p+2 = 0x7ffee96c3948
: &a[3] = 0x7ffee96c394c   p+3 = 0x7ffee96c394c
: &a[4] = 0x7ffee96c3950   p+4 = 0x7ffee96c3950
ただし，p + i がa[i]を指すのは，pがa[0]を指してる時に限る．
pがa[2]を指していたら，p + iはa[2 + i]を指す．
** 不安がある 間接演算子と添字演算子
*** List10-10
#+BEGIN_SRC C :results scalar
/*
	配列の要素の値とアドレスを表示
*/

#include <stdio.h>

int main(void)
{
	int i;
	int a[5] = {1, 2, 3, 4, 5};
	int *p = a;				/* pはa[0]を指す */

	for (i = 0; i < 5; i++)
		printf("a[%d] = %d  *(a+%d) = %d  p[%d] = %d  *(p+%d) = %d\n",
								i, a[i], i, *(a + i), i, p[i], i, *(p + i));

	for (i = 0; i < 5; i++)
		printf("&a[%d] = %p  a+%d = %p  &p[%d] = %p  p+%d = %p\n",
								i, &a[i], i, (a + i), i, &p[i], i, (p + i));

	return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
a[0] = 1  *(a+0) = 1  p[0] = 1  *(p+0) = 1
a[1] = 2  *(a+1) = 2  p[1] = 2  *(p+1) = 2
a[2] = 3  *(a+2) = 3  p[2] = 3  *(p+2) = 3
a[3] = 4  *(a+3) = 4  p[3] = 4  *(p+3) = 4
a[4] = 5  *(a+4) = 5  p[4] = 5  *(p+4) = 5
&a[0] = 0x7ffeea620930  a+0 = 0x7ffeea620930  &p[0] = 0x7ffeea620930  p+0 = 0x7ffeea620930
&a[1] = 0x7ffeea620934  a+1 = 0x7ffeea620934  &p[1] = 0x7ffeea620934  p+1 = 0x7ffeea620934
&a[2] = 0x7ffeea620938  a+2 = 0x7ffeea620938  &p[2] = 0x7ffeea620938  p+2 = 0x7ffeea620938
&a[3] = 0x7ffeea62093c  a+3 = 0x7ffeea62093c  &p[3] = 0x7ffeea62093c  p+3 = 0x7ffeea62093c
&a[4] = 0x7ffeea620940  a+4 = 0x7ffeea620940  &p[4] = 0x7ffeea620940  p+4 = 0x7ffeea620940
#+end_example
** 配列とポインタの相違点
ポインタは代入文の左オペランドとなることができるが，
配列はできない．
これができるのなら，配列のアドレスが変更されて別のアドレスへ移動できることになってしまう．
*** これはOK
#+BEGIN_SRC C
int *p;
int y[5];
p = y;
#+END_SRC
*** これはNG
#+BEGIN_SRC C
int a[5];
int b[5];
a = b;
#+END_SRC
*** Column10-3
*(p + i)は，pとiの加算．
a + b が b + a と等しいことを考慮すると，
*(p + i) と *(i + p)も等しそうだかどうか？実は，その通りである．
同じように，p[i] と i[p] も等価である．
ただし，紛らわしいので使うべきではない（何だよ！）．
*** List10C-1
#+BEGIN_SRC C :results scalar
/*
	添字演算子と間接演算子
*/

#include <stdio.h>

int main(void)
{
	int i, a[4];

	0[a] = a[1] = *(a + 2) = *(3 + a) = 7;

	for (i = 0; i < 4; i++)
		printf("a[%d] = %d\n", i, a[i]);

	return 0;
}

#+END_SRC

#+RESULTS:
: a[0] = 7
: a[1] = 7
: a[2] = 7
: a[3] = 7


** 不安がある 配列の受け渡し
関数間での配列の受け渡しは，「先頭要素へのポインタ」という形で行われる．
これは，第6章[[*%E9%85%8D%E5%88%97%E3%81%AE%E5%8F%97%E6%B8%A1%E3%81%97][配列の受渡し]]で学習したことの説明になっているらしい．
よくわからないが．

*** 演習10-4
要素型がint型で，要素数がnの配列を受け取って，全要素に添字と同じ値を代入する関数set_idxを作成せよ．
#include <stdio.h>

#define NUMBER 10

int main(){

    int v[NUMBER] = {0};

    set_idx(v, NUMBER);

    return 0;
}

#+BEGIN_SRC C
  #include <stdio.h>

  void set_idx(int *v, int n) {
      int i;
      for (i = 0; i < n; i++) {
          v[i] = i;
      }
  }

  int main(void) {
      int i, n = 10, a[n];

      set_idx(a, n);

      for (i = 0; i < n; i++) {
          printf("a[%d] = %d\n", i, a[i]);
      }

      return 0;
  }
#+END_SRC

*** 演習10-5
List 10-11の関数ary_set ary_set(&a[2], 2, 99)と呼び出すとどうなるか．
実行するとともに，その結果を検討せよ．
#+BEGIN_SRC C
  /*
      List 10-11改
  ,*/

  #include <stdio.h>

  /*--- 配列vの先頭n個の要素にvalを代入 ---*/
  void ary_set(int v[], int n, int val)
  {
      int i;

      for (i = 0; i < n; i++)
          v[i] = val;
  }

  int main(void)
  {
      int i;
      int a[] = {1, 2, 3, 4, 5};

      ary_set(&a[2], 2, 99);

      for (i = 0; i < 5; i++)
          printf("a[%d] = %d\n", i, a[i]);

      return 0;
  }


#+END_SRC


#+RESULTS:
| a[0] | = |  1 |
| a[1] | = |  2 |
| a[2] | = | 99 |
| a[3] | = | 99 |
| a[4] | = |  5 |
&a[2]としているので，ポインタが配列aの3つ目の要素を指していて，さらにnが2なのでそこから要素3つ未満分に99が代入される？

** まとめ
- アドレスは，記憶域上におけるオブジェクトの場所を示す番地である．
- Type型オブジェクトxにアドレス演算子&を適用した式&xは，オブジェクトxへのポインタを生成する．生成されるポインタの型はType*型であり，値はxのアドレスである．
- Type*型ポインタpの値が，Type型オブジェクトxのアドレスであるとき，「pはxを指す」と表現する．
- Type*型ポインタpに，Type型でない型のオブジェクトを指させるようなことは，原則として避けるべきである．
- Type*型ポインタpに間接演算子*を適用した式*pは，ポインタpが指すType型オブジェクトそのものを表す．すなわち，pがxを指すとき，*pはxのエイリアスである．
- ポインタに間接演算子を適用してオブジェクトに間接的にアクセスすることを「参照外し」という．
- 呼び出された関数の引数がポインタ型であれば，そのポインタに間接演算子を適用して参照外し行うことによって，呼び出し側のオブジェクトに間接的にアクセスできる．
- 一部の例外的な文脈を除き，配列名は，その配列の先頭要素へのポインタと解釈される．すなわち，aが配列であるとき，配列名aは，&a[0]のことである．
- 配列内の要素を指すポインタpに対して整数iを加算/減算した式 p + i および p - i は，pが指す要素のi個後方/前方の要素を指すポインタである．
- 配列内の要素を指すポインタpに対して整数iを加算/減算した式に間接演算子を適用した式 *(p + i) および *(p - i) は，p[i]およびp[-i]と等価である．
- 要素型がTypeである配列aの先頭要素a[0]をType*型のポインタpが指すとき，pはあたかも配列aそのものであるかのように振る舞う．
- 配列名を代入演算子の左オペランドにすることはできない．
- 関数間での配列のやりとりは，先頭要素へのポインタという形で行う．呼び出された側の関数でポインタとして受け取った配列は，実質的には，呼び出した側が渡した配列そのものである．
- いかなるオブジェクトも関数も指さないポインタが，空ポインタである．空ポインタを表す空ポインタ定数は，<stddef.h>ヘッダでオブジェクト形式マクロNULLとして定義されている．
- 算術型とポインタ型の総称がスカラ型である．
* 文字列とポインタ
** 文字列とポインタ
*** 配列による文字列とポインタによる文字列
**** ポインタによる文字列の特徴
- 文字列に加えてポインタ自体もメモリを占有するので，配列による文字列よりメモリを食う．
- 配列のように，要素を{}に入れた宣言方法は使えない．
**** List11-1
#+BEGIN_SRC C
/*
	配列による文字列とポインタによる文字列
*/

#include <stdio.h>

int main(void)
{
	char str[] = "ABC";		/* 配列による文字列 */
	char *ptr  = "123";		/* ポインタによる文字列 */

	printf("str = \"%s\"\n", str);		/* strは先頭文字へのポインタ */
	printf("ptr = \"%s\"\n", ptr);		/* ptrは先頭文字へのポインタ */

	return 0;
}

#+END_SRC
*** 配列による文字列とポインタによる文字列の違い
- 配列に対する代入はできない（[[*%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC][第5章]]と[[*%E9%85%8D%E5%88%97%E3%81%A8%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AE%E7%9B%B8%E9%81%95%E7%82%B9][第10章]]で学習済み）．
- ポインタによる文字列には，新しい文字列を代入できる．
なぜか？
違うアドレスを指すよう，更新されるから．
ただし，古い文字列リテラルは，どこからも指されなくなって，プログラムからアクセスできないゴミになってしまう．
**** List 11-2
#+BEGIN_SRC C
/*
	配列による文字列の書きかえ
  エラーが起きるので実行不可能
*/

#include <stdio.h>

int main(void)
{
	char s[] = "ABC";

	printf("s = \"%s\"\n", s);

	s = "DEF";		/* エラー */

	printf("s = \"%s\"\n", s);

	return 0;
}

#+END_SRC

#+RESULTS:

**** List 11-3
#+BEGIN_SRC C
/*
	ポインタによる文字列の書きかえ
*/

#include <stdio.h>

int main(void)
{
	char *p = "123";

	printf("p = \"%s\"\n", p);

	p = "456";		/* ＯＫ！ */

	printf("p = \"%s\"\n", p);

	return 0;
}

#+END_SRC

#+RESULTS:
| p | = | 123 |
| p | = | 456 |

**** 演習 11-1
#+BEGIN_SRC C
  /*
      ポインタによる文字列の書きかえ
  ,*/

  #include <stdio.h>

  int main(void)
  {
      char *p = "123";

      printf("p = \"%s\"\n", p);

      p = "456" + 1;		/* 1 を足したら 56 になった．ビットがずれた？　*/
                          /* 1 を引いたら何も出力されなかった．ヌル文字が消えて解釈できなくなった？*/
      printf("p = \"%s\"\n", p);

      return 0;
  }
#+END_SRC

#+RESULTS:
| p | = | 123 |
| p | = |  56 |

*** 文字列の配列
文字列を配列化する．
**** List 11-4
#+BEGIN_SRC C
/*
	文字列の配列
*/

#include <stdio.h>

int main(void)
{
	int  i;
	char a[][5] = {"LISP", "C", "Ada"};
	char *p[]   = {"PAUL", "X", "MAC"};

	for (i = 0; i < 3; i++)
		printf("a[%d] = \"%s\"\n", i, a[i]);

	for (i = 0; i < 3; i++)
		printf("p[%d] = \"%s\"\n", i, p[i]);

	return 0;
}
#+END_SRC

#+RESULTS:
| a[0] | = | LISP |
| a[1] | = | C    |
| a[2] | = | Ada  |
| p[0] | = | PAUL |
| p[1] | = | X    |
| p[2] | = | MAC  |

**** 配列/ポインタによる文字列の違い
- 配列による文字列: 文字列の長さが揃っていない場合，配列内に未使用の部分が生じる．全ての要素は連続して配置される．
- ポインタによる文字列: 文字列の長さが揃っていなくても，配列内に未使用の部分は生じないが，要素の順序や連続性は保証されない．また，ポインタ自体も記憶域を占有する．
**** 演習 11-2
List 11-4では，各配列の文字列の個数 3 が，定数としてプログラム中に埋め込まれている．
これを計算によって求めるように書き換えたプログラムを作成せよ．

配列の行数はどうやって取得するんだっけ？
> そうか，ヌル文字が出るまでループを回せばいいのか．

以下のコードは，文字化けする関係でエラーになるけど．
#+BEGIN_SRC C
  /*

  ,*/
  #include <stdio.h>

  int main(void){
      int  i, n = 0;
      char a[][5] = {"LISP", "C", "Ada"};
      char *p[] = {"PAUL", "X", "MAC"};

      for (i = 0; a[i][0] != '\0'; i++){
          n++;
      }
      for (i = 0; i < n; i++){
          printf("a[%d] = \"%s\"\n", i, a[i]);
      }
      for (i = 0; i < n; i++){
          printf("p[%d] = \"%s\"\n", i, p[i]);
      }
      return 0;
  }
#+END_SRC

#+RESULTS:
| a[0] | = | LISP                    |
| a[1] | = | C                       |
| a[2] | = | Ada                     |
| a[3] | = | \350                    |
| a[4] | = | 9q\210i\335\355\376 |
| a[5] | = | \335\355\376          |



** ポインタによる文字列の操作
** 文字列を扱うライブラリ関数
** まとめ

* 構造体
* ファイル処理
