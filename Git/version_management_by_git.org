#+TITLE: Gitによるバージョン管理
#+TAGS: important
* 入門編
** Gitとは
*** バージョン管理システムとは
*** バージョン管理システムGit
** 一人でGitを利用する
*** Gitを使って設定ファイルを管理する
よく，日付付きのファイル名でバックアップしたりするが...
- 変更内容やその理由がわからない
- バックアップの取り忘れが起きる
- ファイル数が膨大になる
*** 基本的なワークフロー
- リポジトリ作成
- ファイルの新規作成と編集
- インデックスへの登録
- リポジトリへのコミット
*** リポジトリの作成と最初のコミット
**** Gitリポジトリ作成
#+BEGIN_SRC sh :session *git*
  mkdir ~/Downloads/initfiles/
  cd ~/Downloads/initfiles
  git init
#+END_SRC

#+RESULTS:
| mkdir:  | /Users/ahayashi/Downloads/initfiles/: | File     | exists |            |    |                                           |
| sh-3.2$ | Reinitialized                         | existing | Git    | repository | in | /Users/ahayashi/Downloads/initfiles/.git/ |
**** Gitで使う名前とメールアドレスの設定
#+BEGIN_SRC sh :session *git*
git config --global user.name
git config --global user.email
#+END_SRC

#+RESULTS:
| Akira               | Hayashi |
| smxshxishxad@me.com |         |
**** Git設定ファイルの確認
#+BEGIN_SRC sh :session *git*
cat ~/.gitconfig
#+END_SRC

#+RESULTS:
|            |               |           |                                                           |                |          |              |
| h>         | %ad           | [%an]     | %Cgreen%d%Creset                                          | %s]\"          | --all    | --date=short |
| [filter    | lfs           |           |                                                           |                |          |              |
| f          |               |           |                                                           |                |          |              |
| f          |               |           |                                                           |                |          |              |
|            | process       | =         | git-lfs                                                   | filter-process |          |              |
|            | required      | =         | true                                                      |                |          |              |
| [core]     |               |           |                                                           |                |          |              |
|            | excludesfile  | =         | /Users/ahayashi/.gitignore_global                         |                |          |              |
|            | quotepath     | =         | false                                                     |                |          |              |
| [difftool  | sourcetree    |           |                                                           |                |          |              |
| LOCAL\"    | $REMOTE\      |           |                                                           |                |          |              |
|            | path          | =         |                                                           |                |          |              |
| [mergetool | sourcetree    |           |                                                           |                |          |              |
| LOCAL\"    | $REMOTE\      | -ancestor | $BASE\                                                    | -merge         | $MERGED\ |              |
|            | trustExitCode | =         | true                                                      |                |          |              |
| [user]     |               |           |                                                           |                |          |              |
|            | name          | =         | Akira                                                     | Hayashi        |          |              |
|            | email         | =         | smxshxishxad@me.com                                       |                |          |              |
| [commit]   |               |           |                                                           |                |          |              |
|            | template      | =         | /Users/ahayashi/Documents/GitHub/dotfiles/.gitmessage.txt |                |          |              |
**** 管理するファイルの登録と確認
#+BEGIN_SRC sh :session *git* :results output
  touch test.txt
  git status
#+END_SRC

#+RESULTS:
***** インデックスへ登録前のリポジトリ確認
#+begin_example

test.txt
On branch master

No commits yet

Untracked files:
..." to include in what will be committed)

	test.txt

nothing added to commit but untracked files present (use "git add" to track)
#+end_example
***** インデックスに登録後のリポジトリ状態の確認
#+BEGIN_SRC sh :session *git* :results output
git add test.txt
git status
#+END_SRC

#+RESULTS:
: 
: On branch master
: 
: No commits yet
: 
: Changes to be committed:
: ..." to unstage)
: 
: 	new file:   test.txt
***** リポジトリへのコミットとコミットログの確認
コミット
#+BEGIN_SRC sh :session *git* :results output
git commit -m "Initial commit"
#+END_SRC

#+RESULTS:
: [master (root-commit) 48ca5da] Initial commit
:  1 file changed, 0 insertions(+), 0 deletions(-)
:  create mode 100644 test.txt

#+BEGIN_SRC sh :session *git* :results output
echo "hello, world!!" > test.txt
git status
#+END_SRC

#+RESULTS:
#+begin_example

test.txt
On branch master
Changes not staged for commit:
..." to update what will be committed)
..." to discard changes in working directory)

	modified:   test.txt

no changes added to commit (use "git add" and/or "git commit -a")
#+end_example

#+BEGIN_SRC sh :session *git* :results output
git add test.txt
git commit -m "Say hello to world"
#+END_SRC

#+RESULTS:
: 
: [master 6a99f5c] Say hello to world
:  1 file changed, 1 insertion(+)

#+BEGIN_SRC sh :session *git* :results output
git log
#+END_SRC

#+RESULTS:
#+begin_example

master)[m
[m
Date:   Sat Dec 8 20:18:28 2018 +0900[m
[m
    Say hello to world[m
[m
diff --git a/test.txt b/test.txt[m
index e69de29..af96ee3 100644[m
--- a/test.txt[m
+++ b/test.txt[m
@@ -0,0 +1 @@[m
+hello, worldecho 'org_babel_sh_eoe'[m
[m
commit 48ca5da104ea627614d5d05c8b43e7766f841e7b[m
[m
Date:   Sat Dec 8 20:14:33 2018 +0900[m
[m
    Initial commit[m
[m
diff --git a/test.txt b/test.txt[m
new file mode 100644[m
index 0000000..e69de29[m
sh: it: command not found
#+end_example


*** 管理したくないファイルをGitで無視する
.gitignore
*** リポジトリでのワークフロー
**** ファイル変更，コミット
**** ファイル追加，既存ファイル変更
**** 複数の変更を一括コミット
git commit -a -m "message"
*** この章のまとめ
- git init
- git config
- git add
- git status
- git commit
- git log
- git rm
- .gitignore
- git show
- git mv
- git checkout
** Gitの用語
*** バージョン管理システムにおける基本的な用語
**** リポジトリ
***** ローカルリポジトリ
***** リモートリポジトリ
**** ワーキングツリー
**** ブランチ
***** ローカルブランチ
***** リモートブランチ
***** リモートトラッキングブランチ
リモートブランチをローカルリポジトリでトラッキングするためのブランチ．
origin/masterは，originという名前のリモートブランチにある，masterブランチをトラッキングしている．
**** チェックアウト
**** タグ
**** コミット
*** Git独特の概念
**** ワーキングツリーとインデックス，リポジトリ
インデックスがあるので，編集内容の一部だけコミットすることができる．
リモートリポジトリに接続できないときにも，変更をコミットし，ログや差分を確認できる．
**** リビジョン
Gitが連番ではなくハッシュ値を使うのは，複数人での作業を前提としているから．
ハッシュ値以外にも，以下の代名詞による指定方法がある．
- HEAD: 現在チェックアウトされているブランチの最新コミット
- FETCH_HEAD: 最後に取得したリモートブランチの最新コミット
- ORIG_HEAD: GitコマンドによってHEADが大きく変更されることに備えて，前のHEADの値が記録されている
- MERGE_HEAD: マージ中に生成し，ブランチにマージするコミットが記録される．
** 基本的なGitコマンド
*** リポジトリの作成/git init
**** bareリポジトリ
git init --bare reponame
リモートリポジトリはこの方法で作るのがよい．でないと，うまく動作しないことがある．
**** 共有リポジトリ
git init --shared
--sharedオプションをつけると，ディレクトリの権限を自動的に適切に設定してくれる．
#+BEGIN_SRC sh :session *git* :results output
cd ../
cghrp project initfiles
cd initfiles
git init --shared
ls -la .git/
#+END_SRC

#+RESULTS:
#+begin_example

sh: cghrp: command not found
sh-3.2$ Initialized empty shared Git repository in /Users/ahayashi/Downloads/initfiles/.git/
total 24
drwxrwsr-x  10 ahayashi  staff  320 Dec  8 20:46 .
drwxr-xr-x   4 ahayashi  staff  128 Dec  8 20:46 ..
-rw-rw-r--   1 ahayashi  staff   23 Dec  8 20:46 HEAD
drwxrwsr-x   2 ahayashi  staff   64 Dec  8 20:46 branches
-rw-rw-r--   1 ahayashi  staff  197 Dec  8 20:46 config
-rw-rw-r--   1 ahayashi  staff   73 Dec  8 20:46 description
drwxrwsr-x  13 ahayashi  staff  416 Dec  8 20:46 hooks
drwxrwsr-x   3 ahayashi  staff   96 Dec  8 20:46 info
drwxrwsr-x   4 ahayashi  staff  128 Dec  8 20:46 objects
drwxrwsr-x   4 ahayashi  staff  128 Dec  8 20:46 refs
#+end_example

*** Gitリポジトリの設定を行う/git config
.git/configのほうが.gitconfigよりも優先するので，リポジトリごとの設定は前者に登録するとよい．
*** ファイルをインデックスに登録する/git add
既に登録したファイルを管理から外すには，
git rm --cachedを使う．
*** 差分を出力する/git diff
**** 現在の修正の差分
普通にgit diff
**** ブランチやコミット間の差分
git diff branchA branchB
git diff commithashA commthashB
**** 現在ブランチとインデックスとの差分
addした後に見たくなったときとか．
git diff --cached
または
git diff HEAD
**** -Mオプション
git diff -M
とすると，ファイル名を変更した場合にもうまく表示される．
*** コミットログを表示する/git log, git shortlog
- git log
- git shortlog: コミットログを要約して出力
**** git log
***** 普通に使う
#+BEGIN_SRC sh :results scalar
git log | head -n18
#+END_SRC

#+RESULTS:
#+begin_example
commit a5d63c3e55cabadc3666a255223f075044c9322e
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Fri Dec 14 02:19:30 2018 +0900

    Learn sed

commit b6c5b8eefc75158a7361c1f8b9022be29e1146f3
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Thu Dec 13 22:25:17 2018 +0900

    Learn pointer

commit 0b8235f2eb326c918fe7196ad38fa9793a787f95
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Thu Dec 13 22:25:05 2018 +0900

    Learn file system

#+end_example
***** コミットログの出力範囲を指定
git log 古いコミット..新しいコミット
と指定
#+BEGIN_SRC sh :results scalar
git log 0b8235f2eb326c918fe7196ad38fa9793a787f95..a5d63c3e55cabadc3666a255223f075044c9322e
#+END_SRC

#+RESULTS:
#+begin_example
commit a5d63c3e55cabadc3666a255223f075044c9322e
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Fri Dec 14 02:19:30 2018 +0900

    Learn sed

commit b6c5b8eefc75158a7361c1f8b9022be29e1146f3
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Thu Dec 13 22:25:17 2018 +0900

    Learn pointer
#+end_example
***** あるコミットからHEADまで
git log コミット..
と入力
#+BEGIN_SRC sh :results scalar
git log b6c5b8eefc75158a7361c1f8b9022be29e1146f3..
#+END_SRC

#+RESULTS:
: commit a5d63c3e55cabadc3666a255223f075044c9322e
: Author: Akira Hayashi <smxshxishxad@me.com>
: Date:   Fri Dec 14 02:19:30 2018 +0900
: 
:     Learn sed
***** あるファイルに関係するコミット                          :important:
git log ブランチ名 ファイル名
ブランチには originも，ローカルも指定できる
#+BEGIN_SRC sh :results scalar
git log master version_management_by_git.org
#+END_SRC

#+RESULTS:
#+begin_example
commit a7328b51311b51cefe9708ee9450dc9e8579511d
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Wed Dec 12 14:15:01 2018 +0900

    Learn git diff

commit 92a5580e5f622598c8faadf583861e6bd0a3134a
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Wed Dec 12 14:11:51 2018 +0900

    Learn terms

commit d9ee84fde4572bdc7d3f6a7144f4e4f6a00f5815
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Wed Dec 12 14:05:41 2018 +0900

    Remove numbers from headings

commit c0c1d4a532cb28a4f45e44e48c7461cac91b2eb1
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Sat Dec 8 22:20:52 2018 +0900

    Update

commit d791a660fff04d3fb4123b2733c52eee7fd376b4
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Sat Dec 8 18:27:25 2018 +0900

    Initial commit
#+end_example
***** コミットで行われた変更の差分を表示する
#+BEGIN_SRC sh :results scalar
git log -p | head -n30
#+END_SRC

#+RESULTS:
#+begin_example
commit a5d63c3e55cabadc3666a255223f075044c9322e
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Fri Dec 14 02:19:30 2018 +0900

    Learn sed

diff --git a/Unix/shell_programing_practical_technique.org b/Unix/shell_programing_practical_technique.org
index fd4b1ea..eeec78f 100644
--- a/Unix/shell_programing_practical_technique.org
+++ b/Unix/shell_programing_practical_technique.org
@@ -1009,7 +1009,171 @@ echo オバチャンオバチャン | awk '{$0 = gensub(/オバ/,"オッ",$0);pr
 
 ,*** sedを使う
 ,**** 置換
+たいていは文字列の置換に使われる．
+***** AWKのsubとの使い分け
+特定の列の文字列を狙うならAWKを使う．
+***** 郵便番号にハイフンを入れる
+****** まずやってみる
+#+BEGIN_SRC sh
+echo 1110001\\n2220001 > zipcode
+cat zipcode
+cat zipcode | sed 's/0001/-0001/'
+#+END_SRC
+
+#+RESULTS:
+|  1110001 |
+|  2220001 |
+| 111-0001 |
+| 222-0001 |
#+end_example
***** 出力するコミット数を指定する
-数字でok.
headにパイプで送らなくてもよかったのか！！
#+BEGIN_SRC sh :results scalar
git log -2
#+END_SRC

#+RESULTS:
#+begin_example
commit a5d63c3e55cabadc3666a255223f075044c9322e
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Fri Dec 14 02:19:30 2018 +0900

    Learn sed

commit b6c5b8eefc75158a7361c1f8b9022be29e1146f3
Author: Akira Hayashi <smxshxishxad@me.com>
Date:   Thu Dec 13 22:25:17 2018 +0900

    Learn pointer
#+end_example
***** コミットされた順でコミットログを表示する
コミットをパッチでやり取りする際に利いてくる．
****** コミットされた順に表示 --topo-order
#+BEGIN_SRC sh :results scalar
git log -10 --pretty="%h %ai %s" --topo-order HEAD
#+END_SRC

#+RESULTS:
#+begin_example
a5d63c3 2018-12-14 02:19:30 +0900 Learn sed
b6c5b8e 2018-12-13 22:25:17 +0900 Learn pointer
0b8235f 2018-12-13 22:25:05 +0900 Learn file system
a7328b5 2018-12-12 14:15:01 +0900 Learn git diff
92a5580 2018-12-12 14:11:51 +0900 Learn terms
d9ee84f 2018-12-12 14:05:41 +0900 Remove numbers from headings
2cdbda1 2018-12-12 12:07:57 +0900 Update
e9da3e6 2018-12-12 12:07:46 +0900 Learn storage duration
e1f7b94 2018-12-12 12:07:16 +0900 Learn type of pointers
83b2d80 2018-12-12 12:06:56 +0900 Study scalar type
#+end_example
****** 日付順に表示 --date-order
#+BEGIN_SRC sh :results scalar
git log -10 --pretty="%h %ai %s" --date-order HEAD
#+END_SRC

#+RESULTS:
#+begin_example
a5d63c3 2018-12-14 02:19:30 +0900 Learn sed
b6c5b8e 2018-12-13 22:25:17 +0900 Learn pointer
0b8235f 2018-12-13 22:25:05 +0900 Learn file system
a7328b5 2018-12-12 14:15:01 +0900 Learn git diff
92a5580 2018-12-12 14:11:51 +0900 Learn terms
d9ee84f 2018-12-12 14:05:41 +0900 Remove numbers from headings
2cdbda1 2018-12-12 12:07:57 +0900 Update
e9da3e6 2018-12-12 12:07:46 +0900 Learn storage duration
e1f7b94 2018-12-12 12:07:16 +0900 Learn type of pointers
83b2d80 2018-12-12 12:06:56 +0900 Study scalar type
#+end_example
***** コミットログ出力フォーマット --oneline, --pretty
****** --oneline
#+BEGIN_SRC sh :results scalar
git log -10 --oneline
#+END_SRC

#+RESULTS:
#+begin_example
a5d63c3 Learn sed
b6c5b8e Learn pointer
0b8235f Learn file system
a7328b5 Learn git diff
92a5580 Learn terms
d9ee84f Remove numbers from headings
2cdbda1 Update
e9da3e6 Learn storage duration
e1f7b94 Learn type of pointers
83b2d80 Study scalar type
#+end_example

****** --pretty
git log --pretty="%h %ai %s"
- %h: コミットハッシュ値
- %ai: パッチが作成された日時
- %s: コミットログの1行目
- %ci: コミット日時をISO 8601フォーマットで出力
- short: 要約．日付がない
- medium: デフォルト．
- full: コミットした人の名前が追加される
- fuller: 変更作成日時とコミット日時が追加される
- email: git format-patch形式（後述）でメッセージを作る
- raw: 全てを出力
#+BEGIN_SRC sh :results scalar
git log -10 --pretty=fuller
#+END_SRC

#+RESULTS:
#+begin_example
commit a5d63c3e55cabadc3666a255223f075044c9322e
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Fri Dec 14 02:19:30 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Fri Dec 14 02:19:37 2018 +0900

    Learn sed

commit b6c5b8eefc75158a7361c1f8b9022be29e1146f3
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Thu Dec 13 22:25:17 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Thu Dec 13 22:25:17 2018 +0900

    Learn pointer

commit 0b8235f2eb326c918fe7196ad38fa9793a787f95
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Thu Dec 13 22:25:05 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Thu Dec 13 22:25:05 2018 +0900

    Learn file system

commit a7328b51311b51cefe9708ee9450dc9e8579511d
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 14:15:01 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 14:15:01 2018 +0900

    Learn git diff

commit 92a5580e5f622598c8faadf583861e6bd0a3134a
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 14:11:51 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 14:11:51 2018 +0900

    Learn terms

commit d9ee84fde4572bdc7d3f6a7144f4e4f6a00f5815
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 14:05:41 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 14:05:41 2018 +0900

    Remove numbers from headings

commit 2cdbda1228416a4348f733fc623e40ae421e234e
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 12:07:57 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 12:07:57 2018 +0900

    Update

commit e9da3e619a82628fc685137a4eb90428098453de
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 12:07:46 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 12:07:46 2018 +0900

    Learn storage duration

commit e1f7b94f7955f7c5aad0ab13563f6ed3e482d877
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 12:07:16 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 12:07:34 2018 +0900

    Learn type of pointers

commit 83b2d805a126800df17879d58cfc5824778715a3
Author:     Akira Hayashi <smxshxishxad@me.com>
AuthorDate: Wed Dec 12 12:06:56 2018 +0900
Commit:     Akira Hayashi <smxshxishxad@me.com>
CommitDate: Wed Dec 12 12:06:56 2018 +0900

    Study scalar type
#+end_example

**** git shortlog
babel環境では出ない!
#+BEGIN_SRC sh :results output
git shortlog
#+END_SRC

#+RESULTS:

*** TODO ローカルリポジトリ，ワーキングツリーの状態を確認する/git status
*** ディレクトリおよびファイルの移動，変更を行う/git mv
*** ファイルおよびディレクトリの削除/git rm
*** 変更をローカルリポジトリにコミットする/git commit
*** ローカルリポジトリ，インデックスを元に戻す/git reset
*** ワーキングツリーを掃除する/git clean
*** 特定の文字列を検索する/git grep
*** リポジトリで管理するファイルを設定する/.gitignoreファイル
*** コミット内容を表示する/git show
** 複数人のプロジェクトでGitを利用する
** 複数人で開発する場合に利用するGitコマンド
* 発展編
** Gitを使った大規模プロジェクトに挑戦してみよう
** 大規模プロジェクトでよく利用するGitコマンド
* 応用編
** Gitのその他の使い方
** リモートリポジトリの作成と公開
** 開発プロセスとの連携
** 他のバージョン管理システムと連携する
** Gitリポジトリの中身を見る
* 付録
** 付録A　Gitのインストール方法
** 付録B　周辺ツールとの連携
* 参考文献
* 索引
