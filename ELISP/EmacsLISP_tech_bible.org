#+TITLE: Emacs LISP テクニックバイブル
#+STARTUP: overview
* 逆引き目次
** 数値
** 文字列
** リスト
** オブジェクト
** 制御構造
** 関数
** コマンド
** バッファ
** ファイル
** ミニバッファ
** ウィンドウ
** プロセス
** anything.el
** その他
* Emacs Lisp 始めの一歩
** ようこそ Emacs Lisp の世界へ
*** Emacs Lisp とは
*** Emacs Lisp 習得のメリット・目的
本書のステップ
- elisp の基礎を知る
- バッファとウィンドウによる表現方法を学ぶ
- 関数をすこしずつ覚えていく
- オンラインヘルプの使い方を学ぶ
- 応用的な知識をつける
- Commpn Lisp マクロを使ってエレガントに elisp を書く
- テスト・デバッグの方法を知る
- 実際に elisp で書いてみる
** Emacs Lisp を書くための設定
*** auto-install.el をインストールする
*** 必須ファイルのインストール
- open-junk-file.el
- lispxmp.el
- paredit.el
- auto-async-byte-compile.el
*** 設定
p.31の設定を
[[file:~/Documents/GitHub/dotfiles/.emacs.d/inits/40_EmacsLisp.el::(require%20'lispxmp)%20;;%20Enable%20help%20in%20emacs-lisp-mode][設定ファイル]]に書いたほうがいいかも？
** 文法
*** 括弧だらけの文法
*** 構成要素
*** コメント
** Emacs Lisp プログラム実行の仕組み
*** フォーム
S式の2面性．
- データ
- プログラム（フォーム）
フォームを評価することで，プログラムを実行する
*** 評価とは
フォームを実行して結果を得ること．
*** 関数呼び出し
*** 評価の具体例
#+BEGIN_SRC elisp
  (+ 23 (+ 6 7))                          ; => 36
#+END_SRC
*** クォート
リストやシンボルは，評価されると別物になる．
しかし，これらをデータとしてそのまま関数に渡したい局面がある．
そんなとき，評価を抑制するのがクォート．
#+BEGIN_SRC elisp
  (+ 1 3)                                 ; => 4
  emacs-major-version                     ; => 25

  ;;; クォートの例
  '(+ 1 3)                                ; => (+ 1 3)

  ;;; スペルアウト
  (quote (+ 1 3))                         ; => (+ 1 3)

  ;;; リストやシンボルを関数に渡す例
  ;;(length (+ 1 3))                      ; wrong-type-argument sequencep 4 となって実行できなかった．
  (length '(+ 1 3))                       ; => 3
  (symbol-value 'emacs-major-version)     ; => 25
#+END_SRC
*** 明確性
括弧のおかげで評価の優先順位が明確．
** 評価の方法
** 数値
** 文字列
* Emacs Lisp の基礎
* バッファ・ファイル
* ウィンドウ
* 様々な関数
* Emacs Lisp 応用
* Common Lisp マクロ
* テスト・デバッグ
* Emacs の挙動を変更する
* モード作成
* 外部プログラムとの協調
* 非同期プログラミング
* anything.el で簡単アプリケーション作成

