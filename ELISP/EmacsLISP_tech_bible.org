#+TITLE: Emacs LISP テクニックバイブル
#+STARTUP: overview
#+TAGS: 必修 知らなかった 気づき わからん
#+PROPERTY header-args :session *elisp*
* 必修
** マニュアル
- <f1> m: describe-mode．キーバインドも見れる．
* 逆引き目次
** 数値
** 文字列
** リスト
** オブジェクト
** 制御構造
** 関数
** コマンド
** バッファ
** ファイル
** ミニバッファ
** ウィンドウ
** プロセス
** anything.el
** その他
* Emacs Lisp 始めの一歩
** ようこそ Emacs Lisp の世界へ
*** Emacs Lisp とは
*** Emacs Lisp 習得のメリット・目的
本書のステップ
- elisp の基礎を知る
- バッファとウィンドウによる表現方法を学ぶ
- 関数をすこしずつ覚えていく
- オンラインヘルプの使い方を学ぶ
- 応用的な知識をつける
- Commpn Lisp マクロを使ってエレガントに elisp を書く
- テスト・デバッグの方法を知る
- 実際に elisp で書いてみる
** Emacs Lisp を書くための設定
*** auto-install.el をインストールする
*** 必須ファイルのインストール
- open-junk-file.el
- lispxmp.el
- paredit.el
- auto-async-byte-compile.el
*** 設定
p.31の設定を
[[file:~/Documents/GitHub/dotfiles/.emacs.d/inits/40_EmacsLisp.el::(require%20'lispxmp)%20;;%20Enable%20help%20in%20emacs-lisp-mode][設定ファイル]]に書いたほうがいいかも？
** 文法
*** 括弧だらけの文法
*** 構成要素
*** コメント
** Emacs Lisp プログラム実行の仕組み
*** フォーム
S式の2面性．
- データ
- プログラム（フォーム）
フォームを評価することで，プログラムを実行する
*** 評価とは
フォームを実行して結果を得ること．
*** 関数呼び出し
*** 評価の具体例
#+BEGIN_SRC elisp
  (+ 23 (+ 6 7))                          ; => 36
#+END_SRC
*** クォート
リストやシンボルは，評価されると別物になる．
しかし，これらをデータとしてそのまま関数に渡したい局面がある．
そんなとき，評価を抑制するのがクォート．
#+BEGIN_SRC elisp
  (+ 1 3)                                 ; => 4
  emacs-major-version                     ; => 25

  ;;; クォートの例
  '(+ 1 3)                                ; => (+ 1 3)

  ;;; スペルアウト
  (quote (+ 1 3))                         ; => (+ 1 3)

  ;;; リストやシンボルを関数に渡す例
  ;;(length (+ 1 3))                      ; wrong-type-argument sequencep 4 となって実行できなかった．
  (length '(+ 1 3))                       ; => 3
  (symbol-value 'emacs-major-version)     ; => 25
#+END_SRC
*** 明確性
括弧のおかげで評価の優先順位が明確．
** 評価の方法
*** いろいろな評価の方法
*** 入力補完                                                 :知らなかった:
関数名，変数名を途中まで入力しておき，
M-Tab
で補完．
#+BEGIN_SRC elisp
  ;;; bu-f-na と入力して M-Tab すると
  buffer-file-name                        ;となる．
#+END_SRC
*** コマンド呼び出し
実は，キーを押すごとにも，コマンドが実行されている．
*** ミニバッファにフォームを入力して評価する
M-:
とすると，
M-x eval-expression コマンドが実行されたことになり，ミニバッファに入力したフォームを評価できる．
*** 対話的に評価する
Emacs 終了後に結果が残らないのでおすすめしない．
**** *scratch* バッファ
フォームを入力した後，C-j するとすぐ下に結果が出るらしい．
自分の環境では出なかった．
**** M-x ielm
*** メモファイルにてフォームを評価し，結果を書き込む         :知らなかった:
この方法なら，過去の知的労働の結果を，grep検索するなどして再利用できる．
#+BEGIN_SRC elisp
  (+ 1 3); フォームを書いて，行末で M-; M-; とすると，自動的に矢印が挿入される！！！
  (+ 1 3)                                 ; => 4
  (+ 2 4)                                 ; => 6
  (* 100 3)                               ; => 300
  ;;; C-c C-d とすると，バッファ全体のフォームを評価する！！
  ;;; すごすぎる
#+END_SRC
** 数値
*** 基本的な演算
#+BEGIN_SRC elisp
  ;;; 整数での除算
  (/ 10 3)                                ; => 3

  ;;; 小数での除算
  (/ 10.0 3)                              ; => 3.3333333333333335

  ;;; 剰余
  (% 12 5)                                ; => 2

  ;;; 1だけ足す
  (1+ 3)                                  ; => 4

  ;;; 1だけ引く
  (1- 7)                                  ; => 6

  ;;; (3 + 4) * (10 - 7)
  ;;; 乗算記号の位置に注意！！
  (* (+ 3 4) (- 10 7))                    ; => 21

  ;;; 2 ^ 8
  (expt 2 8)                              ; => 256
#+END_SRC
*** 比較                                                             :注意:
等号の否定が /= なのが間違えそうで危うい
#+BEGIN_SRC elisp
  ;;; 等しい
  (= 10 10)                               ; => t
  (= 10 9)                                ; => nil

  ;;; identical ではなく，equal なのだろう．
  (= 10 10.0)                             ; => t

  ;;; 等しくない
  (/= 10 10)                              ; => nil
  (/= 10 9)                               ; => t

  ;;; 大小比較
  (< 9 10)                                ; => t
  (<= 9 10)                               ; => t
  (> 9 10)                                ; => nil
  (>= 9 10)                               ; => nil

#+END_SRC
*** 整数の範囲
emacs 25 の整数範囲はどうなってるんだろう
#+BEGIN_SRC elisp
  emacs-version                           ; => "25.3.1"

  ;;; 最小値?
  (expt -2 29)                           ; => -536870912

  ;;; 最大値?
  536870911                               ; => 536870911

  ;;; 自分の環境では桁溢れしていない　
  (1- (expt 2 29))                        ; => 536870911
  (expt 2 29)                             ; => 536870912
#+END_SRC
*** 浮動小数点数
#+BEGIN_SRC elisp
  ;;; 科学的記数法
  1e3                                     ; => 1000.0
  1.23e3                                  ; => 1230.0

  ;;; 除算結果を小数で出力
  (/ 10.0 3)                              ; => 3.3333333333333335

  ;;; 整数を浮動小数点数に
  (float 10)                              ; => 10.0

  ;;; 浮動小数点数なら桁溢れせず扱える
  (expt 2 29)                             ; => 536870912
  (expt 2.0 29)                           ; => 536870912.0
  (expt 2.0 54)                           ; => 18014398509481984.0
  (float-time)                            ; => 1545068837.813383

#+END_SRC
** 文字列
*** 文字列の例
#+BEGIN_SRC elisp
  "abc"                                   ; => "abc"

  "
  first
  second"                                 ; => "\nfirst\nsecond"

  ;;; ヒアドキュメントもどき．上の出力と比べよ．
  "\
  first
  second"                                 ; => "first\nsecond"

#+END_SRC
*** バックスラッシュ記法
特殊な文字を表現するために使う．
例えば，\t はタブ記号．

その他は (info "(elisp)CharacterType") を評価せよ．

Meta の評価結果が直感に反する．
#+BEGIN_SRC elisp
  "Ctrl-A = \C-a"                         ; => "Ctrl-A = "
  "Meta-x = \M-x"                         ; => "Meta-x = \370"
  "newline\n"                             ; => "newline\n"
  "double-quote = \""                     ; => "double-quote = \""
  "backslash = \\"                        ; => "backslash = \\"
#+END_SRC

*** 文字
文字そのものの実態は整数．
#+BEGIN_SRC elisp
  ?a                                      ; => 97

  ;;; ヌル文字
  ?\0                                     ; => 0

  ?\C-a                                   ; => 1

  ?あ                                     ; => 12354
  ?\x3042                                 ; => 12354
  "?\x3042"                               ; => "?あ"

#+END_SRC
*** 書式文字列
#+BEGIN_SRC elisp
  (format "%s" "foo")                     ; => "foo"

  ;;; 整数は %s または%d
  (format "%s" 1)                         ; => "1"

  ;;; 右寄せ，左寄せ，0詰め
  (format "[%2d] [%-2d] [%02d]" 3 3 3)    ; => "[ 3] [3 ] [03]"

  ;;; %c は文字を文字列に変換する
  (format "文字から文字列へ: %c" ?a)      ; => "文字から文字列へ: a"

  ;;; %% は % そのものを表す
  (format "%d 円の商品の消費税は，
  税率 %d%% で %d 円です．" 500 8 (* 500 0.08)) ; => "500 円の商品の消費税は，\n税率 8% で 40 円です．"
#+END_SRC

* Emacs Lisp の基礎
** Emacs Lisp プログラムの編集方法
*** S式を操作するコマンド                                            :必修:
- C-M-f: 次のS式へ移動する
- C-M-b: 前のS式へ移動する
- C-M-d: リストの内側へ入る
- C-M-u: リストの外側へ出る
- C-M-SPC: S式をマークする
- C-M-k: S式をカットする
- C-M-t: S式を入れ替える
#+BEGIN_SRC elisp
  (defun test (&optional x)
    (org-clock-in-headline "weekly Review")
    (let ()))
#+END_SRC
*** インデントを整える                                       :知らなかった:
- C-M-a で関数の先頭に移動
- C-M-q でカーソルが指している S式のインデントを整える．
#+BEGIN_SRC elisp

#+END_SRC
*** paredit.el を使用する
- 括弧で囲む: M-(
- 括弧を外す: M-s
ほかにもある．
<f1>m で参照せよ．
** シンボルとオブジェクト
*** シンボル
elispの字句
- 数値
- 文字列
- シンボル: つまり数値でなく，引用符がついていないもの．

コードの大部分がシンボル．
setq や defun もシンボル．
使用可能な文字の種類は多言語の追随を許さない．

*** シンボルと変数・関数                                           :気づき:
- シンボルそのものを評価: 変数名と解釈し，その変数の値が評価結果となる
- リストを評価: 最初の要素を関数と解釈し，その関数を呼び出す．
なるほど，これがリスト言語とよばれる所以か．

**** 同じシンボルに，変数，関数，両方の名前空間を持つことができる
#+BEGIN_SRC elisp
  emacs-version                           ; => "25.3.1"
  (emacs-version)                         ; => "GNU Emacs 25.3.1 (x86_64-apple-darwin13.4.0, NS appkit-1265.21 Version 10.9.5 (Build 13F1911))\n of 2017-09-13"
#+END_SRC

**** ただし，変数と関数が同じ働きをするシンボルもある
#+BEGIN_SRC elisp
  buffer-file-name                        ; => nil
  (buffer-file-name)                      ; => nil
#+END_SRC
*** 代入/ setq
setq スペシャルフォームを使う．
setq は関数ではない．
オブジェクトに，貼ってはがせる名札を貼るイメージ．
#+BEGIN_SRC elisp
  (setq a 1)
  a                                       ; => 1


  (setq a 1.1)
  a                                       ; => 1.1


  (setq a "string"
        b 0)
  a                                       ; => "string"
  b                                       ; => 0


  ;;; 変数 setq に 代入することもできる（もちろん，おすすめしない）
  (setq setq 9999)
  setq                                    ; => 9999
#+END_SRC

*** データ型/ 述語関数で調べよ
オブジェクトには型がある．
オブジェクトのデータ型は述語関数 ~p で調べられる．
pはpredicateの略．
オブジェクトは自身の型を知っており，述語関数によって尋ねられると，答えを返す．

一方，変数には型がない．
（ちょっと，何を言っているのか分からない）
普段は文字列を代入している変数に，関数オブジェクトを代入することできる．

*** 関数名・変数名の命名/ 接頭辞をつけよ
なんと，関数と変数の名前空間は，それぞれ1つしかない．
でも，パッケージごとに接頭辞を付ける決まりがあるので，衝突は起きない．

org.el に登場する関数名・変数名はみなorg-という接頭辞を使っている．

** ローカル変数/ let で代入
オブジェクトを変数に代入する方法はわかった．
でも，変数はどこからでもアクセスできるので，値の追跡が困難．
そこでローカル変数．
*** ローカル変数を定義する/ let と let*
どう違うか
- let: 他のローカル変数の影響を受けない
- let*: 直前の代入の影響を受ける
#+BEGIN_SRC elisp
  (setq x 1)
  x                                       ; => 1

  (let ((x 2)
        null                              ; (null nil) の省略形
        )
    x                                     ; => 2
    null                                  ; => nil
    (let ((x 3))x)
    )

  ;;; let を抜けるとグローバルの値に戻る
  x                                       ; => 1

  ;;; let を使う場合
  (let ((x (+ 5 5))                       ; let の場合，この代入はyには影響しない．
        (y x)                             ; ここではグローバルのxが代入される．
        )
    x                                     ; => 10
    y                                     ; => 1
    (setq x 100)
    x                                     ; => 100
    )


  ;;; let* を使う場合
  (let* ((x (+ 5 5))                      ; let* の場合，この代入はyにも影響する．
         (y x)                            ; ローカルのxが参照される
         )
        x                                 ; => 10
        y                                 ; => 10
        )
#+END_SRC
** コンスセル・リスト・ベクタ
*** コンスセル
S式の「ペア」のこと
#+BEGIN_SRC elisp
  ;;; 一番簡単なコンスセル作成方法　クオートが必要
  '(10 . "ten")                            ; => (10 . "ten")

  ;;; 正式？なコンスセル作成方法
  (cons 10 "ten")                         ; => (10 . "ten")

  ;;; 式を評価しないで残しておきたいときにはドットで区切って書く？
  '((+ 1 2) . 3)                           ; => ((+ 1 2) . 3)
  ;;; cons で作ると評価される
  (cons (+ 1 2) 3)                        ; => (3 . 3)

  ;;; car で左を取得．クオートが必要
  (car '(10 . "ten"))                     ; => 10

  ;;; cdr で右側を取得．クオートが必要
  (cdr '(10 . "ten"))                     ; => "ten"

  ;;; car や cdr はコンスセル以外に使うとエラーになる
  ;;(car 'foo)                              ; エラーになるのでコメントアウト

  ;;; car-safe なら nil を返すので 安全
  (car-safe 'foo)                         ; => nil
#+END_SRC
*** リスト
コンスセルのcdrにコンスセルをつなげたもの．
データはcarに入っている．cdrではない．
一番最後のcdrにnilが入っている．
#+BEGIN_SRC elisp
  ;;; リストを作る方法
  ;;; 原理的にはコンスセルの連続
  (cons 1 (cons 2 (cons 3 nil)))          ; => (1 2 3)

  ;;; 上の方法は煩雑なので list 関数を使おう
  (list 1 2 3)                            ; => (1 2 3)

  ;;; 新しい要素が追加される順番に注目
  (setq list (cons 3 nil))                ; => (3)
  (setq list (cons 2 list))               ; => (2 3)
  (setq list (cons 1 list))               ; => (1 2 3)

  ;;; car と cdr
  (car list)                            ; => 1
  (cdr list)                            ; => (2 3)
  ;;(car 'list)                             ; これはエラー
  list                                    ; => (1 2 3)
  'list                                   ; => list

  ;;; nth 関数で要素にアクセス
  (nth 0 list)                            ; => 1
  (nth 1 list)                            ; => 2
  (nth 2 list)                            ; => 3
  (nth 3 list)                            ; => nil

  ;;; elt 関数は，nth 関数の引数の順序を逆にしたもの．汎用性が高いらしい．
  (elt list 0)                            ; => 1
  (elt list 1)                            ; => 2
  (elt list 2)                            ; => 3
  (elt list 3)                            ; => nil
#+END_SRC
*** コンスセルとリストとnil                                      :わからん:
nil は空のリスト．コンスセルではない．
nilがリストとして振る舞えるとべんりなので，(car nil)も(cdr nil)もnilを返すように定義されている．
空のリストという意味合いを強調したいなら，()と書くこともできる．

ただし，nil と (nil) は別物．
- nil の car にはなにもないので ，(car nil) は「無」を表す．
- (nil) は 「nil」 という値．

nil はシンボルであるが，どんな数も設定できない．
nil を評価すると必ず nil になってしまう．

#+BEGIN_SRC elisp
  ;;; null かどうか
  (null ())                               ; => t
  (null 1)                                ; => nil
  (null '1)                               ; => nil
  (null nil)                              ; => t
  (null 'nil)                             ; => t
  nil                                     ; => nil
  'nil                                    ; => nil
  (null '(nil))                           ; => nil
  '(nil)                                  ; => (nil)
  '(1)                                    ; => (1)

  ;;; コンスセルかどうか
  (consp nil)                             ; => nil
  (consp '(1 . 2))                        ; => t
  (consp '(1 2))                          ; => t
  (consp '(1 nil))                        ; => t
  (consp '(nil nil))                      ; => t
  (consp '(1))                            ; => t
  (cdr '(1))                              ; => nil
  (car '(1))                              ; => 1

  ;;; リストかどうか
  (listp nil)                             ; => t
  (listp '(1 . 2))                        ; => t
  (listp '(1 2))                          ; => t
  (listp '(1))                            ; => t

  ;;; アトム（コンスセル以外）かどうか
  (atom nil)                              ; => t
  (atom '(1 . 2))                         ; => nil
  (atom '(1 2))                           ; => nil
  (atom 1)                                ; => t
  (atom '(1))                             ; => nil
  (atom "foo")                            ; => t

  ;;; シンボルかどうか
  (symbolp nil)                           ; => t
  (symbolp "foo")                         ; => nil
  (setq a 1)                              ; => 1
  a                                       ; => 1
  (symbolp a)                             ; => nil
  (symbolp "a")                           ; => nil
  (symbolp 'a)                            ; => t
  (symbolp 'setq)                         ; => t
  (symbolp '1)                            ; => nil
#+END_SRC
*** ベクタ
**** ベクタがリストより優れている点は？
アクセスの早さ，要素の「変更」の容易さ
配列の一種で，データが横一列に並んでいる．
**** ベクタがリストに劣っている点は？
要素の「追加」ができない点

#+BEGIN_SRC elisp
  ;;; ベクタを作る方法
  [foo bar baz]                           ; => [foo bar baz]
  (vector 'foo 'bar 'baz)                 ; => [foo bar baz]

  ;;; [] は評価されない
  [(+ 1 1) 2]                             ; => [(+ 1 1) 2]
  (vector (+ 1 1) 2)                      ; => [2 2]

  ;;; ベクタの要素にアクセスする
  (aref [3 6 9 ] 1)                       ; => 6
  (elt [3 6 9 ] 1)                        ; => 6

  ;;; ベクタの要素を変更する
  (setq v [3 6 9])                        ; => [3 6 9]
  (aset v 2 999)                          ; => 999
#+END_SRC
*** 配列としての文字列
文字列も配列なので，ベクタと同じようにアクセスできる．
書く要素は，文字コードを表す数値．
** 同一性と同値性
*** 2つの「同じ」
- 同一性: 唯一の場合
- 同値性: 2つのモノの比較対象がみな等しい場合
*** 同値比較 equal
#+BEGIN_SRC elisp
  (equal 1 1)                             ; => t
  (equal 1 2)                             ; => nil
  (equal 'foo 'foo)                       ; => t
  (equal ?a ?a)                           ; => t
  (equal 1.0 1.0)                         ; => t
  (equal "s" "s")                         ; => t
  (equal '(1 . 2) '(1 . 2))               ; => t

  (setq obj '(1 (2)))                     ; => (1 (2))
  (equal obj obj)                         ; => t
  (equal obj '(1 (2)))                    ; => t

#+END_SRC
*** 同一比較 eq
シーケンスは，同値なオブジェクトを量産できるので，同値なシーケンスは同一ではない．
#+BEGIN_SRC elisp
  (eq 1 1)                                ; => t
  (eq 1 2)                                ; => nil
  (eq 'foo 'foo)                          ; => t
  (eq ?a ?a)                              ; => t
  (eq 1.0 1.0)                            ; => nil
  (eq "s" "s")                            ; => nil
  (eq '(1 . 2) '(1 . 2))                  ; => nil
  (eq '(1 (2)) '(1 (2)))                  ; => nil

  (setq obj '(1 (2)))
  (eq obj obj)                            ; => t
  (eq obj '(1 (2)))                       ; => nil
#+END_SRC
** 条件分岐
when とか unless とか if とか言ってるけど，
結局，全部 cond でできる．
*** 真偽値
真はt, 偽はnil．
elisp の予約語はこれだけ．
**** 真偽反転 not
#+BEGIN_SRC elisp
  ;;; t の否定
  (not t)                                 ; => nil

  ;;; nil の否定
  (not nil)                               ; => t

  ;;; 0 はnilとして機能しないので注意．偽はnilのみ．
  (not 0)                                 ; => nil
#+END_SRC
*** 条件付き実行 when, unless
#+BEGIN_SRC elisp
  ;;; when の中が実行される例
  (let (msg)
    (when (= 0 (% 6 2))
      ;; ここには複数のフォームを置くことができる
      (setq msg "6 は偶数です"))
    msg)                                  ; => "6 は偶数です"

  ;;; when の中が実行されない例
  (let (msg)
    (when (= 1 (% 6 2))
      (setq msg "6 は奇数です"))
    msg)                                  ; => nil

  ;;; when の対義語は unless
  (let (msg)
    (unless (= 1 (% 6 2))
      (setq msg "6は奇数ではありません"))
    msg)                                  ; => "6は奇数ではありません"
#+END_SRC

*** 条件分岐 if
**** いびつな構造に注意
if は，条件を満たした時に真フォームが実行され，満たさない時に偽フォームが実行される．
真フォームは一つしか置けないが，偽フォームは複数置くことができる．
両者のインデントの深さに注意．
偽フォームの前にelseは無い．
#+BEGIN_SRC elisp
  ;;; 単純な if 式
  (if (zerop (% 5 2))
      "6 は偶数"                           ;真フォーム
    ;;  偽フォームは複数置ける．インデントが浅い．elseはない
    "6 は奇数"
    "6 は 2 で割ると余りが 1 になる")     ; => "6 は 2 で割ると余りが 1 になる"


  ;;; 偽フォームは省略できる
  (if (= 1 (% 6 2))
      "6 は偶数")                         ; => nil

  ;;; ネストした if 式
  (if (zerop (% 10 4))
      "10 は 4 の倍数"
    (if (zerop (% 10 2))
        "10 は偶数"
      "10 は奇数"))                       ; => "10 は偶数"
#+END_SRC
*** 複数の式をひとまとめにする progn（欠点あり）　
if の真フォームとして複数のフォームを置きたい時，progn にまとめ役をやってもらう．
**** 3種類のprogn
***** 普通のprogn/ 最後に評価したフォーム返す
#+BEGIN_SRC elisp
  (progn
    1
    2)                                    ; => 2
#+END_SRC
***** prog1/ 最初のフォームを返す
不思議なインデントだなぁ
#+BEGIN_SRC elisp
  (prog1
      1
    2)                                    ; => 1
#+END_SRC
***** prog2/ 2番目のフォームを返す
#+BEGIN_SRC elisp
  (prog2
      1
      2)                                  ; => 2
#+END_SRC
**** ifとの連携（かっこ悪いので非推奨）
#+BEGIN_SRC elisp
  (let (a b)
    (if (= 1 1)
        (progn                            ;真フォーム
          (setq a 2)                      ;ここのインデントが偽フォームと揃っていない
          (setq b 3))                     ;ここのインデントが偽フォームと揃っていない
      (setq a 10)                         ;偽フォーム
      (setq b 20))                        ;偽フォーム
    (list a b))                           ; => (2 3)
#+END_SRC
*** cond を使ってすっきり書く
#+BEGIN_SRC elisp
  ;;; if + progn だとインデントが揃わない
  (let (a b)
    (if (= 1 1)
        (progn
          (setq a 2)
          (setq b 3))
      (setq a 10)
      (setq b 20))
    (list a b))                           ; => (2 3)

  ;;; cond を使ってスッキリ書こう
  (let (a b)
    (cond ((= 1 1)
           (setq a 2)
           (setq b 3))
          (t
           (setq a 10)
           (setq b 20)))
    (list a b))                           ; => (2 3)
#+END_SRC
*** 多重条件分岐 cond もネストできる
#+BEGIN_SRC elisp
  ;;; ネストしたif
  (if (zerop (% 10 4))
      "10 は 4 の倍数"
    (if (zerop (% 10 2))
        "10 は偶数"
      "10 は奇数"))                   ; => "10 は偶数"

  ;;; cond で書いてみる
  (cond ((zerop (% 10 4))
         "10 は 4 の倍数")
         ((zerop (% 10 2))
             "10 は偶数")
         (t
          "10 は奇数"))                   ; => "10 は偶数"
#+END_SRC
*** 論理式 or と and
or や and は関数ではなく，スペシャルフォーム．
なので，真偽が確定するまではフォームを評価していくが，確定した時点で以後のフォームは無視する．

#+BEGIN_SRC elisp
  ;;; and
  (and t t)                               ; => t
  (and nil t)                             ; => nil


  ;;; or
  (or nil nil)                            ; => nil
  (or nil t)                              ; => t
  (or t nil)                              ; => t

  ;;; or は論理値が確定した時点で後のフォームは評価しない
  (or 1 2)                                ; => 1
  (or 1 2 3)                              ; => 1
  ;;; and との挙動の違いに注意
  (and 1 2)                               ; => 2
  (if 1 2)                                ; => 2
  (and 1 2 3)                             ; => 3

  ;;; ド・モルガンの法則
  ;;;  and not not は not or と同じこと
  (not t)                                 ; => nil
  (not nil)                               ; => t
  (and (not t) (not nil))                 ; => nil
  ;;; not一つで表現すると
  (not (or t nil))                        ; => nil

  ;;; or not not は not and と同じこと
  (or (not t) (not nil))                  ; => t
  (not (and t nil))                       ; => t
#+END_SRC
** ループ
*** 条件によるループ while （ただし，使うべき状況はただ1つ）
while を使うべき状況は，カーソル移動を実装するときのみ．
ループしたくなったら，実装の前に，以下の典型的パターンに当てはめ，マクロや関数で処理できないかを考えるべき．
その方がLisp的．
- リストの各々に同じ処理をして，その結果からなるリストを返す
- リストから条件を満たす要素を見つける
- 1 から 10 まで繰り返し処理する
#+BEGIN_SRC elisp
  ;;; 0~2 のループ
  (let ((i 0) result)
    (while (< i 5)
      (setq result (cons i result))       ; result の先頭に i をつなげていく
      (setq i (1+ i)))                    ; インクリメント
    result)                              ; => (4 3 2 1 0)

  ;;; let の書き方 -------------------------------------------------------
  ;(let x 2)                               ; こうではない
  ;(let (x 2))                             ; こうでもない
  (let ((x 2))
    x)                           ; => 2

  ;;; 動作チェック
  (let ((x 2)
        (y 3))
    x
    y)                                    ; => 3

  ;;; result はただの宣言なので nil が返る
  (let ((i 0) result))                    ; => nil

#+END_SRC
*** リストの各要素のループ/ while ではなく dolist で
#+BEGIN_SRC elisp
  ;;; while だとこうなる
  (let ((lst '(1 2 3)) result)
    (while (car lst)                      ;lst の car が nil でない間，ループする
      (setq result (cons (car lst) result))
      (setq lst (cdr lst)))               ;lst は要素一つぶん短くなる
    (cons 'finished result))                             ; => (finished 3 2 1)

  ;;; dolist で書きましょう
  (let (result)
    (dolist (x '(1 2 3))
      (setq result (cons x result)))      ; => nil
    (cons 'finished result))                  ; => (finished 3 2 1)

  ;;; 返り値を指定することもできる
  (let (result)
    (dolist (x '(1 2 3) (cons 'これが返り値にくっつく result))
      (setq result (cons x result))))     ; => (これが返り値にくっつく 3 2 1)
#+END_SRC
** FUTURE 正規表現
*** 正規表現とは
*** 基本的なメタ文字
*** バックスラッシュ付きのメタ文字
*** 正規表現の例
*** 正規表現と文字列表現
*** 正規表現にマッチするか確かめる関数
*** 正規表現に一致した文字列を得る
*** M-x re-builder で正規表現を対話的に組み立てる
** 関数定義
*** 関数定義の方法 defun
elispでプログラミングするということは，関数を定義することに他ならない！！！
elispプログラムを使うということは，関数を呼び出すこと！！！
#+BEGIN_SRC elisp
  ;;; ただのformat文
  (format "身長%.2fm 体重%.1fkg BMI%.1f" 1.63 60.0 (/ 60.0 1.63 1.63)) ; => "身長1.63m 体重60.0kg BMI22.6"

  ;;; 関数化する
  (defun bmi-string (height weight)
    (format "身長%.2fm 体重%.1fkg BMI%.1f" height weight (/ weight height height))) ; => bmi-string

  ;;; 使ってみる
  (bmi-string 1.75 65.0)                  ; => "身長1.75m 体重65.0kg BMI21.2"
#+END_SRC

#+RESULTS:
: 身長1.75m 体重65.0kg BMI21.2

*** 関数定義の意義 もう1段階関数化する
**** 部品としてbmi関数を作る
#+BEGIN_SRC elisp

  (defun bmi (height weight)
    "体格指数 = 体重 / （身長 * 身長）"   ; ここは関数の説明文字列
    (/ weight height height))             ; => bmi

  ;; bmi-string 関数を bmi 関数を使って書き直す
  (defun bmi-string (height weight)
    (format "身長%.2fm 体重%.1fkg BMI%.1f" height weight (/ weight height height))) ; => bmi-string

  ;;; 使ってみる
  (bmi 1.63 60 )                          ; => 22.582709172343712
  (bmi-string 1.63 60)                    ; => "身長1.63m 体重60.0kg BMI22.6"
#+END_SRC

#+RESULTS:
: 身長1.63m 体重60.0kg BMI22.6

**** 肥満化どうかを返す関数を作る
#+BEGIN_SRC elisp
  (defun bmi-fat-p (height weight)
    "肥満ならばtを返す"
    (<= 25 (bmi height weight)))          ; => bmi-fat-p

  ;;; 使ってみる
  (bmi-fat-p 1.75 65)                     ; => nil
  (bmi-fat-p 1.75 78)                     ; => t
#+END_SRC

#+RESULTS:

**** 教訓: 関数化せよ
コメントではなく，極力関数化せよ．
*** 省略可能引数 &optional
#+BEGIN_SRC elisp
  ;;; aは必須引数
  ;;; bとcは省略可能引数
  (defun optional-arg (a &optional b c)
    (setq c (or c 20))                    ; or を使ってデフォルト引数もどき
    (list a b c))                         ; => optional-arg

  ;;; 使ってみる
  (optional-arg 'apple nil nil)           ; => (apple nil 20)
  (optional-arg nil 30 'orange)           ; => (nil 30 orange)
#+END_SRC
*** 可変長引数 &rest
**** 可変長引数をとる関数の例
- 四則演算
- format関数
**** &rest で指定する
#+BEGIN_SRC elisp
  (defun rest-arg (a &optional b &rest c)
    (list a b c))                         ; => rest-arg

  ;;; 使ってみる
  (rest-arg 1)                            ; => (1 nil nil)
  (rest-arg 1 2)                          ; => (1 2 nil)
  (rest-arg 1 2 3)                        ; => (1 2 (3))
  (rest-arg 1 2 3 4 5 6)                  ; => (1 2 (3 4 5 6))
  (caaddr (rest-arg 1 2 3 4 5 6))         ; => 3
#+END_SRC
*** 無名関数 重要なので詳しくは後で
関数そのものが返る．
#+BEGIN_SRC elisp
  (lambda a b c)                          ; => (lambda a b c)
#+END_SRC

** コマンド定義
コマンドとは，関数の一種．
定義の最初にinteractiveが置いてあるだけ．
*** はじめての自作コマンド/ message を使って
#+BEGIN_SRC elisp
  (defun hello-world ()
    (interactive)
    (message "%s" "Hello, world!"))       ; => hello-world

  ;;; M-x hello-world で実行してみよう
#+END_SRC

#+RESULTS:
: hello-world

*** interactive 宣言
引数に文字列をとる．S式をとることもある．
#+BEGIN_SRC elisp
  (defun bmi (height weight)
    "体格指数 = 体重 / (身長 * 身長)"
    (/ weight height height))             ; => bmi

  (defun bmi-show (height weight)
    (interactive "n身長 (m): \nn体重 (kg): ")
    (message "身長%.2fm 体重%.1fkg BMI%.1f" height weight (bmi height weight))) ; => bmi-show
#+END_SRC

#+RESULTS:
: bmi-show

M-x bmi-show をやってみよう!

*** 練習問題
#+BEGIN_SRC elisp
  (defun testint-b (arg) (interactive "b既存バッファ: ") (message "%S" arg))
  (defun testint-B (arg) (interactive "Bバッファ: ") (message "%S" arg)) ;上との違いがわからない
  (defun testint-D (arg) (interactive "Dディレクトリ: ") (message "%S" arg))
  (defun testint-f (arg) (interactive "f既存ファイル名: ") (message "%S" arg))
  (defun testint-F (arg) (interactive "Fファイル名: ") (message "%S" arg))
  (defun testint-n (arg) (interactive "n数値: ") (message "%S" arg))
  (defun testint-s (arg) (interactive "s文字列: ") (message "%S" arg))
#+END_SRC

*** キーボードマクロをコマンドとして使えるようにする defvar
せっかく定義したキーボードマクロ．再利用したい．
しかし M-x name-last-kbd-macro は永続的でない．
ファイルに保存すれば繰り返し使える．

defvar は変数の宣言と初期化を一挙動で行える．
その変数が既に使われている場合は何もしないので安全．
#+BEGIN_SRC elisp
  (defvar kmacro-save-file "~/.emacs.d/inits/00_kmacro-save.el" ;defvarで宣言と初期化を一挙動で
    "キーボードマクロを保存するファイル")

  (defun kmacro-save (symbol)
    (interactive "SName for last kbd macro: ") ;コマンド名を入力
    (name-last-kbd-macro symbol)          ;最後に定義したマクロに名前をつける
    ;; kmacro-save-file を裏で開いて
    (with-current-buffer (find-file-noselect kmacro-save-file)
      (goto-char (point-max))             ;ファイルの末尾に
      (insert-kbd-macro symbol)           ;マクロの定義を挿入して
      (basic-save-buffer)))               ;保存する
#+END_SRC

#+RESULTS:
: kmacro-save

** ロード
*** Lisp ファイルを置いているディレクトリを指定する add-to-list
add-to-list関数の中身！
#+BEGIN_SRC elisp
  ;;(setq load-path (cons "~/.emacs.d" load-path))

  ;;; いつもこんなの書いてられない！
  ;; (add-to-list 'load-path "~/.emacs.d")

#+END_SRC
でも，両者は厳密には同じではない．
add-to-list の方が優れている．重複が生じないから．
#+BEGIN_SRC elisp
  (setq list '(1))                        ; => (1)

  ;;; 値を追加してみる
  (add-to-list 'list 2)                   ; => (2 1)


  ;;; 既にある値を追加しても何も起こらないので安全
  (add-to-list 'list 2)                   ; => (2 1)

  ;;; 一方，cons と setq の組み合わせでは重複して追加されてしまう
  (setq list (cons 2 list))                ; => (2 2 1)
#+END_SRC
*** Lisp ファイルをロードする load （重複ロードするため，あまり使われない）
読み込み方は3つ．
ファイル名の書き方は3通り．
(load "file.el") と(load "file.elc") の挙動はそのまま．
拡張子なしで (load "file") とすると，.elc が優先的に読み込まれる．
*** Lisp ファイルを1度だけロードする require
file.el を読み込むためには拡張子をとって
(require 'file) とする．

ただし，require が機能するためには，パッケージソース側に，(provide 'file) と書かれていないといけない．
普通はみんな書いてあるので大丈夫だが，もしない場合は load で読み込むしかない．
*** 練習問題
#+BEGIN_SRC elisp :tangle example/load-test.el
  (defvar ltcount 0)
  (setq ltcount (1+ ltcount))
  (provide 'load-test)
#+END_SRC

#+BEGIN_SRC elisp
  (add-to-list 'load-path "/Users/ahayashi/Documents/GitHub/study/ELISP/example/")
  (load "load-test")                      ; => t
  ;;; load を使うと評価するたびに数字が大きくなっていってしまう！！
  ltcount                                 ; => 38


  (unload-feature 'load-test)
  (require 'load-test)


#+END_SRC
** バイトコンパイル
*** バイトコンパイルとは
他の言語のような機械語への翻訳ではなく，マシンに依存しないバイトコードという形式に翻訳すること．
Linux でバイトコンパイルしたファイルは，Windows でも動くようになる．
また，マクロは基本の関数に展開されるので実行速度が速くなる．
*** Lisp ファイルをバイトコンパイルする
M-x byte-recompile-directory
*** 保存時に自動的にバイトコンパイル
auto-async-byte-compile.el
利点
- バックグラインドでコンパイルしてくれる
- ロードパスを引き継ぐので設定が楽
- require 漏れに対して警告してくれる
** スタイル
*** コメントの付け方
セミコロン1〜2つのコメントはできるだけ使わないように．
関数自体の名前をわかりやすくすることを心がける．
- セミコロン4つ: プログラム全体の構造の見出し，大見出し
- セミコロン3つ: プログラムや関数の原理などの説明，小見出し
- セミコロン2つ: 直後のコードに対する説明
- セミコロン1つ: その暁についての説明
*** インデント
自動調整方法
- C-M-aで関数の先頭に
- C-M-qでインデントを自動調整

* バッファ・ファイル
バッファは，Emacs ではテキストを入れる器として重要．
* ウィンドウ
* 様々な関数
* Emacs Lisp 応用
* Common Lisp マクロ
* テスト・デバッグ
* Emacs の挙動を変更する
* モード作成
* 外部プログラムとの協調
* 非同期プログラミング
* anything.el で簡単アプリケーション作成
*
