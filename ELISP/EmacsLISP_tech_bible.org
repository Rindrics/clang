#+TITLE: Emacs LISP テクニックバイブル
#+STARTUP: overview
* 逆引き目次
** 数値
** 文字列
** リスト
** オブジェクト
** 制御構造
** 関数
** コマンド
** バッファ
** ファイル
** ミニバッファ
** ウィンドウ
** プロセス
** anything.el
** その他
* Emacs Lisp 始めの一歩
** ようこそ Emacs Lisp の世界へ
*** Emacs Lisp とは
*** Emacs Lisp 習得のメリット・目的
本書のステップ
- elisp の基礎を知る
- バッファとウィンドウによる表現方法を学ぶ
- 関数をすこしずつ覚えていく
- オンラインヘルプの使い方を学ぶ
- 応用的な知識をつける
- Commpn Lisp マクロを使ってエレガントに elisp を書く
- テスト・デバッグの方法を知る
- 実際に elisp で書いてみる
** Emacs Lisp を書くための設定
*** auto-install.el をインストールする
*** 必須ファイルのインストール
- open-junk-file.el
- lispxmp.el
- paredit.el
- auto-async-byte-compile.el
*** 設定
p.31の設定を
[[file:~/Documents/GitHub/dotfiles/.emacs.d/inits/40_EmacsLisp.el::(require%20'lispxmp)%20;;%20Enable%20help%20in%20emacs-lisp-mode][設定ファイル]]に書いたほうがいいかも？
** 文法
*** 括弧だらけの文法
*** 構成要素
*** コメント
** Emacs Lisp プログラム実行の仕組み
*** フォーム
S式の2面性．
- データ
- プログラム（フォーム）
フォームを評価することで，プログラムを実行する
*** 評価とは
フォームを実行して結果を得ること．
*** 関数呼び出し
*** 評価の具体例
#+BEGIN_SRC elisp
  (+ 23 (+ 6 7))                          ; => 36
#+END_SRC
*** クォート
リストやシンボルは，評価されると別物になる．
しかし，これらをデータとしてそのまま関数に渡したい局面がある．
そんなとき，評価を抑制するのがクォート．
#+BEGIN_SRC elisp
  (+ 1 3)                                 ; => 4
  emacs-major-version                     ; => 25

  ;;; クォートの例
  '(+ 1 3)                                ; => (+ 1 3)

  ;;; スペルアウト
  (quote (+ 1 3))                         ; => (+ 1 3)

  ;;; リストやシンボルを関数に渡す例
  ;;(length (+ 1 3))                      ; wrong-type-argument sequencep 4 となって実行できなかった．
  (length '(+ 1 3))                       ; => 3
  (symbol-value 'emacs-major-version)     ; => 25
#+END_SRC
*** 明確性
括弧のおかげで評価の優先順位が明確．
** 評価の方法
*** いろいろな評価の方法
*** 入力補完                                                 :知らなかった:
関数名，変数名を途中まで入力しておき，
M-Tab
で補完．
#+BEGIN_SRC elisp
  ;;; bu-f-na と入力して M-Tab すると
  buffer-file-name                        ;となる．
#+END_SRC
*** コマンド呼び出し
実は，キーを押すごとにも，コマンドが実行されている．
*** ミニバッファにフォームを入力して評価する
M-:
とすると，
M-x eval-expression コマンドが実行されたことになり，ミニバッファに入力したフォームを評価できる．
*** 対話的に評価する
Emacs 終了後に結果が残らないのでおすすめしない．
**** *scratch* バッファ
フォームを入力した後，C-j するとすぐ下に結果が出るらしい．
自分の環境では出なかった．
**** M-x ielm
*** メモファイルにてフォームを評価し，結果を書き込む         :知らなかった:
この方法なら，過去の知的労働の結果を，grep検索するなどして再利用できる．
#+BEGIN_SRC elisp
  (+ 1 3); フォームを書いて，行末で M-; M-; とすると，自動的に矢印が挿入される！！！
  (+ 1 3)                                 ; => 4
  (+ 2 4)                                 ; => 6
  (* 100 3)                               ; => 300
  ;;; C-c C-d とすると，バッファ全体のフォームを評価する！！
  ;;; すごすぎる
#+END_SRC
** 数値
*** 基本的な演算
#+BEGIN_SRC elisp
  ;;; 整数での除算
  (/ 10 3)                                ; => 3

  ;;; 小数での除算
  (/ 10.0 3)                              ; => 3.3333333333333335

  ;;; 剰余
  (% 12 5)                                ; => 2

  ;;; 1だけ足す
  (1+ 3)                                  ; => 4

  ;;; 1だけ引く
  (1- 7)                                  ; => 6

  ;;; (3 + 4) * (10 - 7)
  ;;; 乗算記号の位置に注意！！
  (* (+ 3 4) (- 10 7))                    ; => 21

  ;;; 2 ^ 8
  (expt 2 8)                              ; => 256
#+END_SRC
*** 比較                                                             :注意:
等号の否定が /= なのが間違えそうで危うい
#+BEGIN_SRC elisp
  ;;; 等しい
  (= 10 10)                               ; => t
  (= 10 9)                                ; => nil

  ;;; identical ではなく，equal なのだろう．
  (= 10 10.0)                             ; => t

  ;;; 等しくない
  (/= 10 10)                              ; => nil
  (/= 10 9)                               ; => t

  ;;; 大小比較
  (< 9 10)                                ; => t
  (<= 9 10)                               ; => t
  (> 9 10)                                ; => nil
  (>= 9 10)                               ; => nil

#+END_SRC
*** 整数の範囲
emacs 25 の整数範囲はどうなってるんだろう
#+BEGIN_SRC elisp
  emacs-version                           ; => "25.3.1"

  ;;; 最小値?
  (expt -2 29)                           ; => -536870912

  ;;; 最大値?
  536870911                               ; => 536870911

  ;;; 自分の環境では桁溢れしていない　
  (1- (expt 2 29))                        ; => 536870911
  (expt 2 29)                             ; => 536870912
#+END_SRC
*** 浮動小数点数
#+BEGIN_SRC elisp
  ;;; 科学的記数法
  1e3                                     ; => 1000.0
  1.23e3                                  ; => 1230.0

  ;;; 除算結果を小数で出力
  (/ 10.0 3)                              ; => 3.3333333333333335

  ;;; 整数を浮動小数点数に
  (float 10)                              ; => 10.0

  ;;; 浮動小数点数なら桁溢れせず扱える
  (expt 2 29)                             ; => 536870912
  (expt 2.0 29)                           ; => 536870912.0
  (expt 2.0 54)                           ; => 18014398509481984.0
  (float-time)                            ; => 1545068837.813383

#+END_SRC
** 文字列
*** 文字列の例
#+BEGIN_SRC elisp
  "abc"                                   ; => "abc"

  "
  first
  second"                                 ; => "\nfirst\nsecond"

  ;;; ヒアドキュメントもどき．上の出力と比べよ．
  "\
  first
  second"                                 ; => "first\nsecond"

#+END_SRC
*** バックスラッシュ記法
特殊な文字を表現するために使う．
例えば，\t はタブ記号．

その他は (info "(elisp)CharacterType") を評価せよ．

Meta の評価結果が直感に反する．
#+BEGIN_SRC elisp
  "Ctrl-A = \C-a"                         ; => "Ctrl-A = "
  "Meta-x = \M-x"                         ; => "Meta-x = \370"
  "newline\n"                             ; => "newline\n"
  "double-quote = \""                     ; => "double-quote = \""
  "backslash = \\"                        ; => "backslash = \\"
#+END_SRC

*** 文字
文字そのものの実態は整数．
#+BEGIN_SRC elisp
  ?a                                      ; => 97

  ;;; ヌル文字
  ?\0                                     ; => 0

  ?\C-a                                   ; => 1

  ?あ                                     ; => 12354
  ?\x3042                                 ; => 12354
  "?\x3042"                               ; => "?あ"

#+END_SRC
*** 書式文字列
#+BEGIN_SRC elisp
  (format "%s" "foo")                     ; => "foo"

  ;;; 整数は %s または%d
  (format "%s" 1)                         ; => "1"

  ;;; 右寄せ，左寄せ，0詰め
  (format "[%2d] [%-2d] [%02d]" 3 3 3)    ; => "[ 3] [3 ] [03]"

  ;;; %c は文字を文字列に変換する
  (format "文字から文字列へ: %c" ?a)      ; => "文字から文字列へ: a"

  ;;; %% は % そのものを表す
  (format "%d 円の商品の消費税は，
  税率 %d%% で %d 円です．" 500 8 (* 500 0.08)) ; => "500 円の商品の消費税は，\n税率 8% で 40 円です．"
#+END_SRC

* Emacs Lisp の基礎
* バッファ・ファイル
* ウィンドウ
* 様々な関数
* Emacs Lisp 応用
* Common Lisp マクロ
* テスト・デバッグ
* Emacs の挙動を変更する
* モード作成
* 外部プログラムとの協調
* 非同期プログラミング
* anything.el で簡単アプリケーション作成

