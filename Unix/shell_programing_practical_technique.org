#+TITLE: シェルプログラミング実用テクニック
#+TAGS: 知らなかった
#+STARTUP: overview
#+PROPERTY: header-args :results output
* 準備運動
** UNIXとは何者なのか？
パイプを契機として，UNIXがUNIXになっていった
研究所生まれの，合理性の塊．これを使いこなす者は，合理的なデータを渡して，お膳立てしないといけない．
UNIXと対極の位置にあるのが，本書で言う「もう1つの選択肢」．Officeに代表されるようなガラパゴス巨大ソフト．
*** McIlroyによるパイプの提案
1969年，ベル研でUNIXの開発が始まってまもない頃．
McIlroyがパイプ機能を提案．
パイプは提案から実装まで3年放置されたが，実装後すぐに，誰もがその重要性に気づいた．
古いコマンドは，パイプと併用すると便利なように書き直された．
パイプをどんどん使え！！！！
*** grep, sedの誕生
edというエディタのメモリ不足を契機として，grepが開発された．
grepは1行ごとに動作するので，ほとんどメモリを必要としない．
sed(stream editor)も，メモリをほとんど必要としない．
両者をパイプでつなぐと，あら便利．
*** 「ソフトウェアツール」という言葉の誕生
「コマンドは単機能で作るべき」という考え方がベル研内で生まれ，多くの単機能コマンドが作られた．
lexとyaccというツールをつくるツールからawkが生まれた
*** 考えられた「もう1つの選択肢」
こちらは，Officeや統合開発環境などの大きいソフトウェアのこと．現在のメジャー．


しかし，この道にいっていたら，UNIXは開発が遅れていたか，もしくは誕生していなかった．
UNIXの誕生は，合理性追求の賜物である．

合理性？
「データがすべてに優先する」という考え方．（人月の神話 原著p.102）
我々が使っているプログラムは，データ構造に引きずられている．
データが適切なら，アルゴリズムも自明．データが汚いから，プログラムも肥大化し，汚く，遅くなる．

XMLも合理的とは言えない．
タグだらけにすると，それを解釈するコマンドと解釈しないコマンドの接続に不都合が出るから．

UNIXが生まれたのは「研究所」なので，汚いデータを渡してくる者はいなかった．
そこで，コマンドの設計もズボラで，親切ではない．
なぜ，親切なOfficeなどのが誕生したか？
営利目的だから，便利なものを売るのが優先される．
汚いデータも飲み込む．
*** GancarzのUNIX哲学
「UNIXという考え方」にまとめられている．
ただし，本書に書いてあることを自然にできないと，理解できないだろう．
** OSや環境について
*** 想定する利用シーン
*** Ubuntu 14.04 LTS
** 基本操作
fish環境では多少コマンドが違ってくるので，別途調べる必要がある．
*** 端末とシェルを開く
- 端末: コンピュータに接続してデータをやり取りするための機械
- シェル: 端末から文字列の入力を受けて，OS本体（カーネル）に渡すためのソフトウェア
*** シェルにコマンドを入力する
*** manを使う
manで見ることができるマニュアルには，章番号がある．
TR(1)とは，trのマニュアルは第1章に書いてあることを意味する．
例えば，printfには，シェルコマンドのprintf(1)と，print(3)がある．
*** ファイルやコマンドの出力を眺める
*** ディレクトリを理解する
*** ディレクトリを移動する
*** ワイルドカードで一度に複数ファイルを指定する
**** ワイルドカードの動作
#+BEGIN_SRC sh
ls
#+END_SRC

#+RESULTS:
| Unix_for_OSX.org                          |
| Unix_for_OSX.org~                         |
| dir                                       |
| shell_programing_practical_technique.org  |
| shell_programing_practical_technique.org~ |
| test.docx                                 |

#+BEGIN_SRC sh
ls *.org
#+END_SRC

#+RESULTS:
| Unix_for_OSX.org                         |
| shell_programing_practical_technique.org |

#+BEGIN_SRC sh
ls -l *org
#+END_SRC

#+RESULTS:
| -rw-r--r-- | 1 | ahayashi | staff | 61698 | Dec |  8 | 18:18 | Unix_for_OSX.org                         |
| -rw-r--r-- | 1 | ahayashi | staff |  4610 | Dec | 10 | 21:58 | shell_programing_practical_technique.org |
**** grepと一緒に使う
#+BEGIN_SRC sh
grep パイプ *org
#+END_SRC

#+RESULTS:
| shell_programing_practical_technique.org:パイプを契機として，UNIXがUNIXになっていった                                        |                           |
| shell_programing_practical_technique.org:***                                                                                 | McIlroyによるパイプの提案 |
| shell_programing_practical_technique.org:McIlroyがパイプ機能を提案．                                                         |                           |
| shell_programing_practical_technique.org:パイプは提案から実装まで3年放置されたが，実装後すぐに，誰もがその重要性に気づいた． |                           |
| shell_programing_practical_technique.org:古いコマンドは，パイプと併用すると便利なように書き直された．                        |                           |
| shell_programing_practical_technique.org:パイプをどんどん使え！！！！                                                        |                           |
| shell_programing_practical_technique.org:両者をパイプでつなぐと，あら便利．                                                  |                           |
| shell_programing_practical_technique.org:***                                                                                 | パイプでコマンドをつなぐ  |

*** パイプでコマンドをつなぐ
#+BEGIN_SRC sh
grep grep *org
#+END_SRC

#+RESULTS:
| Unix_for_OSX.org:ps                                                                                   | -ax              |                                                                                                    |   | grep | Word |   |   |         |   |   |      |   |   |      |   |   |   |
| Unix_for_OSX.org:                                                                                     |                  | 35237                                                                                              |   |      | ??   |   |   | 0:00.00 |   |   | grep |   |   | Word |   |   |   |
| Unix_for_OSX.org:-                                                                                    | grep:            | 複数のファイルの内容から，指定した「パターン」に当てはまるものを探し出す．メール検索などに使える． |   |      |      |   |   |         |   |   |      |   |   |      |   |   |   |
| shell_programing_practical_technique.org:***                                                          | grep,            | sedの誕生                                                                                          |   |      |      |   |   |         |   |   |      |   |   |      |   |   |   |
| shell_programing_practical_technique.org:edというエディタのメモリ不足を契機として，grepが開発された． |                  |                                                                                                    |   |      |      |   |   |         |   |   |      |   |   |      |   |   |   |
| shell_programing_practical_technique.org:grepは1行ごとに動作するので，ほとんどメモリを必要としない．  |                  |                                                                                                    |   |      |      |   |   |         |   |   |      |   |   |      |   |   |   |
| shell_programing_practical_technique.org:****                                                         | grepと一緒に使う |                                                                                                    |   |      |      |   |   |         |   |   |      |   |   |      |   |   |   |
| shell_programing_practical_technique.org:grep                                                         | パイプ           | *org                                                                                               |   |      |      |   |   |         |   |   |      |   |   |      |   |   |   |
ファイル名とマッチした行ではなく，ファイル名のリストだったとき，どうするか？
実際には，grepのオプションに-lをつければ済む．
しかし，sedとuniqをパイプで繋げば以下のように実現できる．
（本題からははずれるが，uniq を使う時は，事前にsortしておくこと cf. [[*%E6%96%8E%E8%97%A4%E3%81%95%E3%82%93%EF%BC%88%E5%90%8C%E9%9F%B3%E7%95%B0%E5%AD%97%EF%BC%89%E3%81%AE%E6%95%B0%E3%82%92%E6%95%B0%E3%81%88%E3%82%8B][斎藤さん（同音異字）の数を数える]]）．

#+BEGIN_SRC sh
grep grep *org | sed 's/:..*$//' | uniq
#+END_SRC

#+RESULTS:
| Unix_for_OSX.org                         |
| shell_programing_practical_technique.org |

**** *オプションを覚えるより，パイプでつなげ！！！！*
なぜか？
オプションを覚えても，できることが1つ増えるだけ（grepのオプションだけでも45個ある）．
しかしコマンドをパイプで繋げば，できることは指数関数的に増えていく．

*** シェルスクリプトを書いて実行する
流石に，コマンドを書き込んで保存したほうが楽．
*** ファイルを読み書きする
>を使えば，コマンドの出力をファイルに書き込める．
必然的に，">"は不等号としては使えない．
"<"を表すのは-lt．（less than）
">"を表すのは-gt?

シェルはとにかくスクリプトが短い！
ただ，文法的に汚く見えるということはある．
便利だが，汚い．
この汚さと付き合うのは，残念ながら宿命．
**** 入力リダイレクト
***** まずhogeに0と書き込む
#+BEGIN_SRC sh
echo 0 > hoge
cat hoge
#+END_SRC

#+RESULTS:
: 0
***** trで0を1に置換するが，それを入力リダイレクト記号で渡す．
#+BEGIN_SRC sh
tr '0' '1' < hoge
#+END_SRC

#+RESULTS:
: 1
***** ただし，パイプを使う方がいいかも．一度標準出力で確認できるから．
#+BEGIN_SRC sh
cat hoge | tr '0' '1'
#+END_SRC

#+RESULTS:
: 1
***** なぜかこれでも通る．
#+BEGIN_SRC sh
<hoge tr '0' '1'
#+END_SRC

#+RESULTS:
: 1
**** 標準エラー出力
エラーは専用の出力「標準エラー出力，2番」に出力される．
#+BEGIN_SRC sh
ls --unknownoption 0< / 1> ans 2> error
cat error
#+END_SRC

#+RESULTS:
| ls:    | illegal | option                                   | --    |    0 |
| usage: | ls      | [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] | [file | ...] |
**** ファイルの書き換え
Aをコマンドで処理してAに上書きしたくても，一度Bとして書き出し，diffをとって確認してからAとして保存しよう．
*** 出力を捨てる                                             :知らなかった:
捨て場所は，/dev/null，いわゆるデブヌル．
- ベンチマークを測定するとき
- エラーが大量に出ることがわかっているとき

*** 日本語と英語を切り替える（ロケール）
#+BEGIN_SRC sh
date
#+END_SRC

#+RESULTS:
: Tue Dec 11 01:13:58 JST 2018

#+BEGIN_SRC sh
locale
#+END_SRC

#+RESULTS:
| en_JP.UTF-8 |
| C           |
| C           |
| C           |
| C           |
| C           |
| C           |
| LC_ALL=     |
Cはデフォルトということ．
*** パーミッションを理解する
**** パーミッションを確認する
#+BEGIN_SRC sh
ls -l ~/
#+END_SRC

#+RESULTS:
| total       | 7200 |          |       |         |     |    |       |                     |         |        |                         |
| -rw-r--r--  |    1 | ahayashi | staff |       0 | May | 21 |  2018 | #test#              |         |        |                         |
| -rw-r--r--  |    1 | ahayashi | staff |     527 | May | 18 |  2018 | #test.org#          |         |        |                         |
| drwxr-xr-x  |    4 | ahayashi | staff |     128 | Nov | 25 | 06:42 | Applications        |         |        |                         |
| drwxr-xr-x  |   16 | ahayashi | staff |     512 | Oct | 11 | 23:01 | Calibre             | Library |        |                         |
| drwxrwxr-x@ |    3 | ahayashi | staff |      96 | Jun | 22 | 07:53 | Creative            | Cloud   | Files  |                         |
| drwxr-xr-x  |    2 | ahayashi | staff |      64 | Feb | 17 |  2018 | Databases           |         |        |                         |
| drwx------+ |    7 | ahayashi | staff |     224 | Dec |  2 | 06:24 | Desktop             |         |        |                         |
| drwx------+ |   29 | ahayashi | staff |     928 | Dec |  9 | 19:47 | Documents           |         |        |                         |
| drwx------+ |  141 | ahayashi | staff |    4512 | Dec |  8 | 20:01 | Downloads           |         |        |                         |
| drwx------@ |   34 | ahayashi | staff |    1088 | Dec |  4 | 22:59 | Dropbox             |         |        |                         |
| drwx------@ |   32 | ahayashi | staff |    1024 | Dec |  5 | 18:05 | Google              | Drive   |        |                         |
| drwxr-xr-x@ |    6 | ahayashi | staff |     192 | Nov | 17 |  2000 | LSD                 |         |        |                         |
| drwx------@ |   92 | ahayashi | staff |    2944 | Nov | 25 | 06:42 | Library             |         |        |                         |
| drwx------  |   19 | ahayashi | staff |     608 | Nov | 12 | 20:24 | Mail                |         |        |                         |
| drwx------+ |    8 | ahayashi | staff |     256 | Oct | 23 | 22:43 | Movies              |         |        |                         |
| drwx------+ |    7 | ahayashi | staff |     224 | Nov |  4 | 22:18 | Music               |         |        |                         |
| drwxr-xr-x  |    3 | ahayashi | staff |      96 | Nov | 12 | 20:24 | News                |         |        |                         |
| drwx------+ |   15 | ahayashi | staff |     480 | Oct | 23 | 22:43 | Pictures            |         |        |                         |
| drwxr-xr-x  |    6 | ahayashi | staff |     192 | Jan | 29 |  2018 | Pixa.pxlibrary      |         |        |                         |
| drwxr-xr-x+ |    5 | ahayashi | staff |     160 | Oct | 11 |  2017 | Public              |         |        |                         |
| -rw-r--r--  |    1 | ahayashi | staff |    2130 | Nov | 21 |  2017 | convertExcelToCsv.R |         |        |                         |
| drwxr-xr-x  |   39 | ahayashi | staff |    1248 | Feb | 14 |  2018 | fonts               |         |        |                         |
| drwxr-xr-x  |    4 | ahayashi | staff |     128 | Nov | 12 | 21:41 | gmail               |         |        |                         |
| drwxr-xr-x  |    3 | root     | staff |      96 | Jul | 31 | 15:54 | intel               |         |        |                         |
| drwxr-xr-x  |   24 | ahayashi | staff |     768 | Jul | 25 | 08:18 | junk                |         |        |                         |
| lrwxr-xr-x  |    1 | ahayashi | staff |      30 | Jul | 16 | 08:08 | mylibrary.bib       | ->      | Google | Drive/pdf/mylibrary.bib |
| -rw-r--r--  |    1 | ahayashi | staff |    5439 | Jul | 16 | 08:44 | mylibrary.bib~      |         |        |                         |
| -rw-r--r--  |    1 | ahayashi | staff | 3657593 | Jul | 16 | 06:22 | mylibrary2.bib~     |         |        |                         |
| drwxr-xr-x  |    2 | ahayashi | staff |      64 | Jul | 15 | 20:57 | org-demo            |         |        |                         |
| drwx------@ |    4 | ahayashi | staff |     128 | Nov | 23 |  2010 | shakespack-allidx   |         |        |                         |
| -rwxr--r--  |    1 | ahayashi | staff |     648 | Feb | 13 |  2018 | ssh-host-color      |         |        |                         |
| -rw-r--r--  |    1 | ahayashi | staff |     475 | May | 18 |  2018 | test.org            |         |        |                         |
| -rw-r--r--  |    1 | ahayashi | staff |     195 | Nov | 26 |  2017 | texput.log          |         |        |                         |
| drwxr-xr-x  |    2 | ahayashi | staff |      64 | Jun |  7 |  2018 | tmp                 |         |        |                         |
**** グループを確認する
#+BEGIN_SRC sh
groups ahayashi
#+END_SRC

#+RESULTS:
: staff com.apple.sharepoint.group.1 everyone localaccounts _appserverusr admin _appserveradm _lpadmin _appstore _lpoperator _developer _analyticsusers com.apple.access_ftp com.apple.access_screensharing-disabled com.apple.access_ssh-disabled

**** パーミッションの読み方
- 先頭のd: ディレクトリか，ファイルか．
- 次の3桁: 所有者のパーミッション
- 次の3桁: グループに属するユーザのパーミッション
- その次の3桁: 赤の他人のパーミッション

パーミッションの意味
- r: readable
- w: writable
- x: executable
**** スクリプトを書いてパーミッションを与える
***** 書く
#+BEGIN_SRC sh :tangle hoge.bash
#!/bin/bash
echo "hoge!"
#+END_SRC
***** 中を見る
#+BEGIN_SRC sh :results scalar
cat hoge.bash
#+END_SRC

#+RESULTS:
: #!/bin/bash
: echo "hoge!"
***** できたてだと，実行権限はまだない
#+BEGIN_SRC sh
ls -l hoge.bash
#+END_SRC

#+RESULTS:
: -rw-r--r--  1 ahayashi  staff  25 Dec 11 01:24 hoge.bash
***** 実行すると怒られる
#+BEGIN_SRC sh :results output
./hoge.bash 2> error
cat error
#+END_SRC

#+RESULTS:
: sh: line 1: ./hoge.bash: Permission denied
***** 誰でも実行できるようにする
#+BEGIN_SRC sh :results scalar
chmod +x hoge.bash
ls -l hoge.bash
#+END_SRC

#+RESULTS:
: -rwxr-xr-x  1 ahayashi  staff  25 Dec 11 01:24 hoge.bash
***** 実行する
#+BEGIN_SRC sh
./hoge.bash
#+END_SRC

#+RESULTS:
: hoge!
**** rootとは
sudoとは...何でもできるアカウント．
例えば，"sudo apt-get"は，"rootになってapt-getを実行する"という意味．
rootになりっぱなしは絶対だめ．
rootとしての心構えに関する本が出ているほど．
**** ファイルの所有者の変更
chownコマンドを使う．change ownerの意味．
*** 制御構文を使う
**** while文
***** テストファイルを作る
#+BEGIN_SRC sh
"hoge" > file1
"fuga" > file2
"piyo" > file3
ls
#+END_SRC

#+RESULTS:
| Unix_for_OSX.org                          |
| Unix_for_OSX.org~                         |
| ans                                       |
| dir                                       |
| error                                     |
| file1                                     |
| file2                                     |
| file3                                     |
| hoge                                      |
| hoge.bash                                 |
| shell_programing_practical_technique.org  |
| shell_programing_practical_technique.org~ |
| test.docx                                 |
***** whileを使ってバックアップ
#+BEGIN_SRC sh
ls file* | while read f; do cp $f $f.backup ; done
ls file*
#+END_SRC

#+RESULTS:
| file1        |
| file1.backup |
| file2        |
| file2.backup |
| file3        |
| file3.backup |
***** バックアップファイルを削除
#+BEGIN_SRC sh
rm file[0-9].*
#+END_SRC

#+RESULTS:
**** read文
#+BEGIN_SRC sh :tangle read.bash :results silent
#!/bin/bash

echo "1単語ずつ読むと"
echo aaa bbb ccc |
while read a b c; do
echo $b
done


echo "1行まるごと読むと"
echo aaa bbb ccc |
while read s; do
echo $s
done

#+END_SRC


#+BEGIN_SRC sh :results scalar
chmod +x read.bash
./read.bash
#+END_SRC

#+RESULTS:
: 1単語ずつ読むと
: bbb
: 1行まるごと読むと
: aaa bbb ccc
**** for文
***** 単語を順に読み込む
#+BEGIN_SRC sh
for n in aa bb cc; do echo $n; done
#+END_SRC

#+RESULTS:
| aa |
| bb |
| cc |
***** コマンドの出力を変数に順番に入力
#+BEGIN_SRC sh
for n in $(seq 1 3); do echo $n; done
#+END_SRC

#+RESULTS:
| 1 |
| 2 |
| 3 |

**** if文

***** スクリプトを作る
[はテストコマンド．
あとで説明．
#+BEGIN_SRC sh :tangle if.bash :results silent
  #!/bin/bash

  if [ ! -e "$1" ] ; then         # ファイルの有無を判断
  echo "ファイルがない!"
  elif grep hoge "$1" > /dev/null ; then # ファイル中に文字列があるか判断
  echo hoge!
  else
  echo hegeじゃない!
  fi
#+END_SRC

***** 実行
#+BEGIN_SRC sh
chmod +x if.bash
./if.bash file
./if.bash file1
#+END_SRC

#+RESULTS:
| ファイルがない! |
| hegeじゃない!   |

**** case文
こんな感じで書く（下のコードは動かない．）．
#+BEGIN_SRC sh
  case $1 in
      条件1)
          コマンド
          ;;
      条件2)
          コマンド
          exit 3
          ;;
      条件3)
          コマンド
          ;;
  esac
#+END_SRC

#+RESULTS:

*** その他の文法
**** ファイルへの追記
> file
ではなく
>> file
とすると，既存ファイルの後ろに追記することができる．

**** ヒアドキュメント                                       :知らなかった:
cat << FIN > file
意味は，「FINまでの内容をcatし，fileへ書き出せ」

**** ヒアストリング                                         :知らなかった:
変数を標準入力に突っ込むときに使える
#+BEGIN_SRC sh
A=あいうえお
sed 's/お/だ/' <<< $A
#+END_SRC

#+RESULTS:
: あいうえだ

基本的な書き方をすると，以下のようになる
#+BEGIN_SRC sh
A=あいうえお
echo $A | sed 's/お/だ/'
#+END_SRC

#+RESULTS:
: あいうえだ

**** 変数/値/クオート

***** 変数をさらに変数に格納
#+BEGIN_SRC sh
AAA=あいうえお
BBB=$AAA
echo $BBB
#+END_SRC

#+RESULTS:
: あいうえお

***** クオートの有無による動作の違い

****** シングルクオート
単なる文字列となる
#+BEGIN_SRC sh
AAA=あいうえお
BBB='$AAA'
echo $BBB
#+END_SRC

#+RESULTS:
: $AAA
****** ダブルクオート
評価される！
#+BEGIN_SRC sh
AAA=あいうえお
BBB="$AAA"
echo $BBB
#+END_SRC

#+RESULTS:
: あいうえお
****** ダブルクオートとクオート無しの違いは？
空白を含む文字列を与える時には，ダブルクオートで囲む必要がある．

***** 変数の使いどき
基本的に，変数はなるべく使わず，データはなるべく標準入出力，もしくはファイルで扱うべき．
では，いつ使うか？
*一時的なファイルを扱う時！*
$$は，bashのプロセス番号を意味する特殊変数．
このプロセス番号をファイル名に使えば，例えば同じスクリプトを同時に10個動かしたときでも，
プロセス番号がそれぞれ異なるので，ファイル名が衝突せずに済む．
***** スクリプトを書く
#+BEGIN_SRC sh :tangle tmpfile.bash
#!/bin/bash

tmp=$$
echo hoge > $tmp-hoge
#+END_SRC

***** 実行する
#+BEGIN_SRC sh
chmod +x tmpfile.bash
ls -l tmpfile.bash
./tmpfile.bash
#+END_SRC

#+RESULTS:
: -rwxr-xr-x  1 ahayashi  staff  42 Dec 11 20:07 tmpfile.bash


**** 終了ステータス
標準出力でもなく，標準エラー出力でもないところに，「終了ステータス」が吐き出される．
特殊変数は$?．

***** 何事もないと，0が吐き出される．
#+BEGIN_SRC sh
ls file1
echo $? # 何事もなければ0が出る
#+END_SRC

#+RESULTS:
| file1 |
|     0 |

***** 問題があると，0以外の数字が出る．
babelがエラーをキャッチしてしまうのでここでは示せないが．

**** PIPESTATUS
普通に$?を使うと，パイプの上流で起きたエラーをキャッチできない．
${PIPESTATUS[@]}
と書けば，パイプで繋がれた各コマンドの終了ステータスをキャッチできる．

**** テストコマンド
多様は禁物．
AWKやgrepが基本と心得よ．
- 真なら0
- 偽なら1
- それ以外なら2
が返る．

***** 試してみる
#+BEGIN_SRC sh
  [ "aaa" = "aaa" ]               # 真の場合
  echo $?

  [ "aaa" = "aab" ]               # 偽の場合
  echo $?

  [ "aaa" ="aab" ]                # コマンド自体を間違った場合（スペースが不適切）
  echo $?
#+END_SRC

#+RESULTS:
| 0 |
| 1 |
| 2 |

***** 空文字列かどうかのチェック
- "-n"だと空でないことをチェック
- "-z"だと空であることをチェック
#+BEGIN_SRC sh
  A="aa"

  [ -n "$A" ] ; echo $?           # 空ではないよね？ -> Yes (0)

  [ -z "$A" ] ; echo $?           # 空だよね？ -> No (1)
#+END_SRC

#+RESULTS:
| 0 |
| 1 |

***** 数値の比較
- =: -eq
- >=: -ge
- >: -gt
- <=: -le
- <: -lt
- !=: -ne
そのほか，"man ["で調べられる．
#+BEGIN_SRC sh
  A="-5"
  [ "-10" -lt "$A" ]; echo $?     # -10は5より小さいか？ -> Yes (0)

  [ "-10" -gt "$A" ]; echo $?     # -10は5より大きいか？ -> No (1)
#+END_SRC

#+RESULTS:
| 0 |
| 1 |
** AWKとsed
*** AWKを使う
**** 必要な「列」だけを抽出
***** サンプルデータの作成
#+BEGIN_SRC sh
  seq 1 10 | xargs -n 5 > data    # 5列で出力
  cat data
#+END_SRC

| 1 | 2 | 3 | 4 |  5 |
| 6 | 7 | 8 | 9 | 10 |
***** AWKで2列目と4列目を取り出す
#+BEGIN_SRC sh
awk '{print $2,$4}' data
#+END_SRC

#+RESULTS:
| 2 | 4 |
| 7 | 9 |
***** パイプを使うと
#+BEGIN_SRC sh
cat data | awk '{print $2,$4}'
#+END_SRC

#+RESULTS:
| 2 | 4 |
| 7 | 9 |
***** 4行目をいろいろな方法で抜き出してみる
****** 足し算
#+BEGIN_SRC sh
cat data | awk '{print $(1+3)}'
#+END_SRC

#+RESULTS:
| 4 |
| 9 |

****** 変数
#+BEGIN_SRC sh
cat data | awk '{a=3;print $(a+1)}'
#+END_SRC

#+RESULTS:
| 4 |
| 9 |

****** フィールドの数 NF
#+BEGIN_SRC sh
cat data | awk '{print $(NF-1)}'
#+END_SRC

#+RESULTS:
| 4 |
| 9 |
**** {}に囲まれた部分を「アクション」と言う．では，{}に囲まれていない部分は？
**** 必要な「行」だけを抽出
***** データの準備
#+BEGIN_SRC sh :results scalar
echo {a..g}
echo "縦に出力すると"
echo {a..g} | xargs -n 1
#+END_SRC

#+RESULTS:
: a b c d e f g
: 縦に出力すると
: a
: b
: c
: d
: e
: f
: g
***** 4行目以降を出力するには
#+BEGIN_SRC sh
echo {a..g} | xargs -n 1 | awk 'NR>=4'
#+END_SRC

#+RESULTS:
| d |
| e |
| f |
| g |
***** {}に囲まれていない部分は，「パターン」という．
特定の列に対して，条件を書くこともできる．
#+BEGIN_SRC sh :results scalar
  cat data
  echo 4列目が8よりも大きい行を抜き出すと
  cat data | awk '$4>8'
#+END_SRC

#+RESULTS:
: 1 2 3 4 5
: 6 7 8 9 10
: 4列目が8よりも大きい行を抜き出すと
: 6 7 8 9 10
***** サイズを基準に，AWKでファイルをフィルタリング
#+BEGIN_SRC sh
ls -l | awk '$5>10000'
#+END_SRC

#+RESULTS:
| -rw-r--r--  | 1 | ahayashi | staff | 27654 | Dec | 12 | 07:19 | #shell_programing_practical_technique.org# |
| -rw-r--r--  | 1 | ahayashi | staff | 61698 | Dec |  8 | 18:18 | Unix_for_OSX.org                           |
| -rw-r--r--  | 1 | ahayashi | staff | 27468 | Dec | 11 | 21:55 | shell_programing_practical_technique.org   |
| -rw-r--r--@ | 1 | ahayashi | staff | 11837 | Dec |  8 | 16:39 | test.docx                                  |
***** クオートすると文字列として比較される
#+BEGIN_SRC sh
echo 数値として比較
echo 9.9 | awk '$1>88'
echo 文字列として辞書順で比較
echo 9.9 | awk '$1>"88"'
#+END_SRC

#+RESULTS:
| 数値として比較   |
| 文字列として比較 |
| 9.9              |
**** 行を抽出して加工
***** パターンとアクションは組み合わせられる
#+BEGIN_SRC sh :results scalar
echo {a..g} | xargs -n 1
echo ------------------
echo {a..g} | xargs -n 1 | awk 'NR>4'
echo ------------------
echo {a..g} | xargs -n 1 | awk 'NR>4{print $1,$1,$1}'
#+END_SRC

#+RESULTS:
#+begin_example
a
b
c
d
e
f
g
------------------
e
f
g
------------------
e e e
f f f
g g g
#+end_example
***** アクションが実行されるのは，パターンにマッチする行だけ．
パターンとアクションの組は，複数書くことができる．
#+BEGIN_SRC sh
echo {a..g} | xargs -n 1 | awk 'NR>=4{print $1,$1,$1}NR<=4{print $1,$1}'
#+END_SRC

#+RESULTS:
| a | a |   |
| b | b |   |
| c | c |   |
| d | d | d |
| d | d |   |
| e | e | e |
| f | f | f |
| g | g | g |

ややトリッキーだが，defgが縦に3つ出力された後に，abcdが縦に2つ出力されている．
**** BEGINとEND
***** BEGIN
#+BEGIN_SRC sh
seq 1 5 | awk '{a=10000;print $1+a}'
echo --------------BEGINで書くと
seq 1 5 | awk 'BEGIN{a=10000}{print $1+a}'
#+END_SRC

#+RESULTS:
|                       10001 |
|                       10002 |
|                       10003 |
|                       10004 |
|                       10005 |
| --------------BEGINで書くと |
|                       10001 |
|                       10002 |
|                       10003 |
|                       10004 |
|                       10005 |
***** BEGINしかないパターン
#+BEGIN_SRC sh
awk 'BEGIN{print 1+2}'
echo ----------BEGINを入れないと
awk '{print 1+2}'
#+END_SRC

#+RESULTS:
|                           3 |
| ----------BEGINを入れないと |
***** END
ENDはAWKによるメイン処理も全部終わった後，最後の1回のコマンドを指定する
#+BEGIN_SRC sh
echo ---ENDで1回だけ出力
seq 1 5 | awk 'BEGIN{a=10000}{a+=$1}END{print a}'
aの値は積算されている点に注意．
**** 制御構文
***** if文
if節全体を{}でくくっている点に注意．
#+BEGIN_SRC sh
seq 1 5 | awk '{if($1%2==0){print $1,"偶数"}else{print $1,"奇数"}}'
#+END_SRC

#+RESULTS:
| 1 | 奇数 |
| 2 | 偶数 |
| 3 | 奇数 |
| 4 | 偶数 |
| 5 | 奇数 |

***** for文
for節だけを{}でくくっている点に注意．
#+BEGIN_SRC sh
seq 1 5 | awk '{for(i=1;i<=NF;i++){a+=$i}}END{print a}'
echo ---ENDなしだと
seq 1 5 | awk '{for(i=1;i<=NF;i++){a+=$i}}{print a}'
#+END_SRC

#+RESULTS:
| 15 |
|  1 |
|  3 |
|  6 |
| 10 |
| 15 |

**** 明示的に初期化しない変数の扱い
先のfor文の例では，aの初期化をしていなかったが，実は自動的に0で初期化されている．
文字列の場合には，以下のように空文字列で初期化される．
#+BEGIN_SRC sh :results scalar
echo 初期化なしだと----------
echo ほげ | awk '{print $1 a $1 b $1}'
echo 初期化すると-----------
echo ほげ | awk 'BEGIN{a=" と "}{b=" は "}{print $1 a $1 b $1}'
#+END_SRC

#+RESULTS:
: 初期化なしだと----------
: ほげほげほげ
: 初期化すると-----------
: ほげ と ほげ は ほげ

**** 行全体の出力/略記

#+BEGIN_SRC sh :results scalar
echo こうやるのは面倒--------------------------
echo {a..g} | awk '{print $1,$2,$3,$4,$5,$6,$7}'

echo 行全体はゼロで略記できる------------------
echo {a..g} | awk '{print $0}'

echo ある列の値を更新しても，'$0'にはちゃんと反映される
echo {a..g} | awk '{$3="hogehoge";print $0}'

echo といいつつ，実は何も書かなくてもできたんだけどね
echo {a..g} | awk '{print}'
echo {a..g} | awk '{$3="hogehoge";print}'
#+END_SRC

#+RESULTS:
: こうやるのは面倒--------------------------
: a b c d e f g
: 行全体はゼロで略記できる------------------
: a b c d e f g
: ある列の値を更新しても，$0にはちゃんと反映される
: a b hogehoge d e f g
: といいつつ，実は何も書かなくてもできたんだけどね
: a b c d e f g
: a b hogehoge d e f g

**** AWKでよく使う関数

***** printf
#+BEGIN_SRC sh :results scalar
echo 数字に単位をつける------------------
seq 1 3 | awk '{printf("%d円\n",$1)}'

echo 2フィールド目を5桁の整数に整形
seq 1 30 | xargs -n 3
seq 1 30 | xargs -n 3 | awk '{printf("%05d\n",$2)}'
#+END_SRC

#+RESULTS:
#+begin_example
数字に単位をつける------------------
1円
2円
3円
2フィールド目を5桁の整数に整形
1 2 3
4 5 6
7 8 9
10 11 12
13 14 15
16 17 18
19 20 21
22 23 24
25 26 27
28 29 30
00002
00005
00008
00011
00014
00017
00020
00023
00026
00029
#+end_example

***** sprintf
printfと似ているが，標準出力に字を出さず，整形された文字列を返す．
silent print formatの略？
printと合わせて使ったり，変数に文字列を一度書き出す時に使う．
#+BEGIN_SRC sh :results scalar
echo sprintfで書く----------
echo 上田 0 不合格 | awk '{print $1,sprintf("%010d点",$2),$3}'

echo printfで書こうとすると，'$1'と'$3'も関数の引数にしないといけないので面倒----------
echo 上田 0 不合格 | awk '{printf("%s %010d点 %s\n",$1,$2,$3)}'

echo iだけiiに変更する
echo {a..z} | awk '{$9=sprintf("%s%s",$9,$9);print}'
echo iだけabに変更する
echo {a..z} | awk '{$9=sprintf("%s%s",$1,$2);print}'

#+END_SRC

#+RESULTS:
: sprintfで書く----------
: 上田 0000000000点 不合格
: printfで書こうとすると，$1と$3も関数の引数にしないといけないので面倒----------
: 上田 0000000000点 不合格
: iだけiiに変更する
: a b c d e f g h ii j k l m n o p q r s t u v w x y z
: iだけabに変更する
: a b c d e f g h ab j k l m n o p q r s t u v w x y z

***** sub
1回だけ置換
#+BEGIN_SRC sh
echo オバチャンオバチャン | awk '{sub(/オバ/,"オッ",$0);print}'
#+END_SRC

#+RESULTS:
: オッチャンオバチャン

***** gsub
1行中を全て置換
#+BEGIN_SRC sh
echo オバチャンオバチャン | awk '{gsub(/オバ/,"オッ",$0);print}'
#+END_SRC

#+RESULTS:
: オッチャンオッチャン

***** gensub
自分のbash環境にはなかった．
#+BEGIN_SRC sh
echo オバチャンオバチャン | awk '{$0 = gensub(/オバ/,"オッ",$0);print}'
#+END_SRC

#+RESULTS:

*** sedを使う
**** 置換
たいていは文字列の置換に使われる．
***** AWKのsubとの使い分け
特定の列の文字列を狙うならAWKを使う．
***** 郵便番号にハイフンを入れる
****** まずやってみる
#+BEGIN_SRC sh
echo 1110001\\n2220001 > zipcode
cat zipcode
cat zipcode | sed 's/0001/-0001/'
#+END_SRC

#+RESULTS:
|  1110001 |
|  2220001 |
| 111-0001 |
| 222-0001 |
****** 末尾が変わるとうまく動かない
#+BEGIN_SRC sh
echo 1110001\\n2220001\\n1231234 > zipcode
cat zipcode
cat zipcode | sed 's/0001/-0001/'
#+END_SRC

#+RESULTS:
|  1110001 |
|  2220001 |
|  1231234 |
| 111-0001 |
| 222-0001 |
|  1231234 |
****** そこで正規表現
- &: 正規表現で引っ掛けた文字列自体を表す
#+BEGIN_SRC sh
cat zipcode | sed 's/.../&-/'
#+END_SRC

#+RESULTS:
| 111-0001 |
| 222-0001 |
| 123-1234 |
****** 冗長だが，マッチを再呼び出しする方法
括弧内マッチを番号で呼び出せる
#+BEGIN_SRC sh
cat zipcode | sed 's/\(...\)/\1-/'
cat zipcode | sed 's/\(...\)\(....\)/\1-\2/'
#+END_SRC

#+RESULTS:
| 111-0001 |
| 222-0001 |
| 123-1234 |
| 111-0001 |
| 222-0001 |
| 123-1234 |
****** コマンドの区切りにスラッシュ以外を使えば，スラッシュの置換に便利
#+BEGIN_SRC sh
echo 'abc/def' | sed 's/\//_/'  # エスケープがややこしい
echo 'abc/def' | sed 's;/;_;'  # 区切りに違う文字を使うといい感じ
echo 'abc/def' | sed 's@/@_@'  # @もいい感じ
echo 'abc/def' | sed 'sa/a_a'  # 普通の文字も使えるが推奨しない
#+END_SRC

#+RESULTS:
| abc_def |
| abc_def |
| abc_def |
| abc_def |

**** 範囲指定して置換
指定した行だけを置換対象にできる

***** 特定行
#+BEGIN_SRC sh
echo {a..e} | xargs -n 1
echo -------------
echo {a..e} | xargs -n 1 | sed '2s/./置換したよ/'       # 2行目だけを置換
#+END_SRC

#+RESULTS:
| a             |
| b             |
| c             |
| d             |
| e             |
| ------------- |
| a             |
| 置換したよ    |
| c             |
| d             |
| e             |

***** 最終行
#+BEGIN_SRC sh
echo {a..e} | xargs -n 1 | sed '$s/./置換したよ/'
#+END_SRC

#+RESULTS:
| a          |
| b          |
| c          |
| d          |
| 置換したよ |

***** 何行目から何行目
#+BEGIN_SRC sh
echo {a..e} | xargs -n 1 | sed '2,4s/./置換したよ/'
#+END_SRC

#+RESULTS:
| a          |
| 置換したよ |
| 置換したよ |
| 置換したよ |
| e          |

***** 正規表現にマッチした行
s/...　より前にスラッシュ（などの区切り文字）で囲った正規表現を書く．
#+BEGIN_SRC sh
echo {a..e} | xargs -n 1 | sed '/b/s/./置換したよ/' # bのある行を置換
echo --------------------
echo {a..e} | xargs -n 1 | sed '/b/,/d/s/./置換したよ/' # bのある行からdのある行までを置換
#+END_SRC

#+RESULTS:
| a                    |
| 置換したよ           |
| c                    |
| d                    |
| e                    |
| -------------------- |
| a                    |
| 置換したよ           |
| 置換したよ           |
| 置換したよ           |
| e                    |

**** 行を指定して抽出
AWKでもできるが紹介．
#+BEGIN_SRC sh
echo {a..e} | xargs -n 1
echo --------------
echo {a..e} | xargs -n 1 | sed -n '4p' # 4行目
echo --------------
echo {a..e} | xargs -n 1 | sed -n '2,4p' # 2~4行目
echo --------------
echo {a..e} | xargs -n 1 | sed -n '/b/,/d/p' # bがある行からdがある行
#+END_SRC

#+RESULTS:
| a              |
| b              |
| c              |
| d              |
| e              |
| -------------- |
| d              |
| -------------- |
| b              |
| c              |
| d              |
| -------------- |
| b              |
| c              |
| d              |

** 使用するコマンドのインストール
*** GNU Awkの確認/ インストール
awkコマンドに見えても，実はGNU Awk (gawk) のシンボリックリンクかも．
gawkは日本語を処理できるのが強み．
はいっていなかった！
まずapt-getが欲しい
#+BEGIN_SRC sh

#+END_SRC

#+RESULTS:
*** Open usp Tukubaiのインストール
有償コマンドの互換・無償コマンド．
awkのショートカット．
** 本書におけるPOSIXに対する立場
- 便利に使いこなそうとすること
- 移植性を考えて保守的な書き方をすること
両立は難しい．
POSIXに縛られるな．
便利なコマンドはどんどん使え．
* 不定形な文章や設定ファイルの検索と加工
** テキストの検索
*** 文字列を検索する
**** 単純な検索
***** ファイルを作る
#+BEGIN_SRC sh
echo "朝目覚めると，
私は全身を繭で覆われた蛹になっていたのです．
私は大変困ってしまいました．
「会社に休みの連絡ができない．」" > mistery.txt
cat mistery.txt
#+END_SRC

#+RESULTS:
| 朝目覚めると，                               |
| 私は全身を繭で覆われた蛹になっていたのです． |
| 私は大変困ってしまいました．                 |
| 「会社に休みの連絡ができない」               |
***** 検索する
#+BEGIN_SRC sh
grep '私は' mistery.txt
#+END_SRC

#+RESULTS:
| 私は全身を繭で覆われた蛹になっていたのです． |
| 私は大変困ってしまいました．                 |
***** httpに関する情報を検索する
#+BEGIN_SRC sh :results output
cat /etc/services | grep http | grep 80
#+END_SRC

#+RESULTS:
#+begin_example
http             80/udp     www www-http # World Wide Web HTTP
http             80/tcp     www www-http # World Wide Web HTTP
http-mgmt       280/udp     # http-mgmt
http-mgmt       280/tcp     # http-mgmt
http-alt	591/udp     # FileMaker, Inc. - HTTP Alternate (see Port 80)
http-alt	591/tcp     # FileMaker, Inc. - HTTP Alternate (see Port 80)
sun-sr-http     6480/tcp    # Service Registry Default HTTP Domain
sun-sr-http     6480/udp    # Service Registry Default HTTP Domain
http-alt	8008/udp     # HTTP Alternate
http-alt	8008/tcp     # HTTP Alternate
http-alt	8080/udp     # HTTP Alternate (see port 80)
http-alt	8080/tcp     # HTTP Alternate (see port 80)
radan-http      8088/udp     # Radan HTTP
radan-http      8088/tcp     # Radan HTTP
tcc-http        24680/tcp   # TCC User HTTP Service
tcc-http        24680/udp   # TCC User HTTP Service
#+end_example
***** headで上の方だけ出力する
#+BEGIN_SRC sh :results output
cat /etc/services | grep http | grep 80 | head -n 2
#+END_SRC

#+RESULTS:
: http             80/udp     www www-http # World Wide Web HTTP
: http             80/tcp     www www-http # World Wide Web HTTP
**** タブが使えない問題
***** タブが邪魔なのでスペースに変換する
#+BEGIN_SRC sh :results output
cat /etc/services | grep http | tr '\t' ' ' | grep 80/
#+END_SRC

#+RESULTS:
#+begin_example
http             80/udp     www www-http # World Wide Web HTTP
http             80/tcp     www www-http # World Wide Web HTTP
http-mgmt       280/udp     # http-mgmt
http-mgmt       280/tcp     # http-mgmt
sun-sr-http     6480/tcp    # Service Registry Default HTTP Domain
sun-sr-http     6480/udp    # Service Registry Default HTTP Domain
http-alt 8080/udp     # HTTP Alternate (see port 80)
http-alt 8080/tcp     # HTTP Alternate (see port 80)
tcc-http        24680/tcp   # TCC User HTTP Service
tcc-http        24680/udp   # TCC User HTTP Service
#+end_example
***** 教科書的なタブの書き方
#+BEGIN_SRC sh :results output
cat /etc/services | grep http | grep '[[:space:]]80/'
#+END_SRC

#+RESULTS:
: http             80/udp     www www-http # World Wide Web HTTP
: http             80/tcp     www www-http # World Wide Web HTTP
***** ターミナルでタブを打つには
ctrl + v の後に "TAB" を押す
***** シングルクオートの前に$を書く extquote
#+BEGIN_SRC sh :results output
cat /etc/services | grep http | grep $'\t80/'
#+END_SRC

#+RESULTS:
**** 正規表現を使ってみましょう
***** ざっくり検索
#+BEGIN_SRC sh :results output
grep '80/..p' /etc/services
#+END_SRC

#+RESULTS:
#+begin_example
http             80/udp     www www-http # World Wide Web HTTP
http             80/tcp     www www-http # World Wide Web HTTP
ris             180/udp     # Intergraph
ris             180/tcp     # Intergraph
http-mgmt       280/udp     # http-mgmt
http-mgmt       280/tcp     # http-mgmt
is99s           380/udp     # TIA/EIA/IS-99 modem server
is99s           380/tcp     # TIA/EIA/IS-99 modem server
iafdbase        480/udp     # iafdbase
iafdbase        480/tcp     # iafdbase
sntp-heartbeat  580/udp     # SNTP HEARTBEAT
sntp-heartbeat  580/tcp     # SNTP HEARTBEAT
entrust-aaas	680/udp     # entrust-aaas
entrust-aaas	680/tcp     # entrust-aaas
wpgs		780/udp #
wpgs		780/tcp #
socks           1080/udp    # Socks
socks           1080/tcp    # Socks
mc-client       1180/udp    # Millicent Client Proxy
mc-client       1180/tcp    # Millicent Client Proxy
pictrography    1280/udp    # Pictrography
pictrography    1280/tcp    # Pictrography
telesis-licman  1380/udp    # Telesis Network License Manager
telesis-licman  1380/tcp    # Telesis Network License Manager
pacerforum      1480/udp     # PacerForum
pacerforum      1480/tcp     # PacerForum
tn-tl-r2        1580/udp     # tn-tl-r2
tn-tl-r1        1580/tcp     # tn-tl-r1
microcom-sbp    1680/udp   # microcom-sbp
microcom-sbp    1680/tcp   # microcom-sbp
dpkeyserv       1780/udp     # dpkeyserv
dpkeyserv       1780/tcp     # dpkeyserv
vsat-control    1880/udp     # Gilat VSAT Control
vsat-control    1880/tcp     # Gilat VSAT Control
pearldoc-xact   1980/udp    # PearlDoc XACT
pearldoc-xact   1980/tcp    # PearlDoc XACT
autodesk-nlm    2080/udp    # Autodesk NLM (FLEXlm)
autodesk-nlm    2080/tcp    # Autodesk NLM (FLEXlm)
mc-gt-srv	2180/udp    # Millicent Vendor Gateway Server
mc-gt-srv	2180/tcp    # Millicent Vendor Gateway Server
lnvpoller       2280/udp    # LNVPOLLER
lnvpoller       2280/tcp    # LNVPOLLER
lingwood	2480/udp    # Lingwood's Detail
lingwood	2480/tcp    # Lingwood's Detail
tributary	2580/udp    # Tributary
tributary	2580/tcp    # Tributary
pxc-sapxom	2680/udp    # pxc-sapxom
pxc-sapxom	2680/tcp    # pxc-sapxom
lbc-control	2780/udp    # LBC Control
lbc-control	2780/tcp    # LBC Control
synapse		2880/udp    # Synapse Transport
synapse		2880/tcp    # Synapse Transport
wimd		2980/udp    # Instant Messaging Service
wimd		2980/tcp    # Instant Messaging Service
stm_pproc	3080/udp    # stm_pproc
stm_pproc	3080/tcp    # stm_pproc
mc-brk-srv	3180/udp    # Millicent Broker Server
mc-brk-srv	3180/tcp    # Millicent Broker Server
vs-server	3280/udp    # VS Server
vs-server	3280/tcp    # VS Server
sns-channels	3380/udp    # SNS Channels
sns-channels	3380/tcp    # SNS Channels
plethora        3480/udp    # Secure Virtual Workspace
plethora        3480/tcp    # Secure Virtual Workspace
nati-svrloc     3580/udp    # NATI-ServiceLocator
nati-svrloc     3580/tcp    # NATI-ServiceLocator
npds-tracker    3680/udp    # NPDS Tracker
npds-tracker    3680/tcp    # NPDS Tracker
nnp             3780/udp    # Nuzzler Network Protocol
nnp             3780/tcp    # Nuzzler Network Protocol
igrs            3880/tcp    # IGRS
igrs            3880/udp    # IGRS
acms            3980/tcp    # Aircraft Cabin Management System
acms            3980/udp    # Aircraft Cabin Management System
mgemanagement   4680/tcp    # MGE UPS Management
mgemanagement   4680/udp    # MGE UPS Management
tmosms0         5580/tcp    # T-Mobile SMS Protocol Message 0
tmosms0         5580/udp    # T-Mobile SMS Protocol Message 0
auriga-router   5680/tcp    # Auriga Router Service
auriga-router   5680/udp    # Auriga Router Service
sun-sr-http     6480/tcp    # Service Registry Default HTTP Domain
sun-sr-http     6480/udp    # Service Registry Default HTTP Domain
parsec-master   6580/udp    # Parsec Masterserver
parsec-master   6580/tcp    # Parsec Masterserver
itactionserver1 7280/udp    # ITACTIONSERVER 1
itactionserver1 7280/tcp    # ITACTIONSERVER 1
quest-vista     7980/udp     # Quest Vista
quest-vista     7980/tcp     # Quest Vista
http-alt	8080/udp     # HTTP Alternate (see port 80)
http-alt	8080/tcp     # HTTP Alternate (see port 80)
cruise-update	8380/udp     # Cruise UPDATE
cruise-update	8380/tcp     # Cruise UPDATE
cddbp-alt	8880/udp     # CDDBP
cddbp-alt	8880/tcp     # CDDBP
glrpc           9080/udp     # Groove GLRPC
glrpc           9080/tcp     # Groove GLRPC
amanda          10080/udp   # Amanda
amanda          10080/tcp   # Amanda
tcc-http        24680/tcp   # TCC User HTTP Service
tcc-http        24680/udp   # TCC User HTTP Service
ethercat        34980/tcp   # EtherCAT Port
ethercat        34980/udp   # EhterCAT Port
#+end_example
***** 2~8を含まない行
#+BEGIN_SRC sh :results output
grep '[^2-8]000/tcp' /etc/services
#+END_SRC

#+RESULTS:
: cadlock2	1000/tcp #
: cslistener      9000/tcp     # CSlistener
: ndmp            10000/tcp   # Network Data Management Protocol
: irisa		11000/tcp   # IRISA
: igrid           19000/tcp   # iGrid Server
: dnp             20000/tcp   # DNP
: irtrans         21000/tcp   # IRTrans Control
: safetynetp      40000/tcp   # SafetyNET p
***** 0が1個以上繰り返される
0を2個書いているのに「1回」以上？！
*は「0回以上の繰り返し」なので，0を2個書かないと，0がない行もマッチしてしまう．
#+BEGIN_SRC sh :results output
grep '00*/tcp' /etc/services | head -n 5
#+END_SRC

#+RESULTS:
: #                10/tcp    Unassigned
: ftp-data         20/tcp     # File Transfer [Default Data]
: #                30/tcp    Unassigned
: #                40/tcp    Unassigned
: re-mail-ck       50/tcp     # Remote Mail Checking Protocol
***** 5個以上の数字の繰り返し
上と同じ理由で，今度はブラケットを6個書く．
#+BEGIN_SRC sh :results output
grep '[0-9][0-9][0-9][0-9][0-9][0-9]*/tcp' /etc/services
#+END_SRC

#+RESULTS:
#+begin_example
ndmp            10000/tcp   # Network Data Management Protocol
scp-config      10001/tcp   # SCP Configuration Port
mvs-capacity	10007/tcp   # MVS Capacity
octopus         10008/tcp   # Octopus Multiplexer
swdtp-sv        10009/tcp   # Systemwalker Desktop Patrol
zabbix-agent    10050/tcp   # Zabbix Agent
zabbix-trapper  10051/tcp   # Zabbix Trapper
amanda          10080/tcp   # Amanda
famdc           10081/tcp   # FAM Archive Server
itap-ddtp       10100/tcp   # VERITAS ITAP DDTP
ezmeeting-2     10101/tcp   # eZmeeting
ezproxy-2       10102/tcp   # eZproxy
ezrelay         10103/tcp   # eZrelay
swdtp           10104/tcp   # Systemwalker Desktop Patrol
bctp-server     10107/tcp   # VERITAS BCTP, server
netiq-endpoint  10113/tcp   # NetIQ Endpoint
netiq-qcheck    10114/tcp   # NetIQ Qcheck
netiq-endpt     10115/tcp   # NetIQ Endpoint
netiq-voipa     10116/tcp   # NetIQ VoIP Assessor
bmc-perf-sd     10128/tcp   # BMC-PERFORM-SERVICE DAEMON
qb-db-server    10160/tcp   # QB Database Server
trisoap         10200/tcp   # Trigence AE Soap Service
apollo-relay    10252/tcp   # Apollo Relay Port
axis-wimp-port  10260/tcp   # Axis WIMP Port
blocks		10288/tcp   # Blocks
gap             10800/tcp   # Gestor de Acaparamiento para Pocket PCs
lpdg            10805/tcp   # LUCIA Pareja Data Group
rmiaux          10990/tcp   # Auxiliary RMI Port
irisa		11000/tcp   # IRISA
metasys		11001/tcp   # Metasys
vce		11111/tcp   # Viral Computing Environment (VCE)
dicom           11112/tcp   # DICOM
suncacao-snmp   11161/tcp   # sun cacao snmp access point
suncacao-jmxmp  11162/tcp   # sun cacao JMX-remoting access point
suncacao-rmi    11163/tcp   # sun cacao rmi registry access point
suncacao-csa    11164/tcp   # sun cacao command-streaming access point
suncacao-websvc 11165/tcp   # sun cacao web service access point
smsqp           11201/tcp   # smsqp
wifree          11208/tcp   # WiFree Service
imip            11319/tcp    # IMIP
imip-channels   11320/tcp    # IMIP Channels Port
arena-server    11321/tcp    # Arena Server Listen
atm-uhas        11367/tcp    # ATM UHAS
hkp             11371/tcp    # OpenPGP HTTP Keyserver
tempest-port    11600/tcp    # Tempest Protocol Port
h323callsigalt  11720/tcp    # h323 Call Signal Alternate
intrepid-ssl    11751/tcp   # Intrepid SSL
sysinfo-sp      11967/tcp   # SysInfo Service Protocol
entextxid	12000/tcp   # IBM Enterprise Extender SNA XID Exchange
entextnetwk	12001/tcp   # IBM Enterprise Extender SNA COS Network Priority
entexthigh	12002/tcp   # IBM Enterprise Extender SNA COS High Priority
entextmed	12003/tcp   # IBM Enterprise Extender SNA COS Medium Priority
entextlow	12004/tcp   # IBM Enterprise Extender SNA COS Low Priority
dbisamserver1   12005/tcp   # DBISAM Database Server - Regular
dbisamserver2   12006/tcp   # DBISAM Database Server - Admin
accuracer       12007/tcp   # Accuracer Database System Server
accuracer-dbms  12008/tcp   # Accuracer Database System Admin
vipera          12012/tcp   # Vipera Messaging Service
rets-ssl        12109/tcp   # RETS over SSL
nupaper-ss      12121/tcp   # NuPaper Session Service
cawas           12168/tcp   # CA Web Access Service
hivep		12172/tcp   # HiveP
linogridengine  12300/tcp   # LinoGrid Engine
warehouse-sss   12321/tcp   # Warehouse Monitoring Syst SSS
warehouse       12322/tcp   # Warehouse Monitoring Syst
italk           12345/tcp   # Italk Chat System
tsaf            12753/tcp   # tsaf port
i-zipqd		13160/tcp   # I-ZIPQD
powwow-client   13223/tcp   # PowWow Client
powwow-server   13224/tcp   # PowWow Server
bprd		13720/tcp   # BPRD Protocol (VERITAS NetBackup)
bpdbm		13721/tcp   # BPDBM Protocol (VERITAS NetBackup)
bpjava-msvc	13722/tcp   # BP Java MSVC Protocol
vnetd           13724/tcp   # Veritas Network Utility
bpcd		13782/tcp   # VERITAS NetBackup
vopied		13783/tcp   # VOPIED Protocol
nbdb            13785/tcp   # NetBackup Database
nomdb           13786/tcp   # Veritas-nomdb
dsmcc-config    13818/tcp   # DSMCC Config
dsmcc-session	13819/tcp   # DSMCC Session Messages
dsmcc-passthru	13820/tcp   # DSMCC Pass-Thru Messages
dsmcc-download	13821/tcp   # DSMCC Download Protocol
dsmcc-ccp	13822/tcp   # DSMCC Channel Change Protocol
sua         14001/tcp   # SUA
sage-best-com1  14033/tcp   # sage Best! Config Server 1
sage-best-com2  14034/tcp   # sage Best! Config Server 2
vcs-app         14141/tcp   # VCS Application
icpp            14142/tcp   # IceWall Cert Protocol
gcm-app         14145/tcp   # GCM Application
vrts-tdd        14149/tcp   # Veritas Traffic Director
vad             14154/tcp   # Veritas Application Director
ca-web-update   14414/tcp   # CA eTrust Web Update Service
hde-lcesrvr-1   14936/tcp   # hde-lcesrvr-1
hde-lcesrvr-2   14937/tcp   # hde-lcesrvr-2
hydap           15000/tcp   # Hypack Data Aquisition
xpilot          15345/tcp   # XPilot Contact Port
3link           15363/tcp   # 3Link Negotiation
cisco-snat      15555/tcp   # Cisco Stateful NAT
ptp             15740/tcp   # Picture Transfer Protocol
sun-sea-port    16161/tcp   # Solaris SEA Port
etb4j           16309/tcp   # etb4j
pduncs          16310/tcp   # Policy Distribute, Update Notification
netserialext1	16360/tcp   # netserialext1
netserialext2	16361/tcp   # netserialext2
netserialext3	16367/tcp   # netserialext3
netserialext4	16368/tcp   # netserialext4
connected       16384/tcp   # Connected Corp
intel-rci-mp    16991/tcp   # INTEL-RCI-MP
amt-soap-http   16992/tcp   # Intel(R) AMT SOAP/HTTP
amt-soap-https  16993/tcp   # Intel(R) AMT SOAP/HTTPS
amt-redir-tcp   16994/tcp   # Intel(R) AMT Redirection/TCP
amt-redir-tls   16995/tcp   # Intel(R) AMT Redirection/TLS
isode-dua	17007/tcp #
soundsvirtual   17185/tcp   # Sounds Virtual
chipper		17219/tcp   # Chipper
ssh-mgmt        17235/tcp   # SSH Tectia Manager
ea              17729/tcp   # Eclipse Aviation
zep             17754/tcp   # Encap. ZigBee Packets
zigbee-ip       17755/tcp   # ZigBee IP Transport Service
zigbee-ips      17756/tcp   # ZigBee IP Transport Secure Service
biimenu         18000/tcp   # Beckman Instruments, Inc.
opsec-cvp	18181/tcp   # OPSEC CVP
opsec-ufp	18182/tcp   # OPSEC UFP
opsec-sam       18183/tcp   # OPSEC SAM
opsec-lea       18184/tcp   # OPSEC LEA
opsec-omi       18185/tcp   # OPSEC OMI
ohsc            18186/tcp   # Occupational Health SC
opsec-ela       18187/tcp   # OPSEC ELA
checkpoint-rtm  18241/tcp   # Check Point RTM
ac-cluster	18463/tcp   # AC Cluster
ique            18769/tcp   # IQue Protocol
infotos         18881/tcp   # Infotos
apc-necmp       18888/tcp   # APCNECMP
igrid           19000/tcp   # iGrid Server
opsec-uaa       19191/tcp   # OPSEC UAA
ua-secureagent  19194/tcp   # UserAuthority SecureAgent
keysrvr         19283/tcp   # Key Server for SASSAFRAS
keyshadow       19315/tcp   # Key Shadow for SASSAFRAS
mtrgtrans       19398/tcp   # mtrgtrans
hp-sco		19410/tcp   # hp-sco
hp-sca		19411/tcp   # hp-sca
hp-sessmon      19412/tcp   # HP-SESSMON
fxuptp          19539/tcp   # FXUPTP
sxuptp          19540/tcp   # SXUPTP
jcp             19541/tcp   # JCP Client
dnp             20000/tcp   # DNP
microsan        20001/tcp   # MicroSAN
commtact-http   20002/tcp   # Commtact HTTP
commtact-https  20003/tcp   # Commtact HTTPS
opendeploy      20014/tcp   # OpenDeploy Listener
nburn_id        20034/tcp   # NetBurner ID Port
tolfab          20167/tcp   # TOLfab Data Change
ipdtp-port      20202/tcp   # IPD Tunneling Port
ipulse-ics      20222/tcp   # iPulse-ICS
track		20670/tcp   # Track
athand-mmp      20999/tcp   # At Hand MMP
irtrans         21000/tcp   # IRTrans Control
dfserver        21554/tcp   # MineScape Design File Server
vofr-gateway	21590/tcp   # VoFR Gateway
tvpm            21800/tcp  # TVNC Pro Multiplexing
webphone        21845/tcp  # webphone
netspeak-is     21846/tcp  # NetSpeak Corp. Directory Services
netspeak-cs     21847/tcp  # NetSpeak Corp. Connection Services
netspeak-acd    21848/tcp  # NetSpeak Corp. Automatic Call Distribution
netspeak-cps    21849/tcp  # NetSpeak Corp. Credit Processing System
snapenetio	22000/tcp  # SNAPenetIO
optocontrol	22001/tcp  # OptoControl
optohost002     22002/tcp   # Opto Host Port 2
optohost003     22003/tcp   # Opto Host Port 3
optohost004     22004/tcp   # Opto Host Port 4
optohost004     22005/tcp   # Opto Host Port 5
wnn6            22273/tcp  # wnn6
vocaltec-wconf  22555/tcp  # Vocaltec Web Conference
talikaserver    22763/tcp   # Talika Main Server
aws-brf         22800/tcp  # Telerate Information Platform LAN
brf-gw          22951/tcp  # Telerate Information Platform WAN
inovaport1      23000/tcp   # Inova LightLink Server Type 1
inovaport2      23001/tcp   # Inova LightLink Server Type 2
inovaport3      23002/tcp   # Inova LightLink Server Type 3
inovaport4      23003/tcp   # Inova LightLink Server Type 4
inovaport5      23004/tcp   # Inova LightLink Server Type 5
inovaport6      23005/tcp   # Inova LightLink Server Type 6
novar-dbase     23400/tcp   # Novar Data
novar-alarm     23401/tcp   # Novar Alarm
novar-global    23402/tcp   # Novar Global
med-ltp		24000/tcp  # med-ltp
med-fsp-rx	24001/tcp  # med-fsp-rx
med-fsp-tx	24002/tcp  # med-fsp-tx
med-supp	24003/tcp  # med-supp
med-ovw		24004/tcp  # med-ovw
med-ci		24005/tcp  # med-ci
med-net-svc	24006/tcp  # med-net-svc
filesphere      24242/tcp  # fileSphere
vista-4gl       24249/tcp  # Vista 4GL
ild             24321/tcp   # Isolv Local Directory
intel_rci	24386/tcp  # Intel RCI
binkp           24554/tcp  # BINKP
flashfiler      24677/tcp  # FlashFiler
proactivate     24678/tcp  # Turbopower Proactivate
tcc-http        24680/tcp   # TCC User HTTP Service
snip            24922/tcp  # Simple Net Ident Protocol
icl-twobase1    25000/tcp  # icl-twobase1
icl-twobase2    25001/tcp  # icl-twobase2
icl-twobase3    25002/tcp  # icl-twobase3
icl-twobase4    25003/tcp  # icl-twobase4
icl-twobase5    25004/tcp  # icl-twobase5
icl-twobase6    25005/tcp  # icl-twobase6
icl-twobase7    25006/tcp  # icl-twobase7
icl-twobase8    25007/tcp  # icl-twobase8
icl-twobase9    25008/tcp  # icl-twobase9
icl-twobase10   25009/tcp  # icl-twobase10
vocaltec-hos    25793/tcp   # Vocaltec Address Server
tasp-net        25900/tcp   # TASP Network Comm
niobserver      25901/tcp   # NIObserver
niprobe         25903/tcp   # NIProbe
quake           26000/tcp   # quake
wnn6-ds         26208/tcp   # wnn6-ds
ezproxy         26260/tcp   # eZproxy
ezmeeting       26261/tcp   # eZmeeting
k3software-svr  26262/tcp   # K3 Software-Server
k3software-cli  26263/tcp   # K3 Software-Client
gserver         26264/tcp   # Gserver
exoline-tcp     26486/tcp   # EXOline-TCP
exoconfig       26487/tcp   # EXOconfig
exonet          26489/tcp   # EXOnet
imagepump       27345/tcp   # ImagePump
jesmsjc         27442/tcp   # Job controller service
kopek-httphead  27504/tcp   # Kopek HTTP Head Port
ars-vista       27782/tcp   # ARS VISTA Application
tw-auth-key     27999/tcp   # TW Authentication/Key Distribution and
nxlmd           28000/tcp   # NX License Manager
siemensgsm      28240/tcp   # Siemens GSM
otmp            29167/tcp   # ObTools Message Protocol
pago-services1  30001/tcp    # Pago Services 1
pago-services2  30002/tcp    # Pago Services 2
ovobs           30999/tcp   # OpenView Service Desk Client
xqosd           31416/tcp    # XQoS network monitor
tetrinet        31457/tcp   # TetriNET Protocol
lm-mon          31620/tcp    # lm mon
gamesmith-port  31765/tcp    # GameSmith Port
iceedcp_tx      31948/tcp   # Embedded Device Configuration Protocol TX
iceedcp_rx      31949/tcp   # Embedded Device Configuration Protocol RX
t1distproc60    32249/tcp   # T1 Distributed Processor
apm-link        32483/tcp   # Access Point Manager Link
sec-ntb-clnt    32635/tcp   # SecureNotebook-CLNT
filenet-powsrm  32767/tcp   # FileNet BPM WS-ReliableMessaging Client
filenet-tms     32768/tcp    # Filenet TMS
filenet-rpc     32769/tcp    # Filenet RPC
filenet-nch     32770/tcp    # Filenet NCH
filenet-rmi     32771/tcp    # FileNET RMI
filenet-pa      32772/tcp    # FileNET Process Analyzer
filenet-cm      32773/tcp   # FileNET Component Manager
filenet-re      32774/tcp   # FileNET Rules Engine
filenet-pch     32775/tcp   # Performance Clearinghouse
filenet-peior   32776/tcp   # FileNET BPM IOR
filenet-obrok   32777/tcp   # FileNet BPM CORBA
idmgratm        32896/tcp    # Attachmate ID Manager
diamondport     33331/tcp    # DiamondCentral Interface
traceroute      33434/tcp    # traceroute use
snip-slave      33656/tcp   # SNIP Slave
turbonote-2     34249/tcp    # TurboNote Relay Server Default Port
p-net-local     34378/tcp   # P-Net on IP local
p-net-remote    34379/tcp   # P-Net on IP remote
profinet-rt     34962/tcp   # PROFInet RT Unicast
profinet-rtm    34963/tcp   # PROFInet RT Multicast
profinet-cm     34964/tcp   # PROFInet Context Manager
ethercat        34980/tcp   # EtherCAT Port
kastenxpipe     36865/tcp    # KastenX Pipe
neckar          37475/tcp    # science + computing's Venus Administration Port
unisys-eportal  37654/tcp   # Unisys ClearPath ePortal
galaxy7-data    38201/tcp    # Galaxy7 Data Tunnel
fairview        38202/tcp   # Fairview Message Service
agpolicy        38203/tcp   # AppGate Policy Server
turbonote-1     39681/tcp    # TurboNote Default Port
safetynetp      40000/tcp   # SafetyNET p
cscp            40841/tcp    # CSCP
csccredir       40842/tcp    # CSCCREDIR
csccfirewall    40843/tcp    # CSCCFIREWALL
fs-qos          41111/tcp    # Foursticks QoS Protocol
crestron-cip    41794/tcp    # Crestron Control Port
crestron-ctp    41795/tcp    # Crestron Terminal Port
candp           42508/tcp   # Computer Associates network discovery protocol
candrp          42509/tcp   # CA discovery response
caerpc          42510/tcp   # CA eTrust RPC
reachout        43188/tcp    # REACHOUT
ndm-agent-port  43189/tcp    # NDM-AGENT-PORT
ip-provision    43190/tcp    # IP-PROVISION
ciscocsdb       43441/tcp   # Cisco NetMgmt DB Ports
pmcd            44321/tcp    # PCP server (pmcd)
pmcdproxy       44322/tcp   # PCP server (pmcd) proxy
rbr-debug       44553/tcp   # REALbasic Remote Debug
rockwell-encap  44818/tcp    # Rockwell Encapsulation
invision-ag     45054/tcp    # InVision AG
eba             45678/tcp    # EBA PRISE
ssr-servermgr   45966/tcp    # SSRServerMgr
mediabox        46999/tcp   # MediaBox Server
mbus            47000/tcp    # Message Bus
dbbrowse        47557/tcp    # Databeam Corporation
directplaysrvr  47624/tcp    # Direct Play Server
ap              47806/tcp    # ALC Protocol
bacnet          47808/tcp    # Building Automation and Control Networks
nimcontroller   48000/tcp    # Nimbus Controller
nimspooler      48001/tcp    # Nimbus Spooler
nimhub          48002/tcp    # Nimbus Hub
nimgtw          48003/tcp    # Nimbus Gateway
isnetserv       48128/tcp   # Image Systems Network Services
blp5            48129/tcp   # Bloomberg locator
com-bardac-dw   48556/tcp    # com-bardac-dw
#+end_example
***** 拡張正規表現 -E
#+BEGIN_SRC sh :results output
grep -E '[0-9]{5}/tcp' /etc/services | head -n 5
#+END_SRC

#+RESULTS:
: ndmp            10000/tcp   # Network Data Management Protocol
: scp-config      10001/tcp   # SCP Configuration Port
: mvs-capacity	10007/tcp   # MVS Capacity
: octopus         10008/tcp   # Octopus Multiplexer
: swdtp-sv        10009/tcp   # Systemwalker Desktop Patrol
***** 行頭がu
#+BEGIN_SRC sh :results output
grep '^u' /etc/services | head -n 5
#+END_SRC

#+RESULTS:
: uucp-path       117/udp     # UUCP Path Service
: uucp-path       117/tcp     # UUCP Path Service
: uma		144/udp     # Universal Management Architecture
: uma       144/tcp     # Universal Management Architecture
: uaac            145/udp     # UAAC Protocol
***** 行末がa
#+BEGIN_SRC sh :results output
grep 'a$' /etc/services | head -n 5
#+END_SRC

#+RESULTS:
: td-replica      268/udp     # Tobit David Replica
: td-replica      268/tcp     # Tobit David Replica
: intrinsa        503/udp     # Intrinsa
: intrinsa        503/tcp     # Intrinsa
: #                          just a rendezvous port from which a
**** XXを除く
***** 「私は」を含み「蛹」を含まない -v
#+BEGIN_SRC sh :results output
grep "私は" ./mistery.txt
echo -------------------
grep "私は" ./mistery.txt | grep -v "蛹"
#+END_SRC

#+RESULTS:
: 私は全身を繭で覆われた蛹になっていたのです．
: 私は大変困ってしまいました．
: -------------------
: 私は大変困ってしまいました．

*** 複数のファイルから検索する
**** スペースで複数ファイルをつなぐだけ
#+BEGIN_SRC sh :results output
ls /etc/ssh/*config
echo ----------------
grep key /etc/ssh/ssh_config /etc/ssh/sshd_config
#+END_SRC

#+RESULTS:
#+begin_example
/etc/ssh/ssh_config
/etc/ssh/sshd_config
----------------
/etc/ssh/ssh_config:#   RekeyLimit 1G 1h
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_rsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ecdsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ed25519_key
/etc/ssh/sshd_config:# Ciphers and keying
/etc/ssh/sshd_config:#RekeyLimit default none
/etc/ssh/sshd_config:#PubkeyAuthentication yes
/etc/ssh/sshd_config:# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
/etc/ssh/sshd_config:# but this is overridden so installations will only check .ssh/authorized_keys
/etc/ssh/sshd_config:AuthorizedKeysFile	.ssh/authorized_keys
/etc/ssh/sshd_config:# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
/etc/ssh/sshd_config:# Change to no to disable s/key passwords
#+end_example
**** ディレクトリ以下全て検索 -r
sudoしないと実行できないが
#+BEGIN_SRC sh :results output
grep -r key /etc/ssh
#+END_SRC

#+RESULTS:
**** 検索結果に必ずファイル名を表示する -H
結果を比較せよ
#+BEGIN_SRC sh :results output
grep key /etc/ssh/sshd_config
echo ----------------------
grep -H key /etc/ssh/sshd_config
#+END_SRC

#+RESULTS:
#+begin_example
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
# Ciphers and keying
#RekeyLimit default none
#PubkeyAuthentication yes
# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys
# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
# Change to no to disable s/key passwords
----------------------
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_rsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ecdsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ed25519_key
/etc/ssh/sshd_config:# Ciphers and keying
/etc/ssh/sshd_config:#RekeyLimit default none
/etc/ssh/sshd_config:#PubkeyAuthentication yes
/etc/ssh/sshd_config:# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
/etc/ssh/sshd_config:# but this is overridden so installations will only check .ssh/authorized_keys
/etc/ssh/sshd_config:AuthorizedKeysFile	.ssh/authorized_keys
/etc/ssh/sshd_config:# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
/etc/ssh/sshd_config:# Change to no to disable s/key passwords
----------------------
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
# Ciphers and keying
#RekeyLimit default none
#PubkeyAuthentication yes
# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys
# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
# Change to no to disable s/key passwords
#+end_example
**** 検索結果に必ずファイル名を表示しない -h
結果を比較せよ
#+BEGIN_SRC sh :results output
grep key /etc/ssh/*config
echo ----------------------
grep -h key /etc/ssh/*config
#+END_SRC

#+RESULTS:
#+begin_example
/etc/ssh/ssh_config:#   RekeyLimit 1G 1h
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_rsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ecdsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ed25519_key
/etc/ssh/sshd_config:# Ciphers and keying
/etc/ssh/sshd_config:#RekeyLimit default none
/etc/ssh/sshd_config:#PubkeyAuthentication yes
/etc/ssh/sshd_config:# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
/etc/ssh/sshd_config:# but this is overridden so installations will only check .ssh/authorized_keys
/etc/ssh/sshd_config:AuthorizedKeysFile	.ssh/authorized_keys
/etc/ssh/sshd_config:# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
/etc/ssh/sshd_config:# Change to no to disable s/key passwords
----------------------
#   RekeyLimit 1G 1h
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
# Ciphers and keying
#RekeyLimit default none
#PubkeyAuthentication yes
# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys
# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
# Change to no to disable s/key passwords
#+end_example

*** 調査したいファイル一覧を作ってから検索する
出力を確認してから手打ちするのは面倒．
**** whileを使う...でも冗長
#+BEGIN_SRC sh :results output
ls /etc/ssh/*config
echo ---------------
ls /etc/ssh/*config | while read f; do grep -H key $f ; done
#+END_SRC

#+RESULTS:
#+begin_example
/etc/ssh/ssh_config
/etc/ssh/sshd_config
---------------
/etc/ssh/ssh_config:#   RekeyLimit 1G 1h
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_rsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ecdsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ed25519_key
/etc/ssh/sshd_config:# Ciphers and keying
/etc/ssh/sshd_config:#RekeyLimit default none
/etc/ssh/sshd_config:#PubkeyAuthentication yes
/etc/ssh/sshd_config:# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
/etc/ssh/sshd_config:# but this is overridden so installations will only check .ssh/authorized_keys
/etc/ssh/sshd_config:AuthorizedKeysFile	.ssh/authorized_keys
/etc/ssh/sshd_config:# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
/etc/ssh/sshd_config:# Change to no to disable s/key passwords
#+end_example
**** xargsと組み合わせる
while のコードと比べよ．
xargsはlsの出力を受け取り，"grep key"のうしろに引数として渡す．
#+BEGIN_SRC sh :results output
ls /etc/ssh/*config | xargs grep key
#+END_SRC

#+RESULTS:
#+begin_example
/etc/ssh/ssh_config:#   RekeyLimit 1G 1h
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_rsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ecdsa_key
/etc/ssh/sshd_config:#HostKey /etc/ssh/ssh_host_ed25519_key
/etc/ssh/sshd_config:# Ciphers and keying
/etc/ssh/sshd_config:#RekeyLimit default none
/etc/ssh/sshd_config:#PubkeyAuthentication yes
/etc/ssh/sshd_config:# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
/etc/ssh/sshd_config:# but this is overridden so installations will only check .ssh/authorized_keys
/etc/ssh/sshd_config:AuthorizedKeysFile	.ssh/authorized_keys
/etc/ssh/sshd_config:# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
/etc/ssh/sshd_config:# Change to no to disable s/key passwords
#+end_example

*** ファイル名を検索する
**** find
名前のせいで検索コマンドと間違われやすいが，単にディレクトリ以下のファイルを延々出力するだけ．
***** 普通に使う
#+BEGIN_SRC sh
find .
#+END_SRC

#+RESULTS:
| 0                                            |
| ./zipcode                                    |
| ./hoge                                       |
| ./ans                                        |
| ./test.docx                                  |
| ./read.bash                                  |
| ./#shell_programing_practical_technique.org# |
| ./file3                                      |
| ./file4                                      |
| ./.DS_Store                                  |
| ./file2                                      |
| ./shell_programing_practical_technique.html~ |
| ./file2.backup                               |
| ./Unix_for_OSX.org                           |
| ./Unix_for_OSX.org~                          |
| ./shell_programing_practical_technique.org   |
| ./shell_programing_practical_technique.org~  |
| ./dir                                        |
| ./.#shell_programing_practical_technique.org |
| ./file1                                      |
| ./file1.backup                               |
| ./tmpfile.bash                               |
| ./data                                       |
| ./error                                      |
| ./hoge.bash                                  |
| ./if.bash                                    |
| ./file3.backup                               |
| ./mistery.txt                                |
***** ファイルだけを表示 -type f
#+BEGIN_SRC sh
find . -type f
#+END_SRC

#+RESULTS:
| ./zipcode                                    |
| ./hoge                                       |
| ./ans                                        |
| ./test.docx                                  |
| ./read.bash                                  |
| ./file3                                      |
| ./file4                                      |
| ./.DS_Store                                  |
| ./file2                                      |
| ./shell_programing_practical_technique.html~ |
| ./file2.backup                               |
| ./Unix_for_OSX.org                           |
| ./Unix_for_OSX.org~                          |
| ./shell_programing_practical_technique.org   |
| ./shell_programing_practical_technique.org~  |
| ./file1                                      |
| ./file1.backup                               |
| ./tmpfile.bash                               |
| ./data                                       |
| ./error                                      |
| ./hoge.bash                                  |
| ./if.bash                                    |
| ./file3.backup                               |
| ./mistery.txt                                |
***** grepと併せて使う
#+BEGIN_SRC sh :results output
find . -type f | grep '\.org$' | xargs grep 'Finder'
#+END_SRC

#+RESULTS:
: ./Unix_for_OSX.org:|   634 | ??      | 106:15.77 | Finder                                        |          |              |
: ./Unix_for_OSX.org:|   648 | ??      |   0:39.59 | ACCFinderSync                                 |          |              |
: ./Unix_for_OSX.org:| 35192 | ??      |   0:00.22 | ACCFinderSync                                 |          |              |
: ./Unix_for_OSX.org:ターミナルを仕えは，Finderより多くの情報を得られる．
: ./Unix_for_OSX.org:|     8 | com.apple.preferences.extensions.FinderSync.plist                          |               |        |             |       |      |          |

*** 検索対象の前後の行を出力する -A, -B, -C
-A は After，-B は Before，と覚えようか．
-C はダジャレ？

**** ファイルを作る
#+BEGIN_SRC sh
echo hello \\n world \\n and Japan > greet
cat greet
#+END_SRC

#+RESULTS:
| hello |       |
| world |       |
| and   | Japan |

**** 使ってみる
#+BEGIN_SRC sh :results output
grep world greet
echo -------------------
grep world greet -A 1
echo -------------------
grep world greet -B 1
echo -------------------
grep world greet -C 1

#+END_SRC

#+RESULTS:
#+begin_example
 world
-------------------
 world
 and Japan
-------------------
hello
 world
-------------------
hello
 world
 and Japan
#+end_example

*** 検索語句を含むファイルのリストを作る
欲しいのは行ではなく，ファイル名．

**** ファイルを作る
#+BEGIN_SRC sh
for n in $(seq 1 10); do echo hello > greet$n; done
#+END_SRC

#+RESULTS:
| #shell_programing_practical_technique.org# |
| Unix_for_OSX.org                           |
| Unix_for_OSX.org~                          |
| ans                                        |
| data                                       |
| dir                                        |
| error                                      |
| file1                                      |
| file1.backup                               |
| file2                                      |
| file2.backup                               |
| file3                                      |
| file3.backup                               |
| file4                                      |
| greet                                      |
| greet1                                     |
| greet10                                    |
| greet2                                     |
| greet3                                     |
| greet4                                     |
| greet5                                     |
| greet6                                     |
| greet7                                     |
| greet8                                     |
| greet9                                     |
| hoge                                       |
| hoge.bash                                  |
| if.bash                                    |
| mistery.txt                                |
| read.bash                                  |
| shell_programing_practical_technique.html~ |
| shell_programing_practical_technique.org   |
| shell_programing_practical_technique.org~  |
| test.docx                                  |
| tmpfile.bash                               |
| zipcode                                    |

**** 検索する
#+BEGIN_SRC sh :results output
grep -r hello . | sed 's/:.*//' | uniq
#+END_SRC

#+RESULTS:
#+begin_example
./greet
./#shell_programing_practical_technique.org#
./greet5
./greet2
./greet3
./greet4
./greet10
./shell_programing_practical_technique.org
./greet1
./greet6
./greet8
./greet9
./greet7
#+end_example

**** 一応，-l オプションでもできる（実力がつかないので非推奨）
#+BEGIN_SRC sh :results output
grep -rl hello . | cat
#+END_SRC

#+RESULTS:
#+begin_example
./greet
./#shell_programing_practical_technique.org#
./greet5
./greet2
./greet3
./greet4
./greet10
./shell_programing_practical_technique.org
./greet1
./greet6
./greet8
./greet9
./greet7
#+end_example

** 単語や文字の数え上げ
*** 文字数を数える wc
**** 基本的な出力
行数，単語数，バイト数
#+BEGIN_SRC sh
echo This is a pen | wc
#+END_SRC

#+RESULTS:
: 1       4      14

**** -m オプションで，現在のロケールに合わせてカウントする
#+BEGIN_SRC sh
cat mistery.txt
cat mistery.txt | wc -m
#+END_SRC

#+RESULTS:
| 朝目覚めると，                               |
| 私は全身を繭で覆われた蛹になっていたのです． |
| 私は大変困ってしまいました．                 |
| 「会社に休みの連絡ができない」               |
| 178                                          |

**** ロケールを変更して再カウント
#+BEGIN_SRC sh
echo $LANG
cat mistery.txt | LANG=ja_JP.UTF-8 wc -m
#+END_SRC

#+RESULTS:
| en_JP.UTF-8 |
|          62 |

**** 改行記号を除外して数える
#+BEGIN_SRC sh
cat mistery.txt | wc -m
cat mistery.txt | tr -d '\n' | wc -m
#+END_SRC

#+RESULTS:
| 178 |
| 174 |

**** sed や awk を使った数え方
1行目のワンライナーが期待したとおりに動かない．

#+BEGIN_SRC bash
cat mistery.txt | sed 's/./&\\n/g' | wc -l # 全ての文字に改行文字をくっつけて改行させ，wcに-lオプションをつけて行ごとにカウントさせたい，という意図．
cat mistery.txt | sed 's/./&\\n/g' | awk 'NF!=0' | wc -l
cat mistery.txt | awk '{a+=length($0)}END{print a}' #全ての列について長さをカウントし，aに累積的に足していく．足し終わったら，表示する．
#+END_SRC

#+RESULTS:
|   4 |
|   4 |
| 174 |
| 174 |

**** grep -o を使う
ただし，POSIX にはないので注意．
#+BEGIN_SRC sh
echo 隣の客はよく柿食う客だ | grep 客
echo 隣の客はよく柿食う客だ | grep -o 客 # 1行1個で表示
cat mistery.txt | grep -o . | wc -l
#+END_SRC

#+RESULTS:
| 隣の客はよく柿食う客だ |
| 客                     |
| 客                     |
| 174                    |

*** 単語や語句を数える
**** grep で抽出，uniq -c で数える
#+BEGIN_SRC sh :results output
cat mistery.txt
echo '----------------------------grep -o'
cat mistery.txt | grep -o 私は
echo '----------------------------grep -o uniq -c'
cat mistery.txt | grep -o 私は | uniq -c
#+END_SRC

#+RESULTS:
: 朝目覚めると，
: 私は全身を繭で覆われた蛹になっていたのです．
: 私は大変困ってしまいました．
: 「会社に休みの連絡ができない」
: ----------------------------grep -o
: 私は
: 私は
: ----------------------------grep -o uniq -c
:    2 私は
**** grep -o を使いたくないなら sed
でも自分の環境ではうまくいかない．
改行がうまくできていない．なんで？
-> GNU sed の機能だから．
Mac や BSD にインストールされている，オリジナルの sed にはない．
Mac ではLcoreutils をインストールすれば，gsed コマンドで GNU sed が使えるらしい．
#+BEGIN_SRC sh
  cat mistery.txt | sed 's/私は/\\n&\\n/g' | cat
#+END_SRC

#+RESULTS:
| 朝目覚めると，                                   |
| \n私は\n全身を繭で覆われた蛹になっていたのです． |
| \n私は\n大変困ってしまいました．                 |
| 「会社に休みの連絡ができない」                   |
**** Tsukubai の count を使う
cat mistery | grep -o '私は' | count 1 1

cout 1 1
は，1列目から1列目までをきぞ得る対象のキーにする，という意味．
**** 検索したい単語がたくさんあるとき
検索したい単語をファイルに書いておき，grepに渡す
**** 拡張正規表現を使う
#+BEGIN_SRC sh
grep -oE '(会社|私は)' mistery.txt
#+END_SRC

#+RESULTS:
| 私は |
| 私は |
| 会社 |
**** 英単語を数える
tr に，スペースを改行に変換させればいいので，比較的簡単．
ただし，文末の単語などはピリオドがついた別の単語としてカウントされてしまうので，
記号類は tr -d で除去してから数える．
cat file | tr ' ' '\n' | tr -d '.;' | sort | count 1 1

大文字小文字を区別したくないときも trを使う．
cat file | tr ' ' '\n' | tr -d '.;' | tr 'A-Z' 'a-z' | sort | count 1 1
*** 文字の出現頻度を数える
まず1文字1行にする．
cat mistery.txt | sed 's/./&\n/g'

それをsort して count
cat mistery.txt | sed 's/./&\n/g' | sort | count 1 1

改行，半角スペース以外で一番使われている文字を調べる．
cat mistery.txt | sed 's/./&\n/g' | sort | count 1 1 |
 awk 'NF==2' | # 1列しかないレコード（改行？）を除去
 sort -k2,2nr | # 下で説明
 head

sort のオプション
- k: キーとするフィールド
- n: 数の大きさでソート
- r: ソート順を反転して降順に
つまり，-k2,2nr は，「2列目から2列目をキーとし，n, rオプションを2列目だけに適用する」という意味．
*** 斎藤さん（同音異字）の数を数える
データ管理の現場では「名寄せ」と呼ばれる作業．
形態素解析エンジン MeCab を使う．
**** インストール
sudo apt-get install mecab libmecab-dev
sudo apt-get install mecab-ipadic-utf8
**** 使う
echo 私の血にはシェルが混ざっています． | mecab

cat yayakoshi.txt
斉藤さんが，斎藤さんに，1000円借りたのですが，
（以下略）

cat yayakoshi.txt | mecab | grep 人名 | grep 固有名詞

あとは読みを取り出して集計するだけ．

ただし， uniq するときは前もって sort しておくこと．
重複が生じる．
uniq にはソート機能は入っていない．まさにUNIX哲学．
でも，実は sort -u で同じことができる．

** テキストの比較
*** 2つのテキストファイルを比較する
左を古いファイルにするといい．
diff old.txt new.txt
出力
< old sentence
---
> new sentence

*** ディレクトリのファイルを比較する
ディレクトリをまるごとバックアップしているとき．
バックアップと，現行のものを比べたいことがある．

**** バックアップと現行，それぞれを見てみる
> tree backup/ | head

（出力）

> tree current/ | head
（出力）
自分の環境にはtree コマンドがない!!!
**** diff -r を使う
>diff -r backup/ current/

Common subdirectories: 同一なディレクトリA
Common subdirectories: 同一なディレクトリB
（略）
diff backup/違うディレクトリ current/違うディレクトリ
**** 差分だけみたいなら -rq
**** 時間がかかりすぎるなら
それぞれのディレクトリに入り，ファイルリストを作ってdiff
cd backup/
find . > list_backup
cd current # 相対ディレクトリの場合は適宜変更
find . > list_current
diff list_backup list_current


それぞれのディレクトリに一度入らないとだめ．
ディレクトリ名が違うので，リストの全部の行が違う，とされてしまう．
**** ディレクトリ移動が面倒，あるいは中間ファイルを作るのが面倒なら :目から鱗:
bash の機能，プロセス置換を使う．
<( )
というコマンド．

本来ファイルがあるべきところに，コマンドを書く時に使う．
diffなら，
diff fileA fileB
というふうにつかうので，
diff <(コマンド) <(コマンド)
とする．

つまり，
diff <(cd backup/; find) <(cd current/; find)
とする．

cd コマンドは()の外に影響を及ぼさないので，ディレクトリがかわってしまうこともない．
自動化の際に便利．
**** ファイルの大きさを手がかりとして比較する                   :目から鱗:
cd backup/
find . -type f | xargs ls -l | self 5 NF > fsize_backup
cd current/
find . -type f | xargs ls -l | self 5 NF > fsize_current
diff fsize_{backup,currnt} #うまい!!!
***** 解説
self 5 NF

self はTsukubaiの列抽出コマンド（awkではだめなのか？）．
"5" は，ls -l の出力の5列目，ファイルサイズの列を指定している．
NFは最終列，つまりファイルパス．

*** ファイルが同じだったら/違ったら✕✕する
Tsukubai を使うようなのでとばす
** TODO 文章の校正
*** 特定の語句を置き換える
sed の数珠つなぎでできる．
バックアップをとること（手作業がめんどくさければ次節 [[*%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E8%AA%9E%E5%8F%A5%E3%82%92%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B][複数のファイルで特定の語句を置き換える]]）．
cp -p で，ファイルのタイムスタンプを変えずにコピー！！
---------------------------------------------
cp -p genkou genkou.org
cat genkou | sed | sed | ... > genkou.new
---------------------------------------------

*** 複数のファイルで特定の語句を置き換える
上書きで一気にやろう．
でも，バックアップファイルも作る．
ただし，この方法を2回以上繰り返すと，古いバックアップファイルを上書きしてしまって後戻りできなくなるので注意．

i- オプションは，バックアップファイルに使いたい拡張子

sed -i.bak 's/卵/玉子/g' file{1,2,3}

*** 表記揺れや記号の不統一をチェックする
**** 簡単な表記揺れチェック

普通に
grep エクセル ファイル名
grep Excel ファイル名

***** もっとたくさんのキーワードを検索するときは，拡張正規表現を使うと良い．

grep -E "(個所|個所|ヶ所|か所|カ所|ヵ所|ケ所)" ファイル名

**** 記号の調査
集計する
#+BEGIN_SRC sh
  # cat #.tex | grep -o '[． . 。 ]' | sort | uniq -c
#+END_SRC
***** 凶悪なチルダ問題
環境によってばらばら．
入力ができなければ grep もできないので凶悪．


#+BEGIN_SRC bash
echo -e U+007E '\u007E'
echo -e U+02DC '\u02DC'
echo -e U+02F7 '\u02F7'
echo -e U+223C '\u223C'
echo -e U+301C '\u301C'
echo -e U+FF5E '\uFF5E'
#+END_SRC

#+RESULTS:
: U+007E \u007E
: U+02DC \u02DC
: U+02F7 \u02F7
: U+223C \u223*
: U+301C \u301C
: U+FF5E \uFF5E
そして，これらをどうやって grep にわたすか？
変数に一度格納する．

#+BEGIN_SRC bash
TILDE=$(echo -e '\u007E\u02DC\u02F7\u223C\u301C\uFF5E')
echo $TILDE
# cat *.tex | grep -o "[$TILDE]" | sort | uniq -c
#+END_SRC

#+RESULTS:
: \u007E\u02DC\u02F7\u223C\u301C\uFF5E

grepに渡す正規表現はクォートする．
こうすると変数が値に置き換わって渡される．
**** 文字コードを駆使したややこしい調査の一例
- 全角文字の後に半角ピリオド
- 半角文字の後に全角句点
これらの調査は，文字コードを使うと便利．
***** 半角ピリオドと全角句点を，1つ前の文字と一緒に抽出する
#+BEGIN_SRC bash
# cat *.tex | grep -o '.[.。]'
#+END_SRC
***** 4バイトのレコードを探す
全角文字は3バイト，ASCII文字は1バイトなので．
#+BEGIN_SRC bash
# cat *.tex | grep -o '.[.。]' | LANG=C awk 'length($0)==4' | head
#+END_SRC
ここで，LANG=C とするのがポイント．これでバイト数が返る．
日本語環境だとGNU Awk の length は文字数を返してきてしまう．
***** 何件あったか？
#+BEGIN_SRC bash
# cat *.tex | grep -o '.[.。]' | LANG=C akw 'length($0)==4' | wc -l
#+END_SRC
***** それらはどこにあったか？
一度，リストにし，それを grep に渡す．
#+BEGIN_SRC bash
# cat *.tex | grep -o '.[.。]' | LANG=C akw 'length($0)==4' | sort -u > tmp.list
# cat *.tex | grep -F -f tmp.list | less
#+END_SRC
grep -F は，正規表現を使わず，文字列をそのまま検索する
**** 「です・ます」「だ・である」チェック
***** mecab に分かち書きさせる
#+BEGIN_SRC bash
echo 私の血にはシェルが混ざっています． | mecab -Owakati
#+END_SRC
***** 語尾を抽出する

#+BEGIN_SRC bash
echo '私 の 血 に は シェル が 混ざっ て い ます 。
こんにちは と おもい ます 。
こんばんは で ある 。
おはよう です 。
おはよう で ある 。
今日 は 良い 天気 です 。
' > temp
cat temp
cat temp | sed 's/ 。/。/g' | grep -o
#+END_SRC

#+RESULTS:

*** スペルチェックを行う
GNU aspell を使う．
普通はチェックオプション -c を使い，対話的に

aspell -c file

とする．

他のコマンドと組み合わせて使いたい時には -a オプションを使う．
#+BEGIN_SRC sh
echo "All four base are berong to us" | aspell -a
#+END_SRC

#+RESULTS:
: @(#) International Ispell Version 3.1.20 (but really Aspell 0.60.6.1)
: *
: *
: *
: *
: & berong 27 18: Bering, bronc, belong, Behring, bearing, baronage, bring, wrong, bong, brink, bronco, baring, boring, Bronx, Byron, Byronic, baron, boron, prong, barony, barons, sarong, throng, Bering's, Byron's, baron's, boron's
: *
: *
:

*** 変なバイナリが混入していないか調査する
Windows とのファイルのやりとりで生じる，文字コード問題．

**** 改行記号
***** 文字コードを調べる
#+BEGIN_SRC sh
nkf -g Unix_for_OSx.org
#+END_SRC

#+RESULTS:
: UTF-8

***** 改行コードもきちんと変更すること．
nkf -wLux と打つのを習慣にするといい．

- w: UTF-8 にする
- Lu: 改行コードをUNIX式にする
- x: 半角カナをそのままにする

***** od コマンドで検索

**** テキストの表記上必要ないバイナリの削除（ASCII コードのみを含むファイルの場合）

***** バイナリを全部出力してみる
#+BEGIN_SRC sh
awk 'BEGIN{for(i=0; i<256; i++){printf("%c", i)}}' > ascii
wc -c ascii
#cat ascii # これは文字化けしてしまう
#+END_SRC

#+RESULTS:
:      256 ascii

印字できるものだけを表示する（-d は削除，-cは出力の反転）
#+BEGIN_SRC sh
cat ascii | tr -dc "[:print:]\n\t"
#+END_SRC

#+RESULTS:
:
:  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

**** 文字コードに対して不正なバイナリをチェック
iconv を使う．
*** 長い行を折り返す
**** 1行の文字数が決まっている時
Excel のワークシートに貼り付けないといけない時など．
sed で拡張正規表現を使い，文字数に対してアクションを適用
**** 日本語と英語が混ざっている時
MeCab の分かち書きと AWK のコンビネーション
*** 不必要なマークアップ/コメント/スペースを消す
**** 余計な半角スペースの除去
sed でOK．
**** HTML 文書のコメント除去
- sed でタグの前後に改行を入れる
- sed の d コマンドでタグを削除する
**** タグの削除
最長一致に注意しながら sed を使う．
*** マークアップ/スペースを後から差し込む
プレーンテキスト文書の1行目をh1に，各段落をpにするには
awk を使い，文単位で改行されているものを，1行1レコード（段落）に直す
各行にawk でタグをかぶせ，完了．
**** テーブルを作る
sed を使う方法
awk を使う方法
*** 特定のフォーマットにデータを流し込む
tsukubai の mojihame コマンドを使う．
** その他テキストを扱うときの小技
*** Vim でコマンドを使う
*** カタカナや数字の全角/半角を相互変換する
nkf -Z4で全角半角を反転．
全角半角混じりは，一度全てを全角にしてから半角にする．
echo オジｻンのメール | nkf | nkf -Z4

全角数字が混入している時に，全角数字だけを半角にしたいときには，-Z0 オプションを使う．
* ファイルの取扱いとシステムの操作
** バックアップ/同期
** 圧縮されたファイルの操作
** ファイルの整理
** ファイルの暗号化
** 自動化
** ログからの情報抽出と活用
** プロセスに関する注意点
* ファイルシステムをデータベースにする
** データの置き方
** データの連結や集計
** データの更新
** データの印刷/アウトプット
** 補足
* 大きなデータを処理する
** マシンスペックの調査
** マルチスレッド/マルチプロセス
** 計算の効率化
* 画像，表計算ソフト，その他特殊のゲータを扱う
** バイナリの読み書き
** 画像処理
** フォーマットの換
** オフィススイートとの連携
* CLI的インターネットとの付き合い方
** Web サイトの活用
*** Web サイトをまるごとダウンロードする
#+BEGIN_SRC bash
cd ../C/meikai/answer
#wget -r http://meikaicansewer.blogspot.com
#tree
ls -l
#+END_SRC

#+RESULTS:
: total 0
: drwxr-xr-x  7 ahayashi  staff  238 Dec 25 13:21 meikaicansewer.blogspot.com

** HTML 文書の加工
** サーバをまたいだ処理
** 電子メールの活用
** IP アドレスの取り扱い
* 計算
** 基本的な計算
** 日付の計算
** 科学計算
** 実験データの処理
* 付録
** Upstart
** Ubuntu の設定メモ
** cgroups の設定
** いたずら
* 知らなかったコマンド
- uniq: 重複除去
