#+TITLE: 数値計算のためのFortran 90/95プログラミング入門
#+STARTUP: overview
* はじめに
** Fortran 90/95の特徴
- 簡単かつ簡潔
- 誤りを犯しにくい
- 便利な道具が予め用意されている
- 大規模高速演算
- 無料のコンパイラ
** 本書の特徴
- コンパイラの取扱方法
- 画像の図化
* 反復演算と基本プログラミング
** Fortran 計算環境を整えよう
** TODO 反復演算と基本プログラミング
*** 簡単な反復演算
**** List 1.1
#+BEGIN_SRC fortran
  program loop
      implicit none
      integer i, wa
      wa = 0
      do i = 1, 100
          wa = wa + i
      enddo
      write(*, *) 'wa = ', wa
  end program loop
#+END_SRC

#+RESULTS:
: wa =         5050
**** プログラムと変数の名称
program 文，31字まで許される．
- プログラム名や変数名は，必ず英字から始める
- プログラム名や変数名には，- や . を使ってはいけない
- プログラム名や変数名には，2 バイト文字を使ってはならない
- プログラム名と同じ変数名を使ってはならない
- 組み込み手続きと同じ名称のプログラムや変数を宣言してはならない
**** コメント領域と宣言文
!でコメント．Emacs だとCになってしまうんだが...
**** do ループによる総和の計算
do 文中の変数 i は，制御変数といわれる．
必ず整数型変数を用いる．
**** 変数の初期値と変数への代入の順序
必ず初期値を宣言すること．

人為的に流れを変更しない限り，プログラムは上から順に実行される．
**** write 文による出力
write(ファイル番号, 書式)
- ファイル番号: * と書くと標準出力
- 書式: * と書くと並び出力．変数の型に合った書式で出力される．
**** implicit none
宣言していない変数をうっかり使ってしまうとバグの元になるので，必ずこれを書く．
「エラーは出ないが，なぜか結果がおかしい」という悲劇を防げる．
**** 演習 1.1
リスト 1.2 のプログラムを実行して，コンパイルおよび実行時にどのような結果が得られるかを確かめよ．
また，このプログラムに implicit none 宣言を加えて，コンパイル時のエラー出力を確認せよ．
***** implicit none なし
結果が 100 となってしまった．しかもエラーなし．
#+BEGIN_SRC fortran
  program loop_err
        !no implicit none
        integer i, wa
        wa = 0
        do i = i, 100
           wa = va + i
        enddo
        write(*, *) 'wa = ', wa
        end program loop_err
#+END_SRC

#+RESULTS:
: wa =          100
***** implicit none あり
ちゃんとエラーが出て，コンパイルが失敗した．
-> Error: Symbol 'va' at (1) has no IMPLICIT type; did you mean 'wa'?
#+BEGIN_SRC fortran
  program loop_err
        implicit none
        integer i, wa
        wa = 0
        do i = i, 100
           wa = va + i
        enddo
        write(*, *) 'wa = ', wa
        end program loop_err
#+END_SRC
*** 自由形式で見やすいプログラムを書く
- 行末に & を書くと，次の行は継続行になる．
- 適切にインデントせよ
- 基本的に小文字で書け（実はFortran 90/95，FORTRAN では，大文字と小文字の区別は無いけど）

*** 次のステップに移るための準備
プログラムごとにディレクトリを分けると良い．

**** 演習 1.2
以下の3つの自然数の累乗の和を表す公式を，実際に計算を行って確かめよ．
n の範囲は 100 以下の適当な自然数とする．

k が 1 から n　まで変化するとき，
- k の 1 乗和 = 1/2 * n (n + 1)
- k の 2 乗和 = 1/6 * n (n + 1)(2n + 1)
- k の 3 乗和 = 1/4 n^2 (n + 1)^2
***** 1 乗和
#+BEGIN_SRC fortran :results output
  program power1_sum
        implicit none
        integer i, n, wa0, wa1

        n = 10
        wa0 = 0
        wa1 = 0

        wa1 = n * (n + 1) / 2

        do i = 1, n
           wa0 = wa0 + i ** 1
        enddo
        write(*, *) wa0, ' = ', wa1
        end program power1_sum
#+END_SRC

#+RESULTS:
: 55  =           55
***** 2 乗和
#+BEGIN_SRC fortran :results output
  program power2_sum
        implicit none
        integer i, n, wa0, wa1

        n = 100
        wa0 = 0
        wa1 = 0

        wa1 = n * (n + 1) * (2 * n + 1) / 6

        do i = 1, n
           wa0 = wa0 + i ** 2
        enddo
        write(*, *) wa0, ' = ', wa1
        end program power2_sum
#+END_SRC

#+RESULTS:
: 338350  =       338350
***** 3 乗和
#+BEGIN_SRC fortran :results output
  program power3_sum
        implicit none
        integer i, n, wa0, wa1

        n = 10
        wa0 = 0
        wa1 = 0

        wa1 = n ** 2 *  (n + 1) ** 2 / 4

        do i = 1, n
           wa0 = wa0 + i ** 3
        enddo
        write(*, *) wa0, ' = ', wa1
        end program power3_sum
#+END_SRC

#+RESULTS:
: 3025  =         3025

**** 演習 1.3
a_n = a_(n-1) + a_(n-2) (n >= 3) という関係で定められる関係を考える（フィボナッチ数列）．
a_1 = 1, a_2 = 2 のとき，この数列の a_1 から a_10 までの値を出力するプログラムを do ループを用いて作成せよ．
#+BEGIN_SRC fortran :results output
  program fibonacci
        implicit none
        integer i, n, a1, a2, a_n, a_n1, a_n2, temp

        a1 = 1
        a2 = 2
        temp = 0

        n = 10

        a_n2 = a1
        a_n1 = a2

        do i = 3, n
           a_n = a_n1 + a_n2

           temp = a_n1
           a_n1 = a_n
           a_n2 = temp

           write(*, *) a_n
        enddo

        end program fibonacci
#+END_SRC

#+RESULTS:
: 3
:  5
:  8
: 13
: 21
: 34
: 55
: 89

*** if 文と stop 文
**** List 1.3
偶数と奇数について，それぞれ和を算出する．
剰余関数 mod(割られる数, 割る数) を使う．

if 文では中括弧でなく，then を使う．
最後はendif
#+BEGIN_SRC fortran
  if (条件) then
     式
  else if (条件) then
     式
  else
     式
  endif
#+END_SRC
等号の否定は，lisp と同様に
/=
なので注意．

剰余が1以外になることは考えられないが，念の為
else
  step 'something is wrong!!'
とするといい．

その他のif 文の使い方に関しては [[*if %E6%96%87%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9][if 文の基本的な使い方]] 参照．

*** 無限ループ
ループを抜ける仕組みを作らないと，無限ループになる．

**** List 1.4
#+BEGIN_SRC fortran :tangle list0104.f90
  program loop_inf
  implicit none
  integer wa, n, i
  do
     write(*, *) ' input n (if n <=, stop)) : ' !
     read (*, *) n
     if (n <= 0) stop ' good bye ... ' !
     wa = 0
     do i = 1, n
        wa = wa + i
     enddo
     write(*, *) 'wa = ', wa
  enddo
  end program loop_inf
#+END_SRC


do ループ
制御変数使っても，使わなくてもいい．

write 文の書式については [[*%E5%85%A5%E5%87%BA%E5%8A%9B%E3%81%AE%E6%9B%B8%E5%BC%8F][入出力の書式]] 参照．


**** read 文
read(ファイル番号, 書式) 変数

ファイル番号をアスタリスクにすると，標準入力．
書式をアスタリスクにすると，変数の型に合った書式で読み込まれる．

*** do ループの始値・終値とストライド（増分値）

#+BEGIN_SRC fortran
do i = m, n, k  ! 始値m, 終値n, ストライドk
    wa = wa + i
enddo
#+END_SRC
もし m > n だと，ループは一度も実行されず，enddo の次の文へ移る．
なので，制御変数が減少していくループのときは，ストライドを負の値にするのをわすれないこと．



**** 演習 1.4
いろいろな条件のdoループを書き，出力を確認せよ．
doループ終了直後の制御変数の値を確認せよ．

制御変数は，直感よりも1回分多く，値が変化している．
#+BEGIN_SRC fortran :results output
  program do_1_4_1
        implicit none
        integer wa, m, n, k, i
        character(20) :: message = 'The value of i is '

        m = 1
        n = 10
        k = 1
        wa = 0

        do i = m, n, k
           wa = wa + i
           write(*, *) wa
        enddo
        write(*, '(a)', advance = 'no') trim(message)   ! a の両脇には括弧が必要
        write(*, *) i
        end program do_1_4_1
#+END_SRC

#+RESULTS:
#+begin_example
1
           3
           6
          10
          15
          21
          28
          36
          45
          55
The value of i is          11
#+end_example

#+BEGIN_SRC fortran :results output
  program do_1_4_2
        implicit none
        integer wa, m, n, k, i
        character(20) :: message = 'The value of i is '

        m = 10
        n = 1
        k = -1
        wa = 0

        do i = m, n, k
           wa = wa + i
           write(*, *) wa
        enddo
        write(*, '(a)', advance = 'no') trim(message)   ! a の両脇には括弧が必要
        write(*, *) i
        end program do_1_4_2
#+END_SRC

#+RESULTS:
#+begin_example
10
          19
          27
          34
          40
          45
          49
          52
          54
          55
The value of i is           0
#+end_example

*** exit, cycle, goto 文
- exit: 1つ分のループから抜けて，enddo 文の次の実行文に移る
- cycle: 以降の処理はせず，上の do 文に戻る
- goto: goto 文が指定する番号を持った continue 文へジャンプする．多重ループから抜けるときに使う．
**** List 1.5
ok.
**** List 1.6
ok.
**** DONE 演習 1.5
List 1.4 のプログラムを改良して，入力値を2つの整数m, n (m <= n) とし，
その範囲の整数の和を計算するプログラムとせよ．

#+BEGIN_SRC fortran :tangle ex0105.f90
  program loop_inf
  implicit none
  integer wa, m, n, i
  do
     write(*, *) ' input m and n (if n <= m, stop)) : ' !
     write(*, *) 'm, the smaller:'
     read (*, *) m
     write(*, *) 'n, the larger:'
     read (*, *) n
     if (n <= m) stop ' good bye ... ' !
     wa = 0
     do i = m, n
        wa = wa + i
     enddo
     write(*, *) 'wa = ', wa
  enddo
  end program loop_inf
#+END_SRC

**** DONE 演習 1.6
演習 1.5 のプログラムを改良して， m > n の場合でもその範囲の整数の和を計算できるようなプログラムとせよ．
#+BEGIN_SRC fortran :tangle ex0106.f90
  program loop_inf
  implicit none
  integer wa, m, n, i
  do
     write(*, *) ' input m and n (if n == m, stop)): '
     write(*, '(a)', advance = 'no') 'm:'
     read (*, *) m
     write(*, '(a)', advance = 'no') 'n:'
     read (*, *) n
     wa = 0
     if (m < n)  then
        do i = m, n
           wa = wa + i
        enddo
     else if (n < m) then
        do i = n, m
           wa = wa + i
        enddo
     else
        stop ' good bye ... '
     endif
     write(*, *) 'wa = ', wa
  enddo
  end program loop_inf
#+END_SRC
**** DONE 演習 1.7
相異なるn個のものからr個を取るときの
- 順列
- 組み合わせ
を出力するプログラムを，do ループを用いて作成せよ．
ただし(0 <= r <= n, n <= 10)

#+BEGIN_SRC fortran :tangle ex0107.f90
    program loop_inf
      implicit none
      integer n, r, sa, i, npr, ncr, progr
        do
         write(*, '(a)', advance = 'no') 'input n (if n > 10, stop):'
         read (*, *) n
         write(*, '(a)', advance = 'no') 'input r (if r < 0 or n < r, stop):'
         read (*, *) r
         npr = 1
         ncr = 1
         progr = 1
         sa = n - r

         if (n > 10) then
            stop ' good bye ...'
         else if (r < 0 .or. n < r) then
            stop ' good bye ...'
         else if (r == 0) then
         else
            do i = sa + 1, n
               npr = npr * i
            enddo
            do i = 1, r
               progr = progr * i
            enddo
            ncr = npr / progr
         endif
         write(*, *) 'npr = ', npr
         write(*, *) 'ncr = ', ncr
      enddo
    end program loop_inf
#+END_SRC


**** 演習 1.8
**** 演習 1.9
**** 演習 1.10
** 実数型変数を用いる反復計算
** 反復計算の簡単な応用例
** 入出力に関する機能
** 本章で扱われた基本プログラミングの要約
* 配列を用いるプログラミング
* モジュール副プログラム
* 外部副プログラム
* 副プログラムの新機能
* 数値計算への応用
* 付録
** Fortran 90/95 に関する補足
*** 変数の型
*** if 文の基本的な使い方
| 書き方  | 意味   |
|---------+--------|
| .and.   | かつ   |
| .or.    | または |
| .true.  | 真     |
| .false. | 偽     |
*** 入出力の書式
character(30) : char1 = 'Fortran'
write(*, '(a5)') char ! charを5文字幅で出力

桁数を指定しないと，全部書き出す．
