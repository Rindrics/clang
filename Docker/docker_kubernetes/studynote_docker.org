#+TITLE: 勉強ノート
* 1. Docker の基礎
docker image pull gihyodocker/echo:latest
これはOK．

docker container run -t -p 9000:8080 gihyodocker/echo:latest
すると，待機状態になる．

別のターミナルから
#+begin_src bash
curl http://localhost:9000/
#+end_src

#+RESULTS:
: Hello Docker!!
と返ってくる．

待機状態の端末には，実行の度
#+begin_example
2019/05/09 01:16:09 received request
2019/05/09 01:16:11 received request
2019/05/09 01:16:12 received request
2019/05/09 01:16:12 received request
2019/05/09 01:16:13 received request
2019/05/09 01:17:52 received request
#+end_example

このポートがよくわからんのだよなー．
-t は端末モード．
-p は？

使い終わったら
docker stop $(docker container ls -q)
* 2. Docker コンテナのデプロイ
*** Web サーバーを作る
**** まずサーバーのコードを Go で書く
#+begin_src go :tangle main.go
  package main

  import (
      "fmt"
      "log"
      "net/http"
  )

  func main() {
      http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
          log.Println("received request")
          fmt.Fprintf(w, "Hello Docker!!")
      })

      log.Println("start server")
      server := &http.Server{Addr:":8080"}
      if err := server.ListenAndServe(); err != nil {
          log.Println(err)
      }
  }
#+end_src
**** 次にDockerfile
#+begin_src example :tangle Dockerfile
FROM golang:1.9

RUN mkdir /echo
COPY main.go /echo

CMD ["go", "run", "/echo/main.go"]
#+end_src
これがよくわからないよね．
それはドメイン特化言語だから．
FROM や RUN などはインストラクションという．
***** インストラクションの説明
- FROM: ベースイメージを指定
- RUN: ビルド時に実行するコマンド． mkdirなど
- COPY: ホストマシンのファイルをコンテナに取り込む時に使う
- CMD: コンテナを実行する時に実行されるプロセス
*** イメージをビルドする
#+begin_src sh
  docker image build -t example/echo:latest .
#+end_src

#+RESULTS:
| Sending      | build        | context             | to           | Docker     | daemon | 6.656kB       |
| Step         | 1/4          | :                   | FROM         | golang:1.9 |        |               |
| --->         | ef89ef5c42a9 |                     |              |            |        |               |
| Step         | 2/4          | :                   | RUN          | mkdir      | /echo  |               |
| --->         | Using        | cache               |              |            |        |               |
| --->         | 79205e34c6ab |                     |              |            |        |               |
| Step         | 3/4          | :                   | COPY         | main.go    | /echo  |               |
| --->         | 3f17f2e90f79 |                     |              |            |        |               |
| Step         | 4/4          | :                   | CMD          | go         | run    | /echo/main.go |
| --->         | Running      | in                  | 803148e65d7b |            |        |               |
| Removing     | intermediate | container           | 803148e65d7b |            |        |               |
| --->         | 0d6e38b210b6 |                     |              |            |        |               |
| Successfully | built        | 0d6e38b210b6        |              |            |        |               |
| Successfully | tagged       | example/echo:latest |              |            |        |               |

#+begin_example
Sending build context to Docker daemon  6.144kB
Step 1/4 : FROM golang:1.9
1.9: Pulling from library/golang
Digest: sha256:8b5968585131604a92af02f5690713efadf029cc8dad53f79280b87a80eb1354
Status: Downloaded newer image for golang:1.9
 ---> ef89ef5c42a9
Step 2/4 : RUN mkdir /echo
 ---> Running in 4f1f8a2f8efe
Removing intermediate container 4f1f8a2f8efe
 ---> 79205e34c6ab
Step 3/4 : COPY main.go /echo
 ---> 83a4e1ae8837
Step 4/4 : CMD ["go", "run", "/echo/main.go"]
 ---> Running in 17cd925bc248
Removing intermediate container 17cd925bc248
 ---> a87b31ea03d5
Successfully built a87b31ea03d5
Successfully tagged example/echo:latest
#+end_example
 できた．

#+begin_src bash
docker image ls
#+end_src

#+RESULTS:
| REPOSITORY                                | TAG    | IMAGE        |    ID | CREATED | SIZE   |        |       |
| example/echo                              | latest | a87b31ea03d5 | About | a       | minute | ago    | 750MB |
*** 2.1.3 Docker container を実行する
今度はバックグラウンドで実行してほしいので -d をつける
#+begin_src bash
docker container run -d example/echo:latest
curl http://localhost:8080/
#+end_src

実行してみると，下のように失敗する．
#+begin_example
curl: (7) Failed to connect to localhost port 8080: Connection refused
#+end_example
なぜか？
8080ポートはコンテナの中にしか公開されていないため，
コンテナの外からのリクエストを受け付けないから．

そこで必要なのがポートフォワーディング．

コンテナを一旦止める．
#+begin_src bash
docker container stop $(docker container ls -filter "ancestor=example/echo" -q)
#+end_src

さぁ，ポートフォワーディングしてみよう．
やり方は -p オプション．

#+begin_src bash
docker container run -d -p 9000:8080 example/echo:latest
#+end_src


#+RESULTS:
: 77e86a8ba90a38323847aa69af02bdc5a323cbcc08f5c30146e5faa5a4683074

じゃ，リクエストをおくってみよう．
#+begin_src bash
curl http://localhost:9000/
#+end_src

#+RESULTS:
: Hello Docker!!

やった！！！

ポートフォワーディングの
-p 9000:8080
の左側は，ホスト側のポート．
これを省略可能で，省略すると空いているポートが割り振られる．

もう一回コンテナを止めよう．
#+begin_src bash
docker container stop $(docker container ls -filter "ancestor=example/echo" -q)
#+end_src

#+RESULTS:

#+begin_src bash
docker container run -d -p 8080 example/echo:latest
#+end_src

#+RESULTS:
: 113bb7ce333704cc1fc9868198e5ec7cc6fe5f97de4886c9e6cf121f367629c2

#+begin_src bash
docker container ls
#+end_src

#+RESULTS:
: CONTAINER ID        IMAGE                 COMMAND                  CREATED              STATUS              PORTS                     NAMES
: 113bb7ce3337        example/echo:latest   "go run /echo/main.go"   About a minute ago   Up About a minute   0.0.0.0:32768->8080/tcp   loving_bardeen
32768にフォワードされている．

#+begin_src bash
curl http://localhost:32768/
#+end_src

#+RESULTS:
: Hello Docker!!

できた！！
** 2.2 Docker イメージの操作
Docker の基本操作は2つ．
- イメージに対する操作
- コンテナに対する操作

コマンド構成
#+begin_example
docker COMMAND SUBCOMMAND
#+end_example
例えば
#+begin_example
docker image build
#+end_example

#+begin_example
docker help
#+end_example

とすると上位コマンドが列挙される．
サブコマンドは
#+begin_example
docker image --help
#+end_example
とすると見れる．

#+begin_example
docer image build --help
#+end_example
とすると，サブコマンドのヘルプも見れる．
*** 2.2.1 イメージのビルド
#+begin_example
docker image build -t イメージ名[:タグ名] PATH
#+end_example

**** -f オプション
特殊な名前を持つ Dockerfile を利用する時つかう．

**** --pull
ベースイメージを強制的にダウンロードして使う．
もちろん少し時間がかかる．

