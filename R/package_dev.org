#+TITLE: Rパッケージ開発入門
#+STARTUP: overview
* 第一歩
** はじめに
なぜ本書で学ぶスキルが重要か

本書のゴール: 自力でバッケージを書けるようになること
なぜパッケージを書くのか
- 人と共有したいコードがある
- 規約に従うことによって自分自身の時間を節約するため
*** 哲学
自動化できるものは自動化する！これはdevtoolsでできる．
**** devtools のデメリット
パッケージがどのように構成されているのかを遮蔽してしまう．
詳しく学ぶには公式の[[http://bit.ly/iEYWyMy][Writing R Extensions]]が一番．
ただし，難しいので基本を理解してから．
*** 学習開始
**** パッケージのインストール
#+BEGIN_SRC R
  install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
  devtools::install_github("hadley/devtools")
#+END_SRC
**** その他必要なもの
Xcode または Command-Line Tools for Xcode
** パッケージの構造
- パッケージの基本的な構造
- どのような形式をとれるのか
*** パッケージに名前をつける
**** 名前の要件
- 文字と数字（とピリオド: 非推奨）だけで構成されること
- 文字で始まること
- ピリオドでは終わらないこと
**** 名前を付ける方法
- Google で検索しやすく
- 大文字と小文字の両方を使わない
- 略語を使用する
- 最後に r を追加する
*** パッケージを作成する
以下を実行
#+BEGIN_SRC R
devtools::create("mytestpkg")
#+END_SRC

#+RESULTS:
: TRUE


以下が生成
- R/: [[*R%E3%82%B3%E3%83%BC%E3%83%89][第3章 Rコード]]で説明
- DESCRIPTION: [[*%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%A1%E3%82%BF%E3%83%87%E3%83%BC%E3%82%BF][第4章 パッケージのメタデータ]]で説明
- NAMESPACE: [[*%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93][第8章 名前空間]]で説明
*** Rstudio プロジェクト
*** パッケージとは
5種類ある．
**** ソースパッケージ
自身のマシンの中の開発バージョンのこと．
**** バンドルパッケージ
.tar.gzの形で1つのファイルに圧縮されたもの．
必要になったときには，devtools::build() すれば生成する．
バンドルパッケージソースパッケージと似ているが，は以下のような特徴がある
- vignetteがビルドされていて，.md や.tex ではなく，HTML や PDF の出力が作成されている．
- ソースパッケージに開発高速化のための一時ファイルが入っていない．
- .Rbuildignore にリストされたファイルが取り除かれている
***** ignore すべきファイル
- .Rproj
- .Rproj.user
- README.Rmd
- cran-comments.md
- NEWS.md
- .travis.yml
**** バイナリパッケージ
R パッケージ開発ツールを持っていないユーザに配布する場合の形．
ただし，プラットフォームに依存する．
内部構造はソースパッケージとかなり違う．
- R/ には .R ファイルがない．そのかわり，関数が読み込まれ，最適なファイル形式で保存されている．
- Meta/ にたくさんの Rds ファイルがアク．
- html/ にヘルプに必要なファイルがある
- src/ が libs/ に変わり，コンパイル結果が入っている
- inst/ が最上位に移動している
**** インストール済みのパッケージ
**** インメモリパッケージ
ロードされ，検索パスにアタッチされたパッケージ．
*** ライブラリとは
インストール済みのパッケージを含むディレクトリのこと．
**** library() と require() の違い
library() はパッケージが見つからないときエラーを返す．
ただし，パッケージを開発する時にはどちらもパッケージ内で*絶対に使用してはいけない*!!
* パッケージコンポーネント
パッケージの各コンポーネントについての説明．
** Rコード
ディレクトリR/
*** Rコードのワークフロー
パッケージを使う利点の一番は，devtools::load_all() でコードを一括リロードできること．
やってみよう
**** コードを作る
#+BEGIN_SRC sh
echo 'greet <- function(name) {print(paste0("hello, ", name, "!"))}' > mytestpkg/R/hello.R
cat mytestpkg/R/hello.R
#+END_SRC

#+RESULTS:
| greet <- function(name) {print(paste0("hello | , name, !"))} |
**** リロードする
#+BEGIN_SRC R :session *R:study*
devtools::load_all("../../mytestpkg")
greet("akira")
goodbye("Akira", 1)
goodbye("Akira", 2)
goodbye("Akira", 3)
#+END_SRC

#+RESULTS:

*** 関数をまとめる
要件
- 全ての関数を1つのファイルにしてはいけない
- 関数ごとにファイルを作ってはいけない
*** コードスタイル
Google のスタイルがおすすめ．
**** オブジェクト名
変数と関数の名前
- 小文字にする
- ドットではなく（S3 メソッドとかぶる），アンダースコアで区切る（一貫性があるならキャメルも可）
- 変数名は名詞であるべき
- 関数名は動詞であるべき
**** スペース
演算子の前後にはスペースを入れる
**** 中括弧
- 開き中括弧だけで終わらない
- 後ろに else がある時をのぞき，閉じ中括弧は独立させる
**** 行の長さ
1行80字
**** インデント
スペース2つ．タブは禁止．
**** 割当て
= ではなく，<- を使用すること．
**** コメントのガイドライン
what ではなく，why を書くように心がける．
- と = を使用してファイルを読みやすく分割する
*** トップレベルのコード
「スクリプト」と「パッケージのコード」の違い
- 実行タイミング: コードはsource()でロードされた時に実行される．パッケージでは，コードはビルドされた時に実行される．
- 状況: パッケージのコードは，想像もしなかったような状況で使われることもある．
**** コードのロード
***** パッケージの場合
トップレベルのコードはビルド時にしか実行されない．
#+BEGIN_SRC R
  library(ggplot2)                        #ここはビルド時にしか実行されない

  my_function <- function() {
    print("foo")
  }
#+END_SRC
**** Rの景観
ユーザの景観を変えてはいけない．
コードを理解するのが難しくなってしまうから．
***** 絶対にやってはいけないこと
- library()
- require()
- source()
***** 注意が必要なこと
最後に on.exit() を使ってクリーンアップすること．
- options()
- par()
- setwd()
**** 副作用が必要なのはどのようなときか                           :難しい:
時折，副作用が必要になることがある．
例えば，ロード時に初期設定をする必要があるとき．
**** S4クラス，ジェネリック，メソッド                             :難しい:
正しい順番で呼び出す必要がある．
*** CRAN に関する補足
ASCII文字だけを使うこと．
Unicode も使えるが，エスケープが必要になる．
** パッケージのメタデータ
file:mytestpkg/DESCRIPTION が説明すること
- 作成したパッケージが何を解決するのか
- 誰がパッケージを使えるのか
- 不具合発見時の連絡先
*** 必要最小限の DESCRIPTION を自動的に生成する
#+BEGIN_SRC R
devtools::create("mytestpkg")
#+END_SRC

#+RESULTS:
**** たくさんのパッケージを書くなら
以下をグローバルに設定可能．
- devtools.desc.author
- devtools.desc.license
- devtools.desc.suggests
- devtools.desc
**** DESCRIPTION の書式
Debian 制御書式（DCF）
フィールド名: 値
インデントはスペース4つ．タブは不可．
*** 依存関係: バッケージには何が必要か
#+BEGIN_SRC R
  devtools::use_package("beepr", "imports", "mytestpkg")
#+END_SRC

#+RESULTS:
devtools::use_package()とすると，自動的に Imports を DESCRIPTION に追加できる．
Suggests を追加したければ
devtools::use_package("package", "Suggests")．
***** Imports
パッケージ可動作するために「必要」なパッケージ．
ここにリストアップされたものは自動的「インストール」されるが，「ロード」はされない．
外部パッケージの関数を使う時には，package::function() の形で書くこと．
***** Suggests
ここに記載されたパッケージを「使うことができる」．
自動的にインストールはされない．
vignetteをビルドするためのサンプルデータセットを使うときなど．
**** バージョン管理
特定のバージョンに依存している時には，括弧書きでバージョンを指定する．
Imports:
    dplyr (>= 0.3.0.1)
など．
**** その他の依存関係
***** Depends
昔使われていた表記．今は常に Imports を使うべき．
例外は第8章で学ぶ．
***** LinkngTo
他のパッケージ中の C や C++ のコードに依存している．
***** Enhances
Suggests の逆．
自分が，他のパッケージの機能を高めていることを表明する．
わかりにくいので非推奨．
*** Title と Description: パッケージは何をするのか
両者は長さだけが異なる．
**** Title
パッケージ内容を1行で説明したもの．
- 65文字以内
- ピリオドなし
- 単語毎にキャピタライズ
**** Description
Title よりも詳細に説明．複数の文を使える．
- 1段落に収める．
- 各行は80文字以内
- 2行目以降は，スペース4つでインデント
*** 作成者: 開発したのは誰か
Authors@R person("Akira", "Hayashi", email = "akira.hayashi.1987@gmail.com",
role = c("aut", "cre"))
- aut: 著者
- cre: 保守担当者
- ctb: 貢献者
- cph: 著作権者．著作権が著者以外（企業などの著者の雇用主）に保有されているとき使う．
**** CRAN では
CRAN からの問い合わせにメールアドレスを使う．
*** ライセンス: パッケージを使えるのは誰か
Hadleyの見解では，ライセンスの候補は多分3つ．
- MIT: シンプルで寛容．ライセンス一緒なら，自由に再配布可能．
- GPL-2 か GPL-3: 再配布時には，GPL 準拠の方法でライセンスしなければならない．
- CC0: コードとデータ，全ての権利を放棄
**** CRAN では
公式HPにライセンス一覧がのっている．
*** バージョン
. （一応 - も使える）で区切られた整数を少なくとも2つ並べること．
- リリースしたバージョン: major.minor.patch
- 開発中のパッケージ: 最後に9000を付ける．0.0.0.9000のように．
*** その他のコンポーネント
**** Collate
.R をロードする順番を制御．
副作用を持つような時に使う．
[[*S4][5.7.2 S4 ]]で説明する
**** LazyData
パッケージ内のデータにアクセスしやすくなる．
[[*%E5%A4%96%E9%83%A8%E3%83%87%E3%83%BC%E3%82%BF][第9章 外部データ]] で説明
** オブジェクトのドキュメント
roxygen2を使った文書化: 他の人々（未来の自分も含む）に，パッケージ内の特定の関数の使い方を理解してもらうため
コードとドキュメントを一緒に作れる
作成したパッケージ内の各関数の細かく詳細な情報を記述する
**** vignette とはどう違うか？
既にオブジェクトの名前を知っているときにしか使えない．
特定の問題を解決するオブジェクトを探すときはvignette．
**** どうやるの？
適切な書式でコメントを書けば，roxygen2 が自動で .man/ の中にRdファイルを作ってくれる．
**** roxygen2 を使うメリット
- コードとドキュメントが混在しているので，コードを修正したあとで，その部分のドキュメントを修正するのを忘れにくい
- オブジェクトを動的に調査し，定型文を自動的に生成する
- 異なる種類のオブジェクトのドキュメントの違いを自動的にまとめてくれるため，枝葉を学ぶ必要がない
*** ドキュメントのワークフロー
**** 4つのステップ
- .Rファイルに roxygen コメントを追加する
- devtools::document() を実行
- ドキュメントを?でプレビューする
- ドキュメントが望ましい状態になるまでこれを繰り返す
**** やってみよう
[[file:mytestpkg/R/goodbye.R::#'%20%E6%8C%A8%E6%8B%B6%E3%82%92%E3%81%99%E3%82%8B%EF%BC%8E][Goodbye関数]]
[[/Users/ahayashi/Documents/GitHub/study/R/mytestpkg/R/hello.R][greeting関数]]

#+BEGIN_SRC R :session *R:study*
devtools::document("../../mytestpkg")
library(mytestpkg)
?goodbye
?greet
#+END_SRC

#+RESULTS:

*** その他のドキュメントのワークフロー
ページ間リンクはできない．
Rstudio ではビルドペインの Build & Reload をクリックするらしい．
コマンドラインではどうやるのだろう．
*** roxygen コメント
#'で始まり，関数よりも前に書く必要がある．
@が重要なシンタックスなので，@自体を出力したいときには@@とエスケープする必要がある．
**** 基本的な書き方
#+BEGIN_SRC R
  #' The title start with uppercase and end with period.
  #' 
  #' @param name 相手の名前
  #' @param type 挨拶の種類
  #' @return \code{\link{greet}}のあとにする，\code{name}への\code{type}個めの挨拶
  #' @examples
  #' goodbye("John", 1)
  #' goodbye("Mary", 2)
  goodbye <- function(name, type) {
    if (type == 1) {
      greeting <- "Goobye"
    } else if (type == 2) {
      greeting <- "Adios"
    } else {
      greeting <- "See you"
    }
    print(paste0(greeting, ", ", name, "."))
    beepr::beep(1)
  }
#+END_SRC
**** その他の tips
- @seealso: 有用な情報源を参照する．リンクは自分で貼らねばならない．
- @family: 関連する関数の系列を複数形で書く．今はまだ意味がわからない．
- @aliases: ?を使って指定できるトピックの別名．検索性を向上させる．
- @keywords: 事前に定義されているものから選ばないといけないらしい．今はまだ意味がわからない．
*** 関数のドキュメント
関数についてのドキュメントがいちばん多くなるだろう．
- @param: 入力について簡潔に説明．大文字で始め，ピリオドで終わる．
- @examples: 関数を実際にどのように使うのかを示す．R CMD check で自動テストされるので，エラーがないように．
- @return: 重要度は低いが，関数が入力によって異なる型の出力を返す場合や，S3, S4, RC オブジェクトを返すような場合には書いたほうがいい．
*** データセットのドキュメント
[[*%E3%83%87%E3%83%BC%E3%82%BF%E3%82%BB%E3%83%83%E3%83%88%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88][9.1.1 データセットのドキュメント]] を参照．
*** パッケージのドキュメント
パッケージ全体のヘルプを作ると，vignette を補完するものとして役立つ．
package?foo のようにアクセスされる．
パッケージに対応するオブジェクトは無いので，手作業でラベルを打つ．
**** どうやって？
package-name.R に書くと良い．
詳細は本文p.57．
[[*%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88][8.6 インポート]] で学ぶ．
*** クラス，ジェネリック，メソッドのドキュメント
使用しているオブジェクトシステムによって違う．
以下，順にみていく．
**** S3
S3のジェネリックは通常の関数なので，ドキュメントも関数として扱う．
S3クラスには公式な定義がないので，コンストラクタ関数についてドキュメントを作る．
S3メソッドについてドキュメントを書くかどうかは自分次第．
例を見たければ，predict.lm(), predict.glm(), anova.glm()などの複雑なメソッドのドキュメント例を見ることができる．
**** S4
S4のジェネリックも関数なので，ドキュメントも関数として扱う．
しかしこちらはやや複雑．
S3と違って，S4は必ずドキュメントを作成しないとだめ．
各メソッドごとに独自のドキュメントを作るのはいやだろう．
その代わりに，開発状況に応じて以下の3オプションから選択し，そこにドキュメントを記載せよ．
- クラス内: 対応するジェネリックが1つのディスパッチを使用していて，そのクラスを作ったのが自分であるとき
- ジェネリック内: ジェネリックが複数のディスパッチを使用していて，そこで使われるジェネリックもメソッドも，自分が作ったものであるとき
- 独自ファイル内: メソッドが複雑なとき，またはメソッドだけは自分が書いたが，クラスやジェネリックを書いたのは自分でないとき

@rdname や @describeIn を使って，メソッドのドキュメントがどこにあるかを制御する．
詳細は [[*%E8%A4%87%E6%95%B0%E3%81%AE%E9%96%A2%E6%95%B0%E3%82%92%E5%90%8C%E3%81%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E5%8C%96%E3%81%99%E3%82%8B][5.9.2 複数の関数を同じファイルにドキュメント化する]] を参照．

また，S4 では，コードは一定の順序で実行しなければならない点に注意．
普通，R はアルファベット順にコードを実行してしまうので，
@include タグを使って，現在のファイルより前にロードすべきファイルをスペース区切りで指定する．
**** RC （Reference class，参照クラス）
S3やS4とは違う．
メソッドがクラスに関連づけられていて，ジェネリックに関連していない．
RCも，ドキュメント化において独自の慣習，docstring がある．

クラスごとに roxygen ブロックを1つ書けばいいだけなので，S4よりは簡単．
@slot ではなく，@field を使う点にも注意．
*** 特殊文字
- @: roxygen タグの開始を示す．
- %: 文末まで続くLaTeXコメントの開始を示すために使う．%自体を挿入するには\%．
- \: LaTeX エスケープの開始を示す．\を挿入したければ\\．
*** Do Repeat Yourself
同じことを書くのはイライラする．
- @inheritParams
- @describeIn または @rdname
が助けてくれる．
**** パラメータを他の関数から継承する
今書いている関数のパラメタが，既に定義した関数のドキュメントで使われている場合，
@inheritParams を使えばいい．
**** 複数の関数を同じファイルにドキュメント化する


*** テキスト書式参照表
**** 文字の書式
**** リンク
**** リスト
**** 数式
**** 表
** vignette: 長文形式のドキュメント
詳細な情報ではなく，全体像を描く．
複数のコンポーネントをどのように組み合わせれば問題を解くことができるを説明する．
- Rmarkdown
- knitr
を使う．
*** S4
** テスト
非公式な対話的テストを公式な方法で自動化する
- 作成したパッケージが期待通りに機能することを保証するため
- 変更を加えてもそれが機能し続けるため
** 名前空間
NAMESPACE ファイルは，自分のパッケージにおいて，
- どの関数が他のパッケージから使うことができるか
- どの関数が他のパッケージに依存しているか
を定義する．
roxygen2 を使って生成する．
*** インポート
** 外部データ
data/を使えば，パッケージ内にデータを含められる．
- ユーザが簡単にデータにアクセスするため
- わかりやすい例を示すため
*** データセットのドキュメント
** コンパイル済みのコード
src/
高速なコンパイル済コードを入れる場所
パッケージのパフォーマンスのボトルネックになっている部分を解決する
** インストール済のファイル
inst/
任意の追加ファイルを入れる．
- 引用
- ライセンス
- 著作権
** その他のコンポーネント
- demo/
- exec/
- po/
- tools
* ベストプラクティス
特定のディレクトリに対してではなく，一般的なベストプラクティスについて
** Git と GitHub
RStudioで使う方法
** 自動チェック
自動品質チェック機能
自動チェックの結果が出す警告の読み方
R CMD check
** パッケージのリリース
2つのリリース方法
- CRAN
- GitHub
