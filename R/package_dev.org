#+TITLE: Rパッケージ開発入門
#+STARTUP: overview
* 第一歩
** はじめに
なぜ本書で学ぶスキルが重要か

本書のゴール: 自力でバッケージを書けるようになること
なぜパッケージを書くのか
- 人と共有したいコードがある
- 規約に従うことによって自分自身の時間を節約するため
*** 哲学
自動化できるものは自動化する！これはdevtoolsでできる．
**** devtools のデメリット
パッケージがどのように構成されているのかを遮蔽してしまう．
詳しく学ぶには公式の[[http://bit.ly/iEYWyMy][Writing R Extensions]]が一番．
ただし，難しいので基本を理解してから．
*** 学習開始
**** パッケージのインストール
#+BEGIN_SRC R
  install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
  devtools::install_github("hadley/devtools")
#+END_SRC
**** その他必要なもの
Xcode または Command-Line Tools for Xcode
** パッケージの構造
- パッケージの基本的な構造
- どのような形式をとれるのか
* パッケージコンポーネント
パッケージの各コンポーネントについての説明．
** Rコード
ディレクトリR/
** パッケージのメタデータ
DESCRIPTIONが説明すること
- 作成したパッケージが何を解決するのか
- 誰がパッケージを使えるのか
- 不具合発見時の連絡先
** オブジェクトのドキュメント
roxygen2を使った文書化: 他の人々（未来の自分も含む）に，パッケージ内の特定の関数の使い方を理解してもらうため
コードとドキュメントを一緒に作れる
作成したパッケージ内の各関数の細かく詳細な情報を記述する
** vignette: 長文形式のドキュメント
詳細な情報ではなく，全体像を描く．
複数のコンポーネントをどのように組み合わせれば問題を解くことができるを説明する．
- Rmarkdown
- knitr
を使う．
** テスト
非公式な対話的テストを公式な方法で自動化する
- 作成したパッケージが期待通りに機能することを保証するため
- 変更を加えてもそれが機能し続けるため
** 名前空間
NAMESPACE ファイルは，自分のパッケージにおいて，
- どの関数が他のパッケージから使うことができるか
- どの関数が他のパッケージに依存しているか
を定義する．
roxygen2 を使って生成する．
** 外部データ
data/を使えば，パッケージ内にデータを含められる．
- ユーザが簡単にデータにアクセスするため
- わかりやすい例を示すため
** コンパイル済みのコード
src/
高速なコンパイル済コードを入れる場所
パッケージのパフォーマンスのボトルネックになっている部分を解決する
** インストール済のファイル
inst/
任意の追加ファイルを入れる．
- 引用
- ライセンス
- 著作権
** その他のコンポーネント
- demo/
- exec/
- po/
- tools
* ベストプラクティス
特定のディレクトリに対してではなく，一般的なベストプラクティスについて
** Git と GitHub
RStudioで使う方法
** 自動チェック
自動品質チェック機能
自動チェックの結果が出す警告の読み方
R CMD check
** パッケージのリリース
2つのリリース方法
- CRAN
- GitHub
